$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
99
24020785
FacePanel.java 64 116
FacePanel.java 173 221
----------------------------------------
		if (faces.equals("default")) {			
			// a, i
			poses[pose_a] = Utilities.createImageIcon( "default/ai.png" );
			poses[pose_i] = poses[pose_a];

			// c, e, g, k, n, r, s, t
			poses[pose_c] =Utilities.createImageIcon( "default/cdgk.png" );
			poses[pose_e] = poses[pose_c];
			poses[pose_g] = poses[pose_c];
			poses[pose_k] = poses[pose_c];
			poses[pose_n] = poses[pose_c];
			poses[pose_r] = poses[pose_c];
			poses[pose_s] = poses[pose_c];
			poses[pose_t] = poses[pose_c];
			
			// closed
			poses[pose_rest] =Utilities.createImageIcon( "default/closed.png" );
			
			// d
			poses[pose_d] =Utilities.createImageIcon( "default/d.png" );
			
			// e
			poses[pose_e] =Utilities.createImageIcon( "default/e.png" );
			
			// f, v
			poses[pose_f] =Utilities.createImageIcon( "default/fv.png" );
			poses[pose_v] = poses[pose_f];
			
			// l
			poses[pose_l] =Utilities.createImageIcon( "default/l.png" );
			poses[pose_th] =Utilities.createImageIcon( "default/th.png" );
			
			// m, b, p
			poses[pose_m] =Utilities.createImageIcon( "default/mbp.png" );
			poses[pose_b] = poses[pose_m];
			poses[pose_p] = poses[pose_m];
			
			// o
			poses[pose_o] =Utilities.createImageIcon( "default/o.png" );
			
			// u
			poses[pose_u] =Utilities.createImageIcon( "default/u.png" );
			
			// q, w
			poses[pose_w] =Utilities.createImageIcon( "default/wq.png" );
			poses[pose_q] = poses[pose_w];
			
			// set the phoneme list
			Object defaultList[] = { "<none>", "A", "B", "C", "Closed", "D", "E", "F", "G", "I", "K", "L", 
                "M", "N", "O", "P", "Q", "R", "S", "SH", "T", "TH", "U", "V", "W" };
			phonemes = defaultList;

		} else if (faces.equals("toon")) {			

----------------------------------------
	} else if (faces.equals("wally")) {
			// rest
			poses[pose_rest] = Utilities.createImageIcon( "wally/rest.gif" );
			
			// a, i
			poses[pose_a] =Utilities.createImageIcon( "wally/ai.gif" );
			poses[pose_i] = poses[pose_a];

			// e
			poses[pose_e] =Utilities.createImageIcon( "wally/e.gif" );
			
			// g, t, c, k, r, s, u
			poses[pose_g] = Utilities.createImageIcon( "wally/etc.gif" );
			poses[pose_t] = poses[pose_g];
			poses[pose_c] = poses[pose_g];
			poses[pose_j] = poses[pose_g];
			poses[pose_k] = poses[pose_g];
			poses[pose_r] = poses[pose_g];
			poses[pose_s] = poses[pose_g];
			poses[pose_u] = poses[pose_g];

			// f, v
			poses[pose_f] =Utilities.createImageIcon( "wally/fv.gif" );
			poses[pose_v] = poses[pose_f];

			// l
			poses[pose_l] =Utilities.createImageIcon( "wally/l.gif" );
			poses[pose_n] = poses[pose_l];
			poses[pose_d] = poses[pose_l];
			
			// m, b, p
			poses[pose_b] =Utilities.createImageIcon( "wally/mbp.gif" );
			poses[pose_m] = poses[pose_b];
			poses[pose_p] = poses[pose_b];

			// o
			poses[pose_o] =Utilities.createImageIcon( "wally/o.gif" );

			// w, q
			poses[pose_w] =Utilities.createImageIcon( "wally/wq.gif" );
			poses[pose_q] = poses[pose_w];
			
			// set the phomene list
			Object wally[] =  { "<none>", "A", "B", "C", "Closed", "D", "E", "F", "G", "I", "J", "K", "L", 
				"M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W" };
			phonemes = wally;

			
		} else if (faces.equals("blair")) {

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
99
27178832
FacePanel.java 64 116
FacePanel.java 116 173
----------------------------------------
		if (faces.equals("default")) {			
			// a, i
			poses[pose_a] = Utilities.createImageIcon( "default/ai.png" );
			poses[pose_i] = poses[pose_a];

			// c, e, g, k, n, r, s, t
			poses[pose_c] =Utilities.createImageIcon( "default/cdgk.png" );
			poses[pose_e] = poses[pose_c];
			poses[pose_g] = poses[pose_c];
			poses[pose_k] = poses[pose_c];
			poses[pose_n] = poses[pose_c];
			poses[pose_r] = poses[pose_c];
			poses[pose_s] = poses[pose_c];
			poses[pose_t] = poses[pose_c];
			
			// closed
			poses[pose_rest] =Utilities.createImageIcon( "default/closed.png" );
			
			// d
			poses[pose_d] =Utilities.createImageIcon( "default/d.png" );
			
			// e
			poses[pose_e] =Utilities.createImageIcon( "default/e.png" );
			
			// f, v
			poses[pose_f] =Utilities.createImageIcon( "default/fv.png" );
			poses[pose_v] = poses[pose_f];
			
			// l
			poses[pose_l] =Utilities.createImageIcon( "default/l.png" );
			poses[pose_th] =Utilities.createImageIcon( "default/th.png" );
			
			// m, b, p
			poses[pose_m] =Utilities.createImageIcon( "default/mbp.png" );
			poses[pose_b] = poses[pose_m];
			poses[pose_p] = poses[pose_m];
			
			// o
			poses[pose_o] =Utilities.createImageIcon( "default/o.png" );
			
			// u
			poses[pose_u] =Utilities.createImageIcon( "default/u.png" );
			
			// q, w
			poses[pose_w] =Utilities.createImageIcon( "default/wq.png" );
			poses[pose_q] = poses[pose_w];
			
			// set the phoneme list
			Object defaultList[] = { "<none>", "A", "B", "C", "Closed", "D", "E", "F", "G", "I", "K", "L", 
                "M", "N", "O", "P", "Q", "R", "S", "SH", "T", "TH", "U", "V", "W" };
			phonemes = defaultList;

		} else if (faces.equals("toon")) {			

----------------------------------------
		} else if (faces.equals("toon")) {			
				// a, i
				poses[pose_a] = Utilities.createImageIcon( "toon/ai.gif" );
				poses[pose_i] = poses[pose_a];

				// e
				poses[pose_e] =Utilities.createImageIcon( "toon/e.gif" );
				
				// c, g, k, n, r, s, t
				poses[pose_c] =Utilities.createImageIcon( "toon/cdgk.gif" );
				poses[pose_g] = poses[pose_c];
				poses[pose_k] = poses[pose_c];
				poses[pose_n] = poses[pose_c];
				poses[pose_r] = poses[pose_c];
				poses[pose_s] = poses[pose_c];
				poses[pose_t] = poses[pose_c];
				
				// closed
				poses[pose_rest] =Utilities.createImageIcon( "toon/closed.gif" );
				
				// d
				poses[pose_d] =Utilities.createImageIcon( "toon/d.gif" );
				
				// e
				poses[pose_e] =Utilities.createImageIcon( "toon/e.gif" );
				
				// f, v
				poses[pose_f] =Utilities.createImageIcon( "toon/fv.gif" );
				poses[pose_v] = poses[pose_f];
				
				// l
				poses[pose_l] =Utilities.createImageIcon( "toon/l.gif" );
				
				// th
				poses[pose_th] =Utilities.createImageIcon( "toon/th.gif" );
				
				// m, b, p
				poses[pose_m] =Utilities.createImageIcon( "toon/mbp.gif" );
				poses[pose_b] = poses[pose_m];
				poses[pose_p] = poses[pose_m];
				
				// o
				poses[pose_o] =Utilities.createImageIcon( "toon/o.gif" );
				
				// u
				poses[pose_u] =Utilities.createImageIcon( "toon/u.gif" );
				
				// q, w
				poses[pose_w] =Utilities.createImageIcon( "toon/wq.gif" );
				poses[pose_q] = poses[pose_w];
				
				// set the phoneme list
				Object toonList[] = { "<none>", "A", "B", "C", "CH", "Closed", "D", "E", "F", "G", "I", "K", "L", 
	                "M", "N", "O", "P", "Q", "R", "S", "SH", "T", "TH", "U", "V", "W" };
				phonemes = toonList;
			
			
	} else if (faces.equals("wally")) {

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
99
27178833
FacePanel.java 173 221
FacePanel.java 116 173
----------------------------------------
	} else if (faces.equals("wally")) {
			// rest
			poses[pose_rest] = Utilities.createImageIcon( "wally/rest.gif" );
			
			// a, i
			poses[pose_a] =Utilities.createImageIcon( "wally/ai.gif" );
			poses[pose_i] = poses[pose_a];

			// e
			poses[pose_e] =Utilities.createImageIcon( "wally/e.gif" );
			
			// g, t, c, k, r, s, u
			poses[pose_g] = Utilities.createImageIcon( "wally/etc.gif" );
			poses[pose_t] = poses[pose_g];
			poses[pose_c] = poses[pose_g];
			poses[pose_j] = poses[pose_g];
			poses[pose_k] = poses[pose_g];
			poses[pose_r] = poses[pose_g];
			poses[pose_s] = poses[pose_g];
			poses[pose_u] = poses[pose_g];

			// f, v
			poses[pose_f] =Utilities.createImageIcon( "wally/fv.gif" );
			poses[pose_v] = poses[pose_f];

			// l
			poses[pose_l] =Utilities.createImageIcon( "wally/l.gif" );
			poses[pose_n] = poses[pose_l];
			poses[pose_d] = poses[pose_l];
			
			// m, b, p
			poses[pose_b] =Utilities.createImageIcon( "wally/mbp.gif" );
			poses[pose_m] = poses[pose_b];
			poses[pose_p] = poses[pose_b];

			// o
			poses[pose_o] =Utilities.createImageIcon( "wally/o.gif" );

			// w, q
			poses[pose_w] =Utilities.createImageIcon( "wally/wq.gif" );
			poses[pose_q] = poses[pose_w];
			
			// set the phomene list
			Object wally[] =  { "<none>", "A", "B", "C", "Closed", "D", "E", "F", "G", "I", "J", "K", "L", 
				"M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W" };
			phonemes = wally;

			
		} else if (faces.equals("blair")) {

----------------------------------------
		} else if (faces.equals("toon")) {			
				// a, i
				poses[pose_a] = Utilities.createImageIcon( "toon/ai.gif" );
				poses[pose_i] = poses[pose_a];

				// e
				poses[pose_e] =Utilities.createImageIcon( "toon/e.gif" );
				
				// c, g, k, n, r, s, t
				poses[pose_c] =Utilities.createImageIcon( "toon/cdgk.gif" );
				poses[pose_g] = poses[pose_c];
				poses[pose_k] = poses[pose_c];
				poses[pose_n] = poses[pose_c];
				poses[pose_r] = poses[pose_c];
				poses[pose_s] = poses[pose_c];
				poses[pose_t] = poses[pose_c];
				
				// closed
				poses[pose_rest] =Utilities.createImageIcon( "toon/closed.gif" );
				
				// d
				poses[pose_d] =Utilities.createImageIcon( "toon/d.gif" );
				
				// e
				poses[pose_e] =Utilities.createImageIcon( "toon/e.gif" );
				
				// f, v
				poses[pose_f] =Utilities.createImageIcon( "toon/fv.gif" );
				poses[pose_v] = poses[pose_f];
				
				// l
				poses[pose_l] =Utilities.createImageIcon( "toon/l.gif" );
				
				// th
				poses[pose_th] =Utilities.createImageIcon( "toon/th.gif" );
				
				// m, b, p
				poses[pose_m] =Utilities.createImageIcon( "toon/mbp.gif" );
				poses[pose_b] = poses[pose_m];
				poses[pose_p] = poses[pose_m];
				
				// o
				poses[pose_o] =Utilities.createImageIcon( "toon/o.gif" );
				
				// u
				poses[pose_u] =Utilities.createImageIcon( "toon/u.gif" );
				
				// q, w
				poses[pose_w] =Utilities.createImageIcon( "toon/wq.gif" );
				poses[pose_q] = poses[pose_w];
				
				// set the phoneme list
				Object toonList[] = { "<none>", "A", "B", "C", "CH", "Closed", "D", "E", "F", "G", "I", "K", "L", 
	                "M", "N", "O", "P", "Q", "R", "S", "SH", "T", "TH", "U", "V", "W" };
				phonemes = toonList;
			
			
	} else if (faces.equals("wally")) {

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
99
24020787
FacePanel.java 64 116
FacePanel.java 221 272
----------------------------------------
		if (faces.equals("default")) {			
			// a, i
			poses[pose_a] = Utilities.createImageIcon( "default/ai.png" );
			poses[pose_i] = poses[pose_a];

			// c, e, g, k, n, r, s, t
			poses[pose_c] =Utilities.createImageIcon( "default/cdgk.png" );
			poses[pose_e] = poses[pose_c];
			poses[pose_g] = poses[pose_c];
			poses[pose_k] = poses[pose_c];
			poses[pose_n] = poses[pose_c];
			poses[pose_r] = poses[pose_c];
			poses[pose_s] = poses[pose_c];
			poses[pose_t] = poses[pose_c];
			
			// closed
			poses[pose_rest] =Utilities.createImageIcon( "default/closed.png" );
			
			// d
			poses[pose_d] =Utilities.createImageIcon( "default/d.png" );
			
			// e
			poses[pose_e] =Utilities.createImageIcon( "default/e.png" );
			
			// f, v
			poses[pose_f] =Utilities.createImageIcon( "default/fv.png" );
			poses[pose_v] = poses[pose_f];
			
			// l
			poses[pose_l] =Utilities.createImageIcon( "default/l.png" );
			poses[pose_th] =Utilities.createImageIcon( "default/th.png" );
			
			// m, b, p
			poses[pose_m] =Utilities.createImageIcon( "default/mbp.png" );
			poses[pose_b] = poses[pose_m];
			poses[pose_p] = poses[pose_m];
			
			// o
			poses[pose_o] =Utilities.createImageIcon( "default/o.png" );
			
			// u
			poses[pose_u] =Utilities.createImageIcon( "default/u.png" );
			
			// q, w
			poses[pose_w] =Utilities.createImageIcon( "default/wq.png" );
			poses[pose_q] = poses[pose_w];
			
			// set the phoneme list
			Object defaultList[] = { "<none>", "A", "B", "C", "Closed", "D", "E", "F", "G", "I", "K", "L", 
                "M", "N", "O", "P", "Q", "R", "S", "SH", "T", "TH", "U", "V", "W" };
			phonemes = defaultList;

		} else if (faces.equals("toon")) {			

----------------------------------------
		} else if (faces.equals("blair")) {
			// rest
			poses[pose_rest] = Utilities.createImageIcon( "blair/rest.gif" );
			
			// a, i
			poses[pose_a] =Utilities.createImageIcon( "blair/ai.gif" );
			poses[pose_i] = poses[pose_a];

			// e
			poses[pose_e] =Utilities.createImageIcon( "blair/e.gif" );
			
			// g, t, c, k, r, s, u
			poses[pose_g] = Utilities.createImageIcon( "blair/etc.gif" );
			poses[pose_t] = poses[pose_g];
			poses[pose_c] = poses[pose_g];
			poses[pose_j] = poses[pose_g];
			poses[pose_k] = poses[pose_g];
			poses[pose_r] = poses[pose_g];
			poses[pose_s] = poses[pose_g];
			poses[pose_u] = poses[pose_g];

			// f, v
			poses[pose_f] =Utilities.createImageIcon( "blair/fv.gif" );
			poses[pose_v] = poses[pose_f];

			// l
			poses[pose_l] =Utilities.createImageIcon( "blair/ldth.gif" );
			poses[pose_n] = poses[pose_l];
			poses[pose_d] = poses[pose_l];
			poses[pose_th] = poses[pose_l];
			
			// m, b, p
			poses[pose_b] =Utilities.createImageIcon( "blair/mbp.gif" );
			poses[pose_m] = poses[pose_b];
			poses[pose_p] = poses[pose_b];

			// o
			poses[pose_o] =Utilities.createImageIcon( "blair/o.gif" );

			// w, q
			poses[pose_w] =Utilities.createImageIcon( "blair/wq.gif" );
			poses[pose_q] = poses[pose_w];

			// u
			poses[pose_u] =Utilities.createImageIcon( "blair/u.gif" );			

			// set the phonemes list
			Object blair[] =  { "<none>", "A", "B", "C", "D", "E", "F", "G", "I", "J", "K", "L", 
				"M", "N", "O", "P", "Q", "R", "S", "T", "TH", "U", "V", "W" };
			phonemes = blair;

		} else if (faces.equals("extended")) {

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
99
27178831
FacePanel.java 173 221
FacePanel.java 221 272
----------------------------------------
	} else if (faces.equals("wally")) {
			// rest
			poses[pose_rest] = Utilities.createImageIcon( "wally/rest.gif" );
			
			// a, i
			poses[pose_a] =Utilities.createImageIcon( "wally/ai.gif" );
			poses[pose_i] = poses[pose_a];

			// e
			poses[pose_e] =Utilities.createImageIcon( "wally/e.gif" );
			
			// g, t, c, k, r, s, u
			poses[pose_g] = Utilities.createImageIcon( "wally/etc.gif" );
			poses[pose_t] = poses[pose_g];
			poses[pose_c] = poses[pose_g];
			poses[pose_j] = poses[pose_g];
			poses[pose_k] = poses[pose_g];
			poses[pose_r] = poses[pose_g];
			poses[pose_s] = poses[pose_g];
			poses[pose_u] = poses[pose_g];

			// f, v
			poses[pose_f] =Utilities.createImageIcon( "wally/fv.gif" );
			poses[pose_v] = poses[pose_f];

			// l
			poses[pose_l] =Utilities.createImageIcon( "wally/l.gif" );
			poses[pose_n] = poses[pose_l];
			poses[pose_d] = poses[pose_l];
			
			// m, b, p
			poses[pose_b] =Utilities.createImageIcon( "wally/mbp.gif" );
			poses[pose_m] = poses[pose_b];
			poses[pose_p] = poses[pose_b];

			// o
			poses[pose_o] =Utilities.createImageIcon( "wally/o.gif" );

			// w, q
			poses[pose_w] =Utilities.createImageIcon( "wally/wq.gif" );
			poses[pose_q] = poses[pose_w];
			
			// set the phomene list
			Object wally[] =  { "<none>", "A", "B", "C", "Closed", "D", "E", "F", "G", "I", "J", "K", "L", 
				"M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W" };
			phonemes = wally;

			
		} else if (faces.equals("blair")) {

----------------------------------------
		} else if (faces.equals("blair")) {
			// rest
			poses[pose_rest] = Utilities.createImageIcon( "blair/rest.gif" );
			
			// a, i
			poses[pose_a] =Utilities.createImageIcon( "blair/ai.gif" );
			poses[pose_i] = poses[pose_a];

			// e
			poses[pose_e] =Utilities.createImageIcon( "blair/e.gif" );
			
			// g, t, c, k, r, s, u
			poses[pose_g] = Utilities.createImageIcon( "blair/etc.gif" );
			poses[pose_t] = poses[pose_g];
			poses[pose_c] = poses[pose_g];
			poses[pose_j] = poses[pose_g];
			poses[pose_k] = poses[pose_g];
			poses[pose_r] = poses[pose_g];
			poses[pose_s] = poses[pose_g];
			poses[pose_u] = poses[pose_g];

			// f, v
			poses[pose_f] =Utilities.createImageIcon( "blair/fv.gif" );
			poses[pose_v] = poses[pose_f];

			// l
			poses[pose_l] =Utilities.createImageIcon( "blair/ldth.gif" );
			poses[pose_n] = poses[pose_l];
			poses[pose_d] = poses[pose_l];
			poses[pose_th] = poses[pose_l];
			
			// m, b, p
			poses[pose_b] =Utilities.createImageIcon( "blair/mbp.gif" );
			poses[pose_m] = poses[pose_b];
			poses[pose_p] = poses[pose_b];

			// o
			poses[pose_o] =Utilities.createImageIcon( "blair/o.gif" );

			// w, q
			poses[pose_w] =Utilities.createImageIcon( "blair/wq.gif" );
			poses[pose_q] = poses[pose_w];

			// u
			poses[pose_u] =Utilities.createImageIcon( "blair/u.gif" );			

			// set the phonemes list
			Object blair[] =  { "<none>", "A", "B", "C", "D", "E", "F", "G", "I", "J", "K", "L", 
				"M", "N", "O", "P", "Q", "R", "S", "T", "TH", "U", "V", "W" };
			phonemes = blair;

		} else if (faces.equals("extended")) {

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
99
24020786
FacePanel.java 116 173
FacePanel.java 221 272
----------------------------------------
		} else if (faces.equals("toon")) {			
				// a, i
				poses[pose_a] = Utilities.createImageIcon( "toon/ai.gif" );
				poses[pose_i] = poses[pose_a];

				// e
				poses[pose_e] =Utilities.createImageIcon( "toon/e.gif" );
				
				// c, g, k, n, r, s, t
				poses[pose_c] =Utilities.createImageIcon( "toon/cdgk.gif" );
				poses[pose_g] = poses[pose_c];
				poses[pose_k] = poses[pose_c];
				poses[pose_n] = poses[pose_c];
				poses[pose_r] = poses[pose_c];
				poses[pose_s] = poses[pose_c];
				poses[pose_t] = poses[pose_c];
				
				// closed
				poses[pose_rest] =Utilities.createImageIcon( "toon/closed.gif" );
				
				// d
				poses[pose_d] =Utilities.createImageIcon( "toon/d.gif" );
				
				// e
				poses[pose_e] =Utilities.createImageIcon( "toon/e.gif" );
				
				// f, v
				poses[pose_f] =Utilities.createImageIcon( "toon/fv.gif" );
				poses[pose_v] = poses[pose_f];
				
				// l
				poses[pose_l] =Utilities.createImageIcon( "toon/l.gif" );
				
				// th
				poses[pose_th] =Utilities.createImageIcon( "toon/th.gif" );
				
				// m, b, p
				poses[pose_m] =Utilities.createImageIcon( "toon/mbp.gif" );
				poses[pose_b] = poses[pose_m];
				poses[pose_p] = poses[pose_m];
				
				// o
				poses[pose_o] =Utilities.createImageIcon( "toon/o.gif" );
				
				// u
				poses[pose_u] =Utilities.createImageIcon( "toon/u.gif" );
				
				// q, w
				poses[pose_w] =Utilities.createImageIcon( "toon/wq.gif" );
				poses[pose_q] = poses[pose_w];
				
				// set the phoneme list
				Object toonList[] = { "<none>", "A", "B", "C", "CH", "Closed", "D", "E", "F", "G", "I", "K", "L", 
	                "M", "N", "O", "P", "Q", "R", "S", "SH", "T", "TH", "U", "V", "W" };
				phonemes = toonList;
			
			
	} else if (faces.equals("wally")) {

----------------------------------------
		} else if (faces.equals("blair")) {
			// rest
			poses[pose_rest] = Utilities.createImageIcon( "blair/rest.gif" );
			
			// a, i
			poses[pose_a] =Utilities.createImageIcon( "blair/ai.gif" );
			poses[pose_i] = poses[pose_a];

			// e
			poses[pose_e] =Utilities.createImageIcon( "blair/e.gif" );
			
			// g, t, c, k, r, s, u
			poses[pose_g] = Utilities.createImageIcon( "blair/etc.gif" );
			poses[pose_t] = poses[pose_g];
			poses[pose_c] = poses[pose_g];
			poses[pose_j] = poses[pose_g];
			poses[pose_k] = poses[pose_g];
			poses[pose_r] = poses[pose_g];
			poses[pose_s] = poses[pose_g];
			poses[pose_u] = poses[pose_g];

			// f, v
			poses[pose_f] =Utilities.createImageIcon( "blair/fv.gif" );
			poses[pose_v] = poses[pose_f];

			// l
			poses[pose_l] =Utilities.createImageIcon( "blair/ldth.gif" );
			poses[pose_n] = poses[pose_l];
			poses[pose_d] = poses[pose_l];
			poses[pose_th] = poses[pose_l];
			
			// m, b, p
			poses[pose_b] =Utilities.createImageIcon( "blair/mbp.gif" );
			poses[pose_m] = poses[pose_b];
			poses[pose_p] = poses[pose_b];

			// o
			poses[pose_o] =Utilities.createImageIcon( "blair/o.gif" );

			// w, q
			poses[pose_w] =Utilities.createImageIcon( "blair/wq.gif" );
			poses[pose_q] = poses[pose_w];

			// u
			poses[pose_u] =Utilities.createImageIcon( "blair/u.gif" );			

			// set the phonemes list
			Object blair[] =  { "<none>", "A", "B", "C", "D", "E", "F", "G", "I", "J", "K", "L", 
				"M", "N", "O", "P", "Q", "R", "S", "T", "TH", "U", "V", "W" };
			phonemes = blair;

		} else if (faces.equals("extended")) {

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
99
27178829
FacePanel.java 221 272
FacePanel.java 272 330
----------------------------------------
		} else if (faces.equals("blair")) {
			// rest
			poses[pose_rest] = Utilities.createImageIcon( "blair/rest.gif" );
			
			// a, i
			poses[pose_a] =Utilities.createImageIcon( "blair/ai.gif" );
			poses[pose_i] = poses[pose_a];

			// e
			poses[pose_e] =Utilities.createImageIcon( "blair/e.gif" );
			
			// g, t, c, k, r, s, u
			poses[pose_g] = Utilities.createImageIcon( "blair/etc.gif" );
			poses[pose_t] = poses[pose_g];
			poses[pose_c] = poses[pose_g];
			poses[pose_j] = poses[pose_g];
			poses[pose_k] = poses[pose_g];
			poses[pose_r] = poses[pose_g];
			poses[pose_s] = poses[pose_g];
			poses[pose_u] = poses[pose_g];

			// f, v
			poses[pose_f] =Utilities.createImageIcon( "blair/fv.gif" );
			poses[pose_v] = poses[pose_f];

			// l
			poses[pose_l] =Utilities.createImageIcon( "blair/ldth.gif" );
			poses[pose_n] = poses[pose_l];
			poses[pose_d] = poses[pose_l];
			poses[pose_th] = poses[pose_l];
			
			// m, b, p
			poses[pose_b] =Utilities.createImageIcon( "blair/mbp.gif" );
			poses[pose_m] = poses[pose_b];
			poses[pose_p] = poses[pose_b];

			// o
			poses[pose_o] =Utilities.createImageIcon( "blair/o.gif" );

			// w, q
			poses[pose_w] =Utilities.createImageIcon( "blair/wq.gif" );
			poses[pose_q] = poses[pose_w];

			// u
			poses[pose_u] =Utilities.createImageIcon( "blair/u.gif" );			

			// set the phonemes list
			Object blair[] =  { "<none>", "A", "B", "C", "D", "E", "F", "G", "I", "J", "K", "L", 
				"M", "N", "O", "P", "Q", "R", "S", "T", "TH", "U", "V", "W" };
			phonemes = blair;

		} else if (faces.equals("extended")) {

----------------------------------------
		} else if (faces.equals("extended")) {
			// rest
			poses[pose_rest] = Utilities.createImageIcon( "extended/rest.jpg" );

			// a, i
			poses[pose_a] =Utilities.createImageIcon( "extended/ai.jpg" );
			poses[pose_i] = poses[pose_a];

			// e
			poses[pose_e] =Utilities.createImageIcon( "extended/e.jpg" );
			
			// c, d, g, k, n, r, s, y, z
			poses[pose_c] = Utilities.createImageIcon( "extended/etc.jpg" );
			poses[pose_d] = poses[pose_c];
			poses[pose_g] = poses[pose_c];
			poses[pose_k] = poses[pose_c];
			poses[pose_n] = poses[pose_c];
			poses[pose_r] = poses[pose_c];
			poses[pose_s] = poses[pose_c];
			poses[pose_y] = poses[pose_c];
			poses[pose_z] = poses[pose_c];

			// f, v
			poses[pose_f] =Utilities.createImageIcon( "extended/fv.jpg" );
			poses[pose_v] = poses[pose_f];

			// j, ch, sh
			poses[pose_j] =Utilities.createImageIcon( "extended/jchsh.jpg" );
			poses[pose_ch] = poses[pose_j];
			poses[pose_sh] = poses[pose_j];			

			// l
			poses[pose_l] =Utilities.createImageIcon( "extended/l.jpg" );
			poses[pose_t] = poses[pose_l];
			
			// m, b, p
			poses[pose_b] =Utilities.createImageIcon( "extended/mbp.jpg" );
			poses[pose_m] = poses[pose_b];
			poses[pose_p] = poses[pose_b];

			// o
			poses[pose_o] =Utilities.createImageIcon( "extended/o.jpg" );

			// th
			poses[pose_th] =Utilities.createImageIcon( "extended/th.jpg" );

			// w, q
			poses[pose_w] =Utilities.createImageIcon( "extended/wq.jpg" );
			poses[pose_q] = poses[pose_w];

			// u
			poses[pose_u] =Utilities.createImageIcon( "extended/u.jpg" );			

			// set the phonemes list
			Object extended[] =  { "<none>", "A", "B", "C", "CH", "D", "E", "F", "G", "I", "J", "K", "L", 
                "M", "N", "O", "P", "Q", "R", "S", "SH", "T", "TH", "U", "V", "W", "Z" };
			phonemes = extended;

		} else if (faces.equals("clay")) {			

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
99
24020788
FacePanel.java 116 173
FacePanel.java 272 330
----------------------------------------
		} else if (faces.equals("toon")) {			
				// a, i
				poses[pose_a] = Utilities.createImageIcon( "toon/ai.gif" );
				poses[pose_i] = poses[pose_a];

				// e
				poses[pose_e] =Utilities.createImageIcon( "toon/e.gif" );
				
				// c, g, k, n, r, s, t
				poses[pose_c] =Utilities.createImageIcon( "toon/cdgk.gif" );
				poses[pose_g] = poses[pose_c];
				poses[pose_k] = poses[pose_c];
				poses[pose_n] = poses[pose_c];
				poses[pose_r] = poses[pose_c];
				poses[pose_s] = poses[pose_c];
				poses[pose_t] = poses[pose_c];
				
				// closed
				poses[pose_rest] =Utilities.createImageIcon( "toon/closed.gif" );
				
				// d
				poses[pose_d] =Utilities.createImageIcon( "toon/d.gif" );
				
				// e
				poses[pose_e] =Utilities.createImageIcon( "toon/e.gif" );
				
				// f, v
				poses[pose_f] =Utilities.createImageIcon( "toon/fv.gif" );
				poses[pose_v] = poses[pose_f];
				
				// l
				poses[pose_l] =Utilities.createImageIcon( "toon/l.gif" );
				
				// th
				poses[pose_th] =Utilities.createImageIcon( "toon/th.gif" );
				
				// m, b, p
				poses[pose_m] =Utilities.createImageIcon( "toon/mbp.gif" );
				poses[pose_b] = poses[pose_m];
				poses[pose_p] = poses[pose_m];
				
				// o
				poses[pose_o] =Utilities.createImageIcon( "toon/o.gif" );
				
				// u
				poses[pose_u] =Utilities.createImageIcon( "toon/u.gif" );
				
				// q, w
				poses[pose_w] =Utilities.createImageIcon( "toon/wq.gif" );
				poses[pose_q] = poses[pose_w];
				
				// set the phoneme list
				Object toonList[] = { "<none>", "A", "B", "C", "CH", "Closed", "D", "E", "F", "G", "I", "K", "L", 
	                "M", "N", "O", "P", "Q", "R", "S", "SH", "T", "TH", "U", "V", "W" };
				phonemes = toonList;
			
			
	} else if (faces.equals("wally")) {

----------------------------------------
		} else if (faces.equals("extended")) {
			// rest
			poses[pose_rest] = Utilities.createImageIcon( "extended/rest.jpg" );

			// a, i
			poses[pose_a] =Utilities.createImageIcon( "extended/ai.jpg" );
			poses[pose_i] = poses[pose_a];

			// e
			poses[pose_e] =Utilities.createImageIcon( "extended/e.jpg" );
			
			// c, d, g, k, n, r, s, y, z
			poses[pose_c] = Utilities.createImageIcon( "extended/etc.jpg" );
			poses[pose_d] = poses[pose_c];
			poses[pose_g] = poses[pose_c];
			poses[pose_k] = poses[pose_c];
			poses[pose_n] = poses[pose_c];
			poses[pose_r] = poses[pose_c];
			poses[pose_s] = poses[pose_c];
			poses[pose_y] = poses[pose_c];
			poses[pose_z] = poses[pose_c];

			// f, v
			poses[pose_f] =Utilities.createImageIcon( "extended/fv.jpg" );
			poses[pose_v] = poses[pose_f];

			// j, ch, sh
			poses[pose_j] =Utilities.createImageIcon( "extended/jchsh.jpg" );
			poses[pose_ch] = poses[pose_j];
			poses[pose_sh] = poses[pose_j];			

			// l
			poses[pose_l] =Utilities.createImageIcon( "extended/l.jpg" );
			poses[pose_t] = poses[pose_l];
			
			// m, b, p
			poses[pose_b] =Utilities.createImageIcon( "extended/mbp.jpg" );
			poses[pose_m] = poses[pose_b];
			poses[pose_p] = poses[pose_b];

			// o
			poses[pose_o] =Utilities.createImageIcon( "extended/o.jpg" );

			// th
			poses[pose_th] =Utilities.createImageIcon( "extended/th.jpg" );

			// w, q
			poses[pose_w] =Utilities.createImageIcon( "extended/wq.jpg" );
			poses[pose_q] = poses[pose_w];

			// u
			poses[pose_u] =Utilities.createImageIcon( "extended/u.jpg" );			

			// set the phonemes list
			Object extended[] =  { "<none>", "A", "B", "C", "CH", "D", "E", "F", "G", "I", "J", "K", "L", 
                "M", "N", "O", "P", "Q", "R", "S", "SH", "T", "TH", "U", "V", "W", "Z" };
			phonemes = extended;

		} else if (faces.equals("clay")) {			

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
99
24020789
FacePanel.java 173 221
FacePanel.java 272 330
----------------------------------------
	} else if (faces.equals("wally")) {
			// rest
			poses[pose_rest] = Utilities.createImageIcon( "wally/rest.gif" );
			
			// a, i
			poses[pose_a] =Utilities.createImageIcon( "wally/ai.gif" );
			poses[pose_i] = poses[pose_a];

			// e
			poses[pose_e] =Utilities.createImageIcon( "wally/e.gif" );
			
			// g, t, c, k, r, s, u
			poses[pose_g] = Utilities.createImageIcon( "wally/etc.gif" );
			poses[pose_t] = poses[pose_g];
			poses[pose_c] = poses[pose_g];
			poses[pose_j] = poses[pose_g];
			poses[pose_k] = poses[pose_g];
			poses[pose_r] = poses[pose_g];
			poses[pose_s] = poses[pose_g];
			poses[pose_u] = poses[pose_g];

			// f, v
			poses[pose_f] =Utilities.createImageIcon( "wally/fv.gif" );
			poses[pose_v] = poses[pose_f];

			// l
			poses[pose_l] =Utilities.createImageIcon( "wally/l.gif" );
			poses[pose_n] = poses[pose_l];
			poses[pose_d] = poses[pose_l];
			
			// m, b, p
			poses[pose_b] =Utilities.createImageIcon( "wally/mbp.gif" );
			poses[pose_m] = poses[pose_b];
			poses[pose_p] = poses[pose_b];

			// o
			poses[pose_o] =Utilities.createImageIcon( "wally/o.gif" );

			// w, q
			poses[pose_w] =Utilities.createImageIcon( "wally/wq.gif" );
			poses[pose_q] = poses[pose_w];
			
			// set the phomene list
			Object wally[] =  { "<none>", "A", "B", "C", "Closed", "D", "E", "F", "G", "I", "J", "K", "L", 
				"M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W" };
			phonemes = wally;

			
		} else if (faces.equals("blair")) {

----------------------------------------
		} else if (faces.equals("extended")) {
			// rest
			poses[pose_rest] = Utilities.createImageIcon( "extended/rest.jpg" );

			// a, i
			poses[pose_a] =Utilities.createImageIcon( "extended/ai.jpg" );
			poses[pose_i] = poses[pose_a];

			// e
			poses[pose_e] =Utilities.createImageIcon( "extended/e.jpg" );
			
			// c, d, g, k, n, r, s, y, z
			poses[pose_c] = Utilities.createImageIcon( "extended/etc.jpg" );
			poses[pose_d] = poses[pose_c];
			poses[pose_g] = poses[pose_c];
			poses[pose_k] = poses[pose_c];
			poses[pose_n] = poses[pose_c];
			poses[pose_r] = poses[pose_c];
			poses[pose_s] = poses[pose_c];
			poses[pose_y] = poses[pose_c];
			poses[pose_z] = poses[pose_c];

			// f, v
			poses[pose_f] =Utilities.createImageIcon( "extended/fv.jpg" );
			poses[pose_v] = poses[pose_f];

			// j, ch, sh
			poses[pose_j] =Utilities.createImageIcon( "extended/jchsh.jpg" );
			poses[pose_ch] = poses[pose_j];
			poses[pose_sh] = poses[pose_j];			

			// l
			poses[pose_l] =Utilities.createImageIcon( "extended/l.jpg" );
			poses[pose_t] = poses[pose_l];
			
			// m, b, p
			poses[pose_b] =Utilities.createImageIcon( "extended/mbp.jpg" );
			poses[pose_m] = poses[pose_b];
			poses[pose_p] = poses[pose_b];

			// o
			poses[pose_o] =Utilities.createImageIcon( "extended/o.jpg" );

			// th
			poses[pose_th] =Utilities.createImageIcon( "extended/th.jpg" );

			// w, q
			poses[pose_w] =Utilities.createImageIcon( "extended/wq.jpg" );
			poses[pose_q] = poses[pose_w];

			// u
			poses[pose_u] =Utilities.createImageIcon( "extended/u.jpg" );			

			// set the phonemes list
			Object extended[] =  { "<none>", "A", "B", "C", "CH", "D", "E", "F", "G", "I", "J", "K", "L", 
                "M", "N", "O", "P", "Q", "R", "S", "SH", "T", "TH", "U", "V", "W", "Z" };
			phonemes = extended;

		} else if (faces.equals("clay")) {			

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
99
24020790
FacePanel.java 64 116
FacePanel.java 272 330
----------------------------------------
		if (faces.equals("default")) {			
			// a, i
			poses[pose_a] = Utilities.createImageIcon( "default/ai.png" );
			poses[pose_i] = poses[pose_a];

			// c, e, g, k, n, r, s, t
			poses[pose_c] =Utilities.createImageIcon( "default/cdgk.png" );
			poses[pose_e] = poses[pose_c];
			poses[pose_g] = poses[pose_c];
			poses[pose_k] = poses[pose_c];
			poses[pose_n] = poses[pose_c];
			poses[pose_r] = poses[pose_c];
			poses[pose_s] = poses[pose_c];
			poses[pose_t] = poses[pose_c];
			
			// closed
			poses[pose_rest] =Utilities.createImageIcon( "default/closed.png" );
			
			// d
			poses[pose_d] =Utilities.createImageIcon( "default/d.png" );
			
			// e
			poses[pose_e] =Utilities.createImageIcon( "default/e.png" );
			
			// f, v
			poses[pose_f] =Utilities.createImageIcon( "default/fv.png" );
			poses[pose_v] = poses[pose_f];
			
			// l
			poses[pose_l] =Utilities.createImageIcon( "default/l.png" );
			poses[pose_th] =Utilities.createImageIcon( "default/th.png" );
			
			// m, b, p
			poses[pose_m] =Utilities.createImageIcon( "default/mbp.png" );
			poses[pose_b] = poses[pose_m];
			poses[pose_p] = poses[pose_m];
			
			// o
			poses[pose_o] =Utilities.createImageIcon( "default/o.png" );
			
			// u
			poses[pose_u] =Utilities.createImageIcon( "default/u.png" );
			
			// q, w
			poses[pose_w] =Utilities.createImageIcon( "default/wq.png" );
			poses[pose_q] = poses[pose_w];
			
			// set the phoneme list
			Object defaultList[] = { "<none>", "A", "B", "C", "Closed", "D", "E", "F", "G", "I", "K", "L", 
                "M", "N", "O", "P", "Q", "R", "S", "SH", "T", "TH", "U", "V", "W" };
			phonemes = defaultList;

		} else if (faces.equals("toon")) {			

----------------------------------------
		} else if (faces.equals("extended")) {
			// rest
			poses[pose_rest] = Utilities.createImageIcon( "extended/rest.jpg" );

			// a, i
			poses[pose_a] =Utilities.createImageIcon( "extended/ai.jpg" );
			poses[pose_i] = poses[pose_a];

			// e
			poses[pose_e] =Utilities.createImageIcon( "extended/e.jpg" );
			
			// c, d, g, k, n, r, s, y, z
			poses[pose_c] = Utilities.createImageIcon( "extended/etc.jpg" );
			poses[pose_d] = poses[pose_c];
			poses[pose_g] = poses[pose_c];
			poses[pose_k] = poses[pose_c];
			poses[pose_n] = poses[pose_c];
			poses[pose_r] = poses[pose_c];
			poses[pose_s] = poses[pose_c];
			poses[pose_y] = poses[pose_c];
			poses[pose_z] = poses[pose_c];

			// f, v
			poses[pose_f] =Utilities.createImageIcon( "extended/fv.jpg" );
			poses[pose_v] = poses[pose_f];

			// j, ch, sh
			poses[pose_j] =Utilities.createImageIcon( "extended/jchsh.jpg" );
			poses[pose_ch] = poses[pose_j];
			poses[pose_sh] = poses[pose_j];			

			// l
			poses[pose_l] =Utilities.createImageIcon( "extended/l.jpg" );
			poses[pose_t] = poses[pose_l];
			
			// m, b, p
			poses[pose_b] =Utilities.createImageIcon( "extended/mbp.jpg" );
			poses[pose_m] = poses[pose_b];
			poses[pose_p] = poses[pose_b];

			// o
			poses[pose_o] =Utilities.createImageIcon( "extended/o.jpg" );

			// th
			poses[pose_th] =Utilities.createImageIcon( "extended/th.jpg" );

			// w, q
			poses[pose_w] =Utilities.createImageIcon( "extended/wq.jpg" );
			poses[pose_q] = poses[pose_w];

			// u
			poses[pose_u] =Utilities.createImageIcon( "extended/u.jpg" );			

			// set the phonemes list
			Object extended[] =  { "<none>", "A", "B", "C", "CH", "D", "E", "F", "G", "I", "J", "K", "L", 
                "M", "N", "O", "P", "Q", "R", "S", "SH", "T", "TH", "U", "V", "W", "Z" };
			phonemes = extended;

		} else if (faces.equals("clay")) {			

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
99
24020794
FacePanel.java 64 116
FacePanel.java 330 383
----------------------------------------
		if (faces.equals("default")) {			
			// a, i
			poses[pose_a] = Utilities.createImageIcon( "default/ai.png" );
			poses[pose_i] = poses[pose_a];

			// c, e, g, k, n, r, s, t
			poses[pose_c] =Utilities.createImageIcon( "default/cdgk.png" );
			poses[pose_e] = poses[pose_c];
			poses[pose_g] = poses[pose_c];
			poses[pose_k] = poses[pose_c];
			poses[pose_n] = poses[pose_c];
			poses[pose_r] = poses[pose_c];
			poses[pose_s] = poses[pose_c];
			poses[pose_t] = poses[pose_c];
			
			// closed
			poses[pose_rest] =Utilities.createImageIcon( "default/closed.png" );
			
			// d
			poses[pose_d] =Utilities.createImageIcon( "default/d.png" );
			
			// e
			poses[pose_e] =Utilities.createImageIcon( "default/e.png" );
			
			// f, v
			poses[pose_f] =Utilities.createImageIcon( "default/fv.png" );
			poses[pose_v] = poses[pose_f];
			
			// l
			poses[pose_l] =Utilities.createImageIcon( "default/l.png" );
			poses[pose_th] =Utilities.createImageIcon( "default/th.png" );
			
			// m, b, p
			poses[pose_m] =Utilities.createImageIcon( "default/mbp.png" );
			poses[pose_b] = poses[pose_m];
			poses[pose_p] = poses[pose_m];
			
			// o
			poses[pose_o] =Utilities.createImageIcon( "default/o.png" );
			
			// u
			poses[pose_u] =Utilities.createImageIcon( "default/u.png" );
			
			// q, w
			poses[pose_w] =Utilities.createImageIcon( "default/wq.png" );
			poses[pose_q] = poses[pose_w];
			
			// set the phoneme list
			Object defaultList[] = { "<none>", "A", "B", "C", "Closed", "D", "E", "F", "G", "I", "K", "L", 
                "M", "N", "O", "P", "Q", "R", "S", "SH", "T", "TH", "U", "V", "W" };
			phonemes = defaultList;

		} else if (faces.equals("toon")) {			

----------------------------------------
		} else if (faces.equals("clay")) {			
				// a, i
				poses[pose_a] = Utilities.createImageIcon( "clay/ai.gif" );
				poses[pose_i] = poses[pose_a];

				// c, e, g, k, n, r, s, t
				poses[pose_c] =Utilities.createImageIcon( "clay/cdgk.gif" );
				poses[pose_e] = poses[pose_c];
				poses[pose_g] = poses[pose_c];
				poses[pose_k] = poses[pose_c];
				poses[pose_n] = poses[pose_c];
				poses[pose_r] = poses[pose_c];
				poses[pose_s] = poses[pose_c];
				poses[pose_t] = poses[pose_c];
				
				// closed
				poses[pose_rest] =Utilities.createImageIcon( "clay/closed.gif" );
				
				// d
				poses[pose_d] =Utilities.createImageIcon( "clay/d.gif" );
				
				// e
				poses[pose_e] =Utilities.createImageIcon( "clay/e.gif" );
				
				// f, v
				poses[pose_f] =Utilities.createImageIcon( "clay/fv.gif" );
				poses[pose_v] = poses[pose_f];
				
				// l, th
				poses[pose_l] =Utilities.createImageIcon( "clay/lth.gif" );
				poses[pose_th] = poses[pose_l];
				
				// m, b, p
				poses[pose_m] =Utilities.createImageIcon( "clay/mbp.gif" );
				poses[pose_b] = poses[pose_m];
				poses[pose_p] = poses[pose_m];
				
				// o
				poses[pose_o] =Utilities.createImageIcon( "clay/o.gif" );
				
				// u
				poses[pose_u] =Utilities.createImageIcon( "clay/u.gif" );
				
				// q, w
				poses[pose_w] =Utilities.createImageIcon( "clay/wq.gif" );
				poses[pose_q] = poses[pose_w];
				
				// set the phoneme list
				Object defaultList[] = { "<none>", "A", "B", "C", "Closed", "D", "E", "F", "G", "I", "K", "L", 
	                "M", "N", "O", "P", "Q", "R", "S", "SH", "T", "TH", "U", "V", "W" };
				phonemes = defaultList;

			
		}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
99
24020792
FacePanel.java 116 173
FacePanel.java 330 383
----------------------------------------
		} else if (faces.equals("toon")) {			
				// a, i
				poses[pose_a] = Utilities.createImageIcon( "toon/ai.gif" );
				poses[pose_i] = poses[pose_a];

				// e
				poses[pose_e] =Utilities.createImageIcon( "toon/e.gif" );
				
				// c, g, k, n, r, s, t
				poses[pose_c] =Utilities.createImageIcon( "toon/cdgk.gif" );
				poses[pose_g] = poses[pose_c];
				poses[pose_k] = poses[pose_c];
				poses[pose_n] = poses[pose_c];
				poses[pose_r] = poses[pose_c];
				poses[pose_s] = poses[pose_c];
				poses[pose_t] = poses[pose_c];
				
				// closed
				poses[pose_rest] =Utilities.createImageIcon( "toon/closed.gif" );
				
				// d
				poses[pose_d] =Utilities.createImageIcon( "toon/d.gif" );
				
				// e
				poses[pose_e] =Utilities.createImageIcon( "toon/e.gif" );
				
				// f, v
				poses[pose_f] =Utilities.createImageIcon( "toon/fv.gif" );
				poses[pose_v] = poses[pose_f];
				
				// l
				poses[pose_l] =Utilities.createImageIcon( "toon/l.gif" );
				
				// th
				poses[pose_th] =Utilities.createImageIcon( "toon/th.gif" );
				
				// m, b, p
				poses[pose_m] =Utilities.createImageIcon( "toon/mbp.gif" );
				poses[pose_b] = poses[pose_m];
				poses[pose_p] = poses[pose_m];
				
				// o
				poses[pose_o] =Utilities.createImageIcon( "toon/o.gif" );
				
				// u
				poses[pose_u] =Utilities.createImageIcon( "toon/u.gif" );
				
				// q, w
				poses[pose_w] =Utilities.createImageIcon( "toon/wq.gif" );
				poses[pose_q] = poses[pose_w];
				
				// set the phoneme list
				Object toonList[] = { "<none>", "A", "B", "C", "CH", "Closed", "D", "E", "F", "G", "I", "K", "L", 
	                "M", "N", "O", "P", "Q", "R", "S", "SH", "T", "TH", "U", "V", "W" };
				phonemes = toonList;
			
			
	} else if (faces.equals("wally")) {

----------------------------------------
		} else if (faces.equals("clay")) {			
				// a, i
				poses[pose_a] = Utilities.createImageIcon( "clay/ai.gif" );
				poses[pose_i] = poses[pose_a];

				// c, e, g, k, n, r, s, t
				poses[pose_c] =Utilities.createImageIcon( "clay/cdgk.gif" );
				poses[pose_e] = poses[pose_c];
				poses[pose_g] = poses[pose_c];
				poses[pose_k] = poses[pose_c];
				poses[pose_n] = poses[pose_c];
				poses[pose_r] = poses[pose_c];
				poses[pose_s] = poses[pose_c];
				poses[pose_t] = poses[pose_c];
				
				// closed
				poses[pose_rest] =Utilities.createImageIcon( "clay/closed.gif" );
				
				// d
				poses[pose_d] =Utilities.createImageIcon( "clay/d.gif" );
				
				// e
				poses[pose_e] =Utilities.createImageIcon( "clay/e.gif" );
				
				// f, v
				poses[pose_f] =Utilities.createImageIcon( "clay/fv.gif" );
				poses[pose_v] = poses[pose_f];
				
				// l, th
				poses[pose_l] =Utilities.createImageIcon( "clay/lth.gif" );
				poses[pose_th] = poses[pose_l];
				
				// m, b, p
				poses[pose_m] =Utilities.createImageIcon( "clay/mbp.gif" );
				poses[pose_b] = poses[pose_m];
				poses[pose_p] = poses[pose_m];
				
				// o
				poses[pose_o] =Utilities.createImageIcon( "clay/o.gif" );
				
				// u
				poses[pose_u] =Utilities.createImageIcon( "clay/u.gif" );
				
				// q, w
				poses[pose_w] =Utilities.createImageIcon( "clay/wq.gif" );
				poses[pose_q] = poses[pose_w];
				
				// set the phoneme list
				Object defaultList[] = { "<none>", "A", "B", "C", "Closed", "D", "E", "F", "G", "I", "K", "L", 
	                "M", "N", "O", "P", "Q", "R", "S", "SH", "T", "TH", "U", "V", "W" };
				phonemes = defaultList;

			
		}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
99
27178830
FacePanel.java 272 330
FacePanel.java 330 383
----------------------------------------
		} else if (faces.equals("extended")) {
			// rest
			poses[pose_rest] = Utilities.createImageIcon( "extended/rest.jpg" );

			// a, i
			poses[pose_a] =Utilities.createImageIcon( "extended/ai.jpg" );
			poses[pose_i] = poses[pose_a];

			// e
			poses[pose_e] =Utilities.createImageIcon( "extended/e.jpg" );
			
			// c, d, g, k, n, r, s, y, z
			poses[pose_c] = Utilities.createImageIcon( "extended/etc.jpg" );
			poses[pose_d] = poses[pose_c];
			poses[pose_g] = poses[pose_c];
			poses[pose_k] = poses[pose_c];
			poses[pose_n] = poses[pose_c];
			poses[pose_r] = poses[pose_c];
			poses[pose_s] = poses[pose_c];
			poses[pose_y] = poses[pose_c];
			poses[pose_z] = poses[pose_c];

			// f, v
			poses[pose_f] =Utilities.createImageIcon( "extended/fv.jpg" );
			poses[pose_v] = poses[pose_f];

			// j, ch, sh
			poses[pose_j] =Utilities.createImageIcon( "extended/jchsh.jpg" );
			poses[pose_ch] = poses[pose_j];
			poses[pose_sh] = poses[pose_j];			

			// l
			poses[pose_l] =Utilities.createImageIcon( "extended/l.jpg" );
			poses[pose_t] = poses[pose_l];
			
			// m, b, p
			poses[pose_b] =Utilities.createImageIcon( "extended/mbp.jpg" );
			poses[pose_m] = poses[pose_b];
			poses[pose_p] = poses[pose_b];

			// o
			poses[pose_o] =Utilities.createImageIcon( "extended/o.jpg" );

			// th
			poses[pose_th] =Utilities.createImageIcon( "extended/th.jpg" );

			// w, q
			poses[pose_w] =Utilities.createImageIcon( "extended/wq.jpg" );
			poses[pose_q] = poses[pose_w];

			// u
			poses[pose_u] =Utilities.createImageIcon( "extended/u.jpg" );			

			// set the phonemes list
			Object extended[] =  { "<none>", "A", "B", "C", "CH", "D", "E", "F", "G", "I", "J", "K", "L", 
                "M", "N", "O", "P", "Q", "R", "S", "SH", "T", "TH", "U", "V", "W", "Z" };
			phonemes = extended;

		} else if (faces.equals("clay")) {			

----------------------------------------
		} else if (faces.equals("clay")) {			
				// a, i
				poses[pose_a] = Utilities.createImageIcon( "clay/ai.gif" );
				poses[pose_i] = poses[pose_a];

				// c, e, g, k, n, r, s, t
				poses[pose_c] =Utilities.createImageIcon( "clay/cdgk.gif" );
				poses[pose_e] = poses[pose_c];
				poses[pose_g] = poses[pose_c];
				poses[pose_k] = poses[pose_c];
				poses[pose_n] = poses[pose_c];
				poses[pose_r] = poses[pose_c];
				poses[pose_s] = poses[pose_c];
				poses[pose_t] = poses[pose_c];
				
				// closed
				poses[pose_rest] =Utilities.createImageIcon( "clay/closed.gif" );
				
				// d
				poses[pose_d] =Utilities.createImageIcon( "clay/d.gif" );
				
				// e
				poses[pose_e] =Utilities.createImageIcon( "clay/e.gif" );
				
				// f, v
				poses[pose_f] =Utilities.createImageIcon( "clay/fv.gif" );
				poses[pose_v] = poses[pose_f];
				
				// l, th
				poses[pose_l] =Utilities.createImageIcon( "clay/lth.gif" );
				poses[pose_th] = poses[pose_l];
				
				// m, b, p
				poses[pose_m] =Utilities.createImageIcon( "clay/mbp.gif" );
				poses[pose_b] = poses[pose_m];
				poses[pose_p] = poses[pose_m];
				
				// o
				poses[pose_o] =Utilities.createImageIcon( "clay/o.gif" );
				
				// u
				poses[pose_u] =Utilities.createImageIcon( "clay/u.gif" );
				
				// q, w
				poses[pose_w] =Utilities.createImageIcon( "clay/wq.gif" );
				poses[pose_q] = poses[pose_w];
				
				// set the phoneme list
				Object defaultList[] = { "<none>", "A", "B", "C", "Closed", "D", "E", "F", "G", "I", "K", "L", 
	                "M", "N", "O", "P", "Q", "R", "S", "SH", "T", "TH", "U", "V", "W" };
				phonemes = defaultList;

			
		}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
99
24020791
FacePanel.java 221 272
FacePanel.java 330 383
----------------------------------------
		} else if (faces.equals("blair")) {
			// rest
			poses[pose_rest] = Utilities.createImageIcon( "blair/rest.gif" );
			
			// a, i
			poses[pose_a] =Utilities.createImageIcon( "blair/ai.gif" );
			poses[pose_i] = poses[pose_a];

			// e
			poses[pose_e] =Utilities.createImageIcon( "blair/e.gif" );
			
			// g, t, c, k, r, s, u
			poses[pose_g] = Utilities.createImageIcon( "blair/etc.gif" );
			poses[pose_t] = poses[pose_g];
			poses[pose_c] = poses[pose_g];
			poses[pose_j] = poses[pose_g];
			poses[pose_k] = poses[pose_g];
			poses[pose_r] = poses[pose_g];
			poses[pose_s] = poses[pose_g];
			poses[pose_u] = poses[pose_g];

			// f, v
			poses[pose_f] =Utilities.createImageIcon( "blair/fv.gif" );
			poses[pose_v] = poses[pose_f];

			// l
			poses[pose_l] =Utilities.createImageIcon( "blair/ldth.gif" );
			poses[pose_n] = poses[pose_l];
			poses[pose_d] = poses[pose_l];
			poses[pose_th] = poses[pose_l];
			
			// m, b, p
			poses[pose_b] =Utilities.createImageIcon( "blair/mbp.gif" );
			poses[pose_m] = poses[pose_b];
			poses[pose_p] = poses[pose_b];

			// o
			poses[pose_o] =Utilities.createImageIcon( "blair/o.gif" );

			// w, q
			poses[pose_w] =Utilities.createImageIcon( "blair/wq.gif" );
			poses[pose_q] = poses[pose_w];

			// u
			poses[pose_u] =Utilities.createImageIcon( "blair/u.gif" );			

			// set the phonemes list
			Object blair[] =  { "<none>", "A", "B", "C", "D", "E", "F", "G", "I", "J", "K", "L", 
				"M", "N", "O", "P", "Q", "R", "S", "T", "TH", "U", "V", "W" };
			phonemes = blair;

		} else if (faces.equals("extended")) {

----------------------------------------
		} else if (faces.equals("clay")) {			
				// a, i
				poses[pose_a] = Utilities.createImageIcon( "clay/ai.gif" );
				poses[pose_i] = poses[pose_a];

				// c, e, g, k, n, r, s, t
				poses[pose_c] =Utilities.createImageIcon( "clay/cdgk.gif" );
				poses[pose_e] = poses[pose_c];
				poses[pose_g] = poses[pose_c];
				poses[pose_k] = poses[pose_c];
				poses[pose_n] = poses[pose_c];
				poses[pose_r] = poses[pose_c];
				poses[pose_s] = poses[pose_c];
				poses[pose_t] = poses[pose_c];
				
				// closed
				poses[pose_rest] =Utilities.createImageIcon( "clay/closed.gif" );
				
				// d
				poses[pose_d] =Utilities.createImageIcon( "clay/d.gif" );
				
				// e
				poses[pose_e] =Utilities.createImageIcon( "clay/e.gif" );
				
				// f, v
				poses[pose_f] =Utilities.createImageIcon( "clay/fv.gif" );
				poses[pose_v] = poses[pose_f];
				
				// l, th
				poses[pose_l] =Utilities.createImageIcon( "clay/lth.gif" );
				poses[pose_th] = poses[pose_l];
				
				// m, b, p
				poses[pose_m] =Utilities.createImageIcon( "clay/mbp.gif" );
				poses[pose_b] = poses[pose_m];
				poses[pose_p] = poses[pose_m];
				
				// o
				poses[pose_o] =Utilities.createImageIcon( "clay/o.gif" );
				
				// u
				poses[pose_u] =Utilities.createImageIcon( "clay/u.gif" );
				
				// q, w
				poses[pose_w] =Utilities.createImageIcon( "clay/wq.gif" );
				poses[pose_q] = poses[pose_w];
				
				// set the phoneme list
				Object defaultList[] = { "<none>", "A", "B", "C", "Closed", "D", "E", "F", "G", "I", "K", "L", 
	                "M", "N", "O", "P", "Q", "R", "S", "SH", "T", "TH", "U", "V", "W" };
				phonemes = defaultList;

			
		}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
99
24020793
FacePanel.java 173 221
FacePanel.java 330 383
----------------------------------------
	} else if (faces.equals("wally")) {
			// rest
			poses[pose_rest] = Utilities.createImageIcon( "wally/rest.gif" );
			
			// a, i
			poses[pose_a] =Utilities.createImageIcon( "wally/ai.gif" );
			poses[pose_i] = poses[pose_a];

			// e
			poses[pose_e] =Utilities.createImageIcon( "wally/e.gif" );
			
			// g, t, c, k, r, s, u
			poses[pose_g] = Utilities.createImageIcon( "wally/etc.gif" );
			poses[pose_t] = poses[pose_g];
			poses[pose_c] = poses[pose_g];
			poses[pose_j] = poses[pose_g];
			poses[pose_k] = poses[pose_g];
			poses[pose_r] = poses[pose_g];
			poses[pose_s] = poses[pose_g];
			poses[pose_u] = poses[pose_g];

			// f, v
			poses[pose_f] =Utilities.createImageIcon( "wally/fv.gif" );
			poses[pose_v] = poses[pose_f];

			// l
			poses[pose_l] =Utilities.createImageIcon( "wally/l.gif" );
			poses[pose_n] = poses[pose_l];
			poses[pose_d] = poses[pose_l];
			
			// m, b, p
			poses[pose_b] =Utilities.createImageIcon( "wally/mbp.gif" );
			poses[pose_m] = poses[pose_b];
			poses[pose_p] = poses[pose_b];

			// o
			poses[pose_o] =Utilities.createImageIcon( "wally/o.gif" );

			// w, q
			poses[pose_w] =Utilities.createImageIcon( "wally/wq.gif" );
			poses[pose_q] = poses[pose_w];
			
			// set the phomene list
			Object wally[] =  { "<none>", "A", "B", "C", "Closed", "D", "E", "F", "G", "I", "J", "K", "L", 
				"M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W" };
			phonemes = wally;

			
		} else if (faces.equals("blair")) {

----------------------------------------
		} else if (faces.equals("clay")) {			
				// a, i
				poses[pose_a] = Utilities.createImageIcon( "clay/ai.gif" );
				poses[pose_i] = poses[pose_a];

				// c, e, g, k, n, r, s, t
				poses[pose_c] =Utilities.createImageIcon( "clay/cdgk.gif" );
				poses[pose_e] = poses[pose_c];
				poses[pose_g] = poses[pose_c];
				poses[pose_k] = poses[pose_c];
				poses[pose_n] = poses[pose_c];
				poses[pose_r] = poses[pose_c];
				poses[pose_s] = poses[pose_c];
				poses[pose_t] = poses[pose_c];
				
				// closed
				poses[pose_rest] =Utilities.createImageIcon( "clay/closed.gif" );
				
				// d
				poses[pose_d] =Utilities.createImageIcon( "clay/d.gif" );
				
				// e
				poses[pose_e] =Utilities.createImageIcon( "clay/e.gif" );
				
				// f, v
				poses[pose_f] =Utilities.createImageIcon( "clay/fv.gif" );
				poses[pose_v] = poses[pose_f];
				
				// l, th
				poses[pose_l] =Utilities.createImageIcon( "clay/lth.gif" );
				poses[pose_th] = poses[pose_l];
				
				// m, b, p
				poses[pose_m] =Utilities.createImageIcon( "clay/mbp.gif" );
				poses[pose_b] = poses[pose_m];
				poses[pose_p] = poses[pose_m];
				
				// o
				poses[pose_o] =Utilities.createImageIcon( "clay/o.gif" );
				
				// u
				poses[pose_u] =Utilities.createImageIcon( "clay/u.gif" );
				
				// q, w
				poses[pose_w] =Utilities.createImageIcon( "clay/wq.gif" );
				poses[pose_q] = poses[pose_w];
				
				// set the phoneme list
				Object defaultList[] = { "<none>", "A", "B", "C", "Closed", "D", "E", "F", "G", "I", "K", "L", 
	                "M", "N", "O", "P", "Q", "R", "S", "SH", "T", "TH", "U", "V", "W" };
				phonemes = defaultList;

			
		}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
99
24020795
FacePanel.java 448 458
FacePanel.java 461 470
----------------------------------------
    public ImageIcon getFace( String s ) {
    	int faceIndex = getFaceIndex( s );

        // return a face
        if (faceIndex == -1) {
            return null;
        } else {
            return poses[faceIndex];
        }

    }

----------------------------------------
    public ImageIcon getSmallFace( String s ) {
    	int faceIndex = getFaceIndex( s );

        // return a face
        if (faceIndex == -1) {
            return null;
        } else {
            return smallPoses[faceIndex];
        }
    }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
99
24020796
Utilities.java 20 28
JLipSync.java 2026 2036
----------------------------------------
	final static ImageIcon createImageIcon(String path) {
	    java.net.URL imgURL = JLipSync.class.getResource(path);
	    if (imgURL != null) {
			return new ImageIcon(imgURL);
	    } else {
			System.err.println("Couldn't find Icon: " + path);
			return null;
	    }
	}

----------------------------------------
	protected static ImageIcon createImageIcon(String path) {
		java.net.URL imgURL = JLipSync.class.getResource(path);
		if (imgURL != null) {
			return new ImageIcon(imgURL);
		} else {
			String message = new String("Couldn't find file: " + path);
			JOptionPane.showMessageDialog(null, message, "Error",
					JOptionPane.ERROR_MESSAGE);
			return null;
		}
	}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
99
24020797
Utilities.java 50 61
JLipSync.java 2039 2050
----------------------------------------
	final static void setPreference( String key, String value ) {
		// get the user preferences
		Preferences userPrefs = Preferences.userRoot().node("/jlipsync/preferences");
		
		try {
			// save preference
			userPrefs.put(key, value); 
			userPrefs.flush();
		} catch (Exception e) {
			errMessage( "Unable to store persistant settings.");
		}
	}

----------------------------------------
	public static void main(String[] args) {
		// use native look and feel
		try {
			UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
		} catch (Exception e) {
			// don't really care
		}

		JLipSync app = new JLipSync();
		app.repaint();

	}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
99
24020798
JLipSync.java 609 619
JLipSync.java 949 958
----------------------------------------
		if (returnVal == JFileChooser.APPROVE_OPTION) {
			// get the selected file
			File file = fc.getSelectedFile();

			// make sure it ends with the proper extention
			String fileName = file.getPath();
			fileName = addFileExtention(fileName, ".jls");

			// write the timesheet out
			writeXML(new File(fileName));
		}

----------------------------------------
		if (returnVal == JFileChooser.APPROVE_OPTION) {

			// get the selected file
			File file = fc.getSelectedFile();

			// need to add an extention?
			String fileName = file.getPath();
			fileName = addFileExtention(fileName, ".avi");
			new CreateAviFile(fileName).start();
		}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
99
24020799
AviWriter.java 306 330
AviWriter.java 385 408
----------------------------------------
	void addFrame() throws Exception {
        
		// check current frame
		if (currentFrameNumber >= frameCount) {
			// throw an exception
			throw new Exception("Can't add frame " + (currentFrameNumber+1) + ", only " +  frameCount + " allocated");
		}
        
		// save position of frame data
		frameDataIndex[currentFrameNumber] = dataOffset;
        
		// 8 byte header
		// "00" = stream 0, "db" = uncompressed video frame
		ccOut("00db");
		dWordOut(frameBufferSize);        
	
		// framebuffer data
		fileOutputStream.write( frameBuffer );
        
		// increment data position
		dataOffset += 8 + frameBufferSize;
                
		// increment current frame index
		currentFrameNumber += 1;
        }

----------------------------------------
			for ( int i = 0; i < waveFrameCount; i++ ) {
				// save position
				waveDataIndex[i] = dataOffset;
            
				// 8 byte header
				// "01" = stream 1, "wb" = wave buffer
				ccOut("01wb");
				dWordOut(waveBufferSize);
			
				// read in the audio
				waveDataSize[i] = audioInputStream.read(waveBuffer, 0, waveBufferSize);
			
				// write wave data
				fileOutputStream.write( waveBuffer );
			
				// increment data position
				dataOffset += 8 + waveBufferSize;

				// need to pad buffer to an even boundary?
				if (waveBufferPadding != 0) {			
					fileOutputStream.write( 0 );				
					dataOffset += 1;
				}
			}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
99
24020800
WavePanel.java 452 463
WavePanel.java 467 478
----------------------------------------
		if (markerStart != 0) {
			// set range
			zoomStart = markerStart;
			zoomEnd = markerEnd;

			// clear selection
			markerStart = 0;
			markerEnd = 0;

			// redraw the wave
			repaint();
		}

----------------------------------------
	void zoomAll() {
		// set range
		zoomStart = 1;
		zoomEnd = frameCount;

		// clear selection
		markerStart = 0;
		markerEnd = 0;

		// redraw the wave
		repaint();
	}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
99
24020801
WavePanel.java 481 509
WavePanel.java 512 540
----------------------------------------
	void zoomIn() {

		// already at full zoom?
		if (zoomStart != zoomEnd) {

			int wide = (int) ((zoomEnd - zoomStart) / 4);
			zoomStart += wide;
			zoomEnd -= wide;

			// range check
			if (zoomStart > zoomEnd) {
				int middle = wide;
				if (middle < 0) {
					middle = 1;
				} else if (middle > frameCount) {
					middle = frameCount;
				}
				zoomStart = middle;
				zoomEnd = middle;
			}
		}

		// clear selection
		markerStart = 0;
		markerEnd = 0;

		// update the wave
		repaint();
	}

----------------------------------------
	void zoomOut() {

		// amount to zoom out by
		int wide = (int) ((zoomEnd - zoomStart) / 2);

		// check for edge case
		if (wide == 0) {
			wide = 1;
		}

		// adjust left side
		zoomStart -= wide;
		if (zoomStart < 1) {
			zoomStart = 1;
		}

		// adjust right side
		zoomEnd += wide;
		if (zoomEnd > frameCount) {
			zoomEnd = frameCount;
		}

		// clear selection
		markerStart = 0;
		markerEnd = 0;

		// update the wave image
		repaint();
	}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
99
24020802
WavePanel.java 512 540
WavePanel.java 484 501
----------------------------------------
	void zoomOut() {

		// amount to zoom out by
		int wide = (int) ((zoomEnd - zoomStart) / 2);

		// check for edge case
		if (wide == 0) {
			wide = 1;
		}

		// adjust left side
		zoomStart -= wide;
		if (zoomStart < 1) {
			zoomStart = 1;
		}

		// adjust right side
		zoomEnd += wide;
		if (zoomEnd > frameCount) {
			zoomEnd = frameCount;
		}

		// clear selection
		markerStart = 0;
		markerEnd = 0;

		// update the wave image
		repaint();
	}

----------------------------------------
		if (zoomStart != zoomEnd) {

			int wide = (int) ((zoomEnd - zoomStart) / 4);
			zoomStart += wide;
			zoomEnd -= wide;

			// range check
			if (zoomStart > zoomEnd) {
				int middle = wide;
				if (middle < 0) {
					middle = 1;
				} else if (middle > frameCount) {
					middle = frameCount;
				}
				zoomStart = middle;
				zoomEnd = middle;
			}
		}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
99
24020803
JLipSync.java 609 619
JLipSync.java 595 602
----------------------------------------
		if (returnVal == JFileChooser.APPROVE_OPTION) {
			// get the selected file
			File file = fc.getSelectedFile();

			// make sure it ends with the proper extention
			String fileName = file.getPath();
			fileName = addFileExtention(fileName, ".jls");

			// write the timesheet out
			writeXML(new File(fileName));
		}

----------------------------------------
		} else {
			// make sure it ends with the proper extention
			String fileName = openFile.getPath();
			fileName = addFileExtention(fileName, ".jls");

			// write the timesheet out
			writeXML(new File(fileName));
		}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
99
24020804
Utilities.java 79 85
Utilities.java 88 95
----------------------------------------
		if (dirName.length() > 0) {
			try {
				fc.setCurrentDirectory( new File(dirName) );
			} catch (Exception e) {
				// oh, well...
			}
		}

----------------------------------------
		if (file != null) {
			// set as selected file
			try {
				fc.setSelectedFile( file );
			} catch (Exception e) {
				// ignore
			}
		}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
99
24020805
Utilities.java 102 111
Utilities.java 114 123
----------------------------------------
	final static int showSaveDialog( Component c, JFileChooser fc ) {
		int returnVal = fc.showSaveDialog(c);
		if (returnVal == JFileChooser.APPROVE_OPTION) {
			// save as default directory
			String dirName = fc.getCurrentDirectory().getAbsolutePath();
			Utilities.setPreference("defaultDirectory", dirName );			
		}
		
		return returnVal;
	}

----------------------------------------
	final static int showOpenDialog( Component c, JFileChooser fc ) {
		int returnVal = fc.showOpenDialog(c);
		if (returnVal == JFileChooser.APPROVE_OPTION) {
			// save as default directory
			String dirName = fc.getCurrentDirectory().getAbsolutePath();
			Utilities.setPreference("defaultDirectory", dirName );			
		}
		
		return returnVal;
	}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
99
24020806
AviFilter.java 16 26
JlsFilter.java 16 26
----------------------------------------
    public boolean accept(File f) {
        if (f.isDirectory()) {
            return true;
        }

        String fileName = f.getName().toLowerCase();
		if (fileName.endsWith( ".avi" )) {
			return true;
		}			
        return false;
    }

----------------------------------------
    public boolean accept(File f) {
        if (f.isDirectory()) {
            return true;
        }

        String fileName = f.getName().toLowerCase();
		if (fileName.endsWith( ".jls" )) {
			return true;
		}			
        return false;
    }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
99
24020807
SimpleXmlReader.java 38 44
SimpleXmlReader.java 105 111
----------------------------------------
        while ( b == -1 || b == '\n' || b == '\r' || b == '\t' || b == ' ' ) {
            // check for end of file...
            if ( b == -1 ) {
                throw new IOException( "Unexpected end of file" );
            }
            b = read();
        }

----------------------------------------
		while ( (char)b != '>' ) {
			b = read();				
			if ( b == -1 ) {
				throw new IOException( "Expected tag </" + expectedTag + ">, not " + buffer.toString() + "{EOF}" );
			}
			buffer.append( (char)b );
		}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
99
24020808
SimpleXmlReader.java 105 111
SimpleXmlReader.java 54 60
----------------------------------------
		while ( (char)b != '>' ) {
			b = read();				
			if ( b == -1 ) {
				throw new IOException( "Expected tag </" + expectedTag + ">, not " + buffer.toString() + "{EOF}" );
			}
			buffer.append( (char)b );
		}

----------------------------------------
		while ( (char)b != '>' ) {
			b = (int)read();
			if ( b == -1 ) {
				throw new IOException( "Expected XML tag not " + buffer.toString() +"{EOF}" );
			}
            buffer.append( (char)b );
		}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
99
24020809
JLipSync.java 1067 1076
JLipSync.java 1187 1194
----------------------------------------
			public void actionPerformed(ActionEvent e) {

				// save current work?
				if (cancelledAutoSave()) {
					return;
				}

				// erase time sheet
				eraseTimeSheet();
			}

----------------------------------------
			public void actionPerformed(ActionEvent e) {
				// save current work?
				if (cancelledAutoSave()) {
					return;
				}
				// exit application
				System.exit(0);
			}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
99
24020810
JLipSync.java 648 678
JLipSync.java 684 716
----------------------------------------
		for (int i = 0; i < wavePanel.frameCount; i++) {

			// leading spaces
			s.append("  ");

			// the frame number
			int theFrame = i + 1;
			if (theFrame < 100)
				s.append(" ");
			if (theFrame < 10)
				s.append(" ");
			s.append(theFrame);
			s.append("  ");

			// caculate timecode
			s.append(timeSheet.calcTimeCode(i + 1));

			// key?
			if (timeSheet.key[i]) {
				s.append("   X   ");
			} else {
				s.append("       ");
			}

			// 15 characters for the mouth shape
			s.append(padString(timeSheet.mouth[i], 15));

			// optional comment
			s.append(timeSheet.comment[i]);
			s.append("\n");
		}

----------------------------------------
	public String csvFormat() {
		StringBuffer s = new StringBuffer(
				"Frame,Timecode,Key,Mouth name,Comments\n");

        for (int i = 0; i < wavePanel.frameCount; i++) {
			// the frame number
			int theFrame = i + 1;
			s.append(theFrame);
			s.append(",");

			// caculate timecode
			s.append(timeSheet.calcTimeCode(i + 1));
            s.append(",");

			// key?   X if YES
			if (timeSheet.key[i]) {
				s.append("X,");
			} else {
				s.append(",");
			}

			// 15 characters for the mouth shape
			s.append(padString(timeSheet.mouth[i], 15));
            s.append(",");

			// optional comment
			s.append(timeSheet.comment[i]);
			s.append("\n");
		}

		// convert to a string
		return s.toString();
	}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
99
24020811
JLipSync.java 684 716
JLipSync.java 643 682
----------------------------------------
	public String csvFormat() {
		StringBuffer s = new StringBuffer(
				"Frame,Timecode,Key,Mouth name,Comments\n");

        for (int i = 0; i < wavePanel.frameCount; i++) {
			// the frame number
			int theFrame = i + 1;
			s.append(theFrame);
			s.append(",");

			// caculate timecode
			s.append(timeSheet.calcTimeCode(i + 1));
            s.append(",");

			// key?   X if YES
			if (timeSheet.key[i]) {
				s.append("X,");
			} else {
				s.append(",");
			}

			// 15 characters for the mouth shape
			s.append(padString(timeSheet.mouth[i], 15));
            s.append(",");

			// optional comment
			s.append(timeSheet.comment[i]);
			s.append("\n");
		}

		// convert to a string
		return s.toString();
	}

----------------------------------------
	public String magpieFormat() {
		StringBuffer s = new StringBuffer(
				"Frame   Timecode   Key   Mouth name    Comments\n");


		for (int i = 0; i < wavePanel.frameCount; i++) {

			// leading spaces
			s.append("  ");

			// the frame number
			int theFrame = i + 1;
			if (theFrame < 100)
				s.append(" ");
			if (theFrame < 10)
				s.append(" ");
			s.append(theFrame);
			s.append("  ");

			// caculate timecode
			s.append(timeSheet.calcTimeCode(i + 1));

			// key?
			if (timeSheet.key[i]) {
				s.append("   X   ");
			} else {
				s.append("       ");
			}

			// 15 characters for the mouth shape
			s.append(padString(timeSheet.mouth[i], 15));

			// optional comment
			s.append(timeSheet.comment[i]);
			s.append("\n");
		}

		// convert to a string
		return s.toString();
	}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
99
24020812
JLipSync.java 648 678
JLipSync.java 688 712
----------------------------------------
		for (int i = 0; i < wavePanel.frameCount; i++) {

			// leading spaces
			s.append("  ");

			// the frame number
			int theFrame = i + 1;
			if (theFrame < 100)
				s.append(" ");
			if (theFrame < 10)
				s.append(" ");
			s.append(theFrame);
			s.append("  ");

			// caculate timecode
			s.append(timeSheet.calcTimeCode(i + 1));

			// key?
			if (timeSheet.key[i]) {
				s.append("   X   ");
			} else {
				s.append("       ");
			}

			// 15 characters for the mouth shape
			s.append(padString(timeSheet.mouth[i], 15));

			// optional comment
			s.append(timeSheet.comment[i]);
			s.append("\n");
		}

----------------------------------------
        for (int i = 0; i < wavePanel.frameCount; i++) {
			// the frame number
			int theFrame = i + 1;
			s.append(theFrame);
			s.append(",");

			// caculate timecode
			s.append(timeSheet.calcTimeCode(i + 1));
            s.append(",");

			// key?   X if YES
			if (timeSheet.key[i]) {
				s.append("X,");
			} else {
				s.append(",");
			}

			// 15 characters for the mouth shape
			s.append(padString(timeSheet.mouth[i], 15));
            s.append(",");

			// optional comment
			s.append(timeSheet.comment[i]);
			s.append("\n");
		}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
99
24020813
FacePanel.java 473 480
JLipSync.java 1711 1716
----------------------------------------
    public void setFace( String s ) {
        // set icon
        ImageIcon icon = getFace( s );
        if (icon != null) {
            setIcon( icon );
            repaint();
        }
    }

----------------------------------------
				if (facePanel != null) {
					Icon faceIcon = facePanel.getSmallFace(s);
					if (faceIcon != null) {
						setIcon(faceIcon);
					}
				}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
99
24020814
JLipSync.java 1556 1561
JLipSync.java 1747 1753
----------------------------------------
	public void valueChanged(ListSelectionEvent e) {
		JList list = (JList) e.getSource();
		String s = (String) list.getSelectedValue();
		// update displayed face
		facePanel.setFace(s);
	}

----------------------------------------
			public void valueChanged(ListSelectionEvent e) {
				JList list = (JList) e.getSource();
				String s = (String) list.getSelectedValue();

				// update displayed face
				facePanel.setFace(s);
			}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
99
24020816
JlsFilter.java 16 26
WavFilter.java 16 26
----------------------------------------
    public boolean accept(File f) {
        if (f.isDirectory()) {
            return true;
        }

        String fileName = f.getName().toLowerCase();
		if (fileName.endsWith( ".jls" )) {
			return true;
		}			
        return false;
    }

----------------------------------------
    public boolean accept(File f) {
        if (f.isDirectory()) {
            return true;
        }

        String fileName = f.getName().toLowerCase();
		if (fileName.endsWith( ".wav" )) {
			return true;
		}			
        return false;
    }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
99
24020815
AviFilter.java 16 26
WavFilter.java 16 26
----------------------------------------
    public boolean accept(File f) {
        if (f.isDirectory()) {
            return true;
        }

        String fileName = f.getName().toLowerCase();
		if (fileName.endsWith( ".avi" )) {
			return true;
		}			
        return false;
    }

----------------------------------------
    public boolean accept(File f) {
        if (f.isDirectory()) {
            return true;
        }

        String fileName = f.getName().toLowerCase();
		if (fileName.endsWith( ".wav" )) {
			return true;
		}			
        return false;
    }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
99
24020817
JLipSync.java 230 237
WavePanel.java 196 201
----------------------------------------
	public void eraseTimeSheet() {
		// clear the time sheet
		timeSheet.init(wavePanel.frameCount, wavePanel.framesPerSecond);
		
		// clear the track offset
		trackOffset = 0;

	}

----------------------------------------
				} else {
					// set the bytecount to zero
					byteCount = 0;
					// give up
					return;
				}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
99
24081486
FacePanel.java 338 343
FacePanel.java 72 77
----------------------------------------
				poses[pose_g] = poses[pose_c];
				poses[pose_k] = poses[pose_c];
				poses[pose_n] = poses[pose_c];
				poses[pose_r] = poses[pose_c];
				poses[pose_s] = poses[pose_c];
				poses[pose_t] = poses[pose_c];

----------------------------------------
			poses[pose_g] = poses[pose_c];
			poses[pose_k] = poses[pose_c];
			poses[pose_n] = poses[pose_c];
			poses[pose_r] = poses[pose_c];
			poses[pose_s] = poses[pose_c];
			poses[pose_t] = poses[pose_c];

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
99
24081487
FacePanel.java 338 343
FacePanel.java 126 131
----------------------------------------
				poses[pose_g] = poses[pose_c];
				poses[pose_k] = poses[pose_c];
				poses[pose_n] = poses[pose_c];
				poses[pose_r] = poses[pose_c];
				poses[pose_s] = poses[pose_c];
				poses[pose_t] = poses[pose_c];

----------------------------------------
				poses[pose_g] = poses[pose_c];
				poses[pose_k] = poses[pose_c];
				poses[pose_n] = poses[pose_c];
				poses[pose_r] = poses[pose_c];
				poses[pose_s] = poses[pose_c];
				poses[pose_t] = poses[pose_c];

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
99
24081488
FacePanel.java 337 343
FacePanel.java 71 77
----------------------------------------
				poses[pose_e] = poses[pose_c];
				poses[pose_g] = poses[pose_c];
				poses[pose_k] = poses[pose_c];
				poses[pose_n] = poses[pose_c];
				poses[pose_r] = poses[pose_c];
				poses[pose_s] = poses[pose_c];
				poses[pose_t] = poses[pose_c];

----------------------------------------
			poses[pose_e] = poses[pose_c];
			poses[pose_g] = poses[pose_c];
			poses[pose_k] = poses[pose_c];
			poses[pose_n] = poses[pose_c];
			poses[pose_r] = poses[pose_c];
			poses[pose_s] = poses[pose_c];
			poses[pose_t] = poses[pose_c];

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
99
24081489
FacePanel.java 234 240
FacePanel.java 186 192
----------------------------------------
			poses[pose_t] = poses[pose_g];
			poses[pose_c] = poses[pose_g];
			poses[pose_j] = poses[pose_g];
			poses[pose_k] = poses[pose_g];
			poses[pose_r] = poses[pose_g];
			poses[pose_s] = poses[pose_g];
			poses[pose_u] = poses[pose_g];

----------------------------------------
			poses[pose_t] = poses[pose_g];
			poses[pose_c] = poses[pose_g];
			poses[pose_j] = poses[pose_g];
			poses[pose_k] = poses[pose_g];
			poses[pose_r] = poses[pose_g];
			poses[pose_s] = poses[pose_g];
			poses[pose_u] = poses[pose_g];

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
99
26927540
FacePanel.java 71 77
FacePanel.java 285 291
----------------------------------------
			poses[pose_e] = poses[pose_c];
			poses[pose_g] = poses[pose_c];
			poses[pose_k] = poses[pose_c];
			poses[pose_n] = poses[pose_c];
			poses[pose_r] = poses[pose_c];
			poses[pose_s] = poses[pose_c];
			poses[pose_t] = poses[pose_c];

----------------------------------------
			poses[pose_d] = poses[pose_c];
			poses[pose_g] = poses[pose_c];
			poses[pose_k] = poses[pose_c];
			poses[pose_n] = poses[pose_c];
			poses[pose_r] = poses[pose_c];
			poses[pose_s] = poses[pose_c];
			poses[pose_y] = poses[pose_c];

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
99
26927541
FacePanel.java 337 343
FacePanel.java 285 291
----------------------------------------
				poses[pose_e] = poses[pose_c];
				poses[pose_g] = poses[pose_c];
				poses[pose_k] = poses[pose_c];
				poses[pose_n] = poses[pose_c];
				poses[pose_r] = poses[pose_c];
				poses[pose_s] = poses[pose_c];
				poses[pose_t] = poses[pose_c];

----------------------------------------
			poses[pose_d] = poses[pose_c];
			poses[pose_g] = poses[pose_c];
			poses[pose_k] = poses[pose_c];
			poses[pose_n] = poses[pose_c];
			poses[pose_r] = poses[pose_c];
			poses[pose_s] = poses[pose_c];
			poses[pose_y] = poses[pose_c];

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
99
26927542
FacePanel.java 71 80
FacePanel.java 125 134
----------------------------------------
			poses[pose_e] = poses[pose_c];
			poses[pose_g] = poses[pose_c];
			poses[pose_k] = poses[pose_c];
			poses[pose_n] = poses[pose_c];
			poses[pose_r] = poses[pose_c];
			poses[pose_s] = poses[pose_c];
			poses[pose_t] = poses[pose_c];
			
			// closed
			poses[pose_rest] =Utilities.createImageIcon( "default/closed.png" );

----------------------------------------
				poses[pose_c] =Utilities.createImageIcon( "toon/cdgk.gif" );
				poses[pose_g] = poses[pose_c];
				poses[pose_k] = poses[pose_c];
				poses[pose_n] = poses[pose_c];
				poses[pose_r] = poses[pose_c];
				poses[pose_s] = poses[pose_c];
				poses[pose_t] = poses[pose_c];
				
				// closed
				poses[pose_rest] =Utilities.createImageIcon( "toon/closed.gif" );

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
99
26927544
FacePanel.java 125 134
FacePanel.java 337 346
----------------------------------------
				poses[pose_c] =Utilities.createImageIcon( "toon/cdgk.gif" );
				poses[pose_g] = poses[pose_c];
				poses[pose_k] = poses[pose_c];
				poses[pose_n] = poses[pose_c];
				poses[pose_r] = poses[pose_c];
				poses[pose_s] = poses[pose_c];
				poses[pose_t] = poses[pose_c];
				
				// closed
				poses[pose_rest] =Utilities.createImageIcon( "toon/closed.gif" );

----------------------------------------
				poses[pose_e] = poses[pose_c];
				poses[pose_g] = poses[pose_c];
				poses[pose_k] = poses[pose_c];
				poses[pose_n] = poses[pose_c];
				poses[pose_r] = poses[pose_c];
				poses[pose_s] = poses[pose_c];
				poses[pose_t] = poses[pose_c];
				
				// closed
				poses[pose_rest] =Utilities.createImageIcon( "clay/closed.gif" );

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
99
26927543
FacePanel.java 71 80
FacePanel.java 337 346
----------------------------------------
			poses[pose_e] = poses[pose_c];
			poses[pose_g] = poses[pose_c];
			poses[pose_k] = poses[pose_c];
			poses[pose_n] = poses[pose_c];
			poses[pose_r] = poses[pose_c];
			poses[pose_s] = poses[pose_c];
			poses[pose_t] = poses[pose_c];
			
			// closed
			poses[pose_rest] =Utilities.createImageIcon( "default/closed.png" );

----------------------------------------
				poses[pose_e] = poses[pose_c];
				poses[pose_g] = poses[pose_c];
				poses[pose_k] = poses[pose_c];
				poses[pose_n] = poses[pose_c];
				poses[pose_r] = poses[pose_c];
				poses[pose_s] = poses[pose_c];
				poses[pose_t] = poses[pose_c];
				
				// closed
				poses[pose_rest] =Utilities.createImageIcon( "clay/closed.gif" );

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
99
26927545
FacePanel.java 66 80
FacePanel.java 332 346
----------------------------------------
			poses[pose_a] = Utilities.createImageIcon( "default/ai.png" );
			poses[pose_i] = poses[pose_a];

			// c, e, g, k, n, r, s, t
			poses[pose_c] =Utilities.createImageIcon( "default/cdgk.png" );
			poses[pose_e] = poses[pose_c];
			poses[pose_g] = poses[pose_c];
			poses[pose_k] = poses[pose_c];
			poses[pose_n] = poses[pose_c];
			poses[pose_r] = poses[pose_c];
			poses[pose_s] = poses[pose_c];
			poses[pose_t] = poses[pose_c];
			
			// closed
			poses[pose_rest] =Utilities.createImageIcon( "default/closed.png" );

----------------------------------------
				poses[pose_a] = Utilities.createImageIcon( "clay/ai.gif" );
				poses[pose_i] = poses[pose_a];

				// c, e, g, k, n, r, s, t
				poses[pose_c] =Utilities.createImageIcon( "clay/cdgk.gif" );
				poses[pose_e] = poses[pose_c];
				poses[pose_g] = poses[pose_c];
				poses[pose_k] = poses[pose_c];
				poses[pose_n] = poses[pose_c];
				poses[pose_r] = poses[pose_c];
				poses[pose_s] = poses[pose_c];
				poses[pose_t] = poses[pose_c];
				
				// closed
				poses[pose_rest] =Utilities.createImageIcon( "clay/closed.gif" );

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
99
26927546
FacePanel.java 97 116
FacePanel.java 363 383
----------------------------------------
			poses[pose_m] =Utilities.createImageIcon( "default/mbp.png" );
			poses[pose_b] = poses[pose_m];
			poses[pose_p] = poses[pose_m];
			
			// o
			poses[pose_o] =Utilities.createImageIcon( "default/o.png" );
			
			// u
			poses[pose_u] =Utilities.createImageIcon( "default/u.png" );
			
			// q, w
			poses[pose_w] =Utilities.createImageIcon( "default/wq.png" );
			poses[pose_q] = poses[pose_w];
			
			// set the phoneme list
			Object defaultList[] = { "<none>", "A", "B", "C", "Closed", "D", "E", "F", "G", "I", "K", "L", 
                "M", "N", "O", "P", "Q", "R", "S", "SH", "T", "TH", "U", "V", "W" };
			phonemes = defaultList;

		} else if (faces.equals("toon")) {			

----------------------------------------
				poses[pose_m] =Utilities.createImageIcon( "clay/mbp.gif" );
				poses[pose_b] = poses[pose_m];
				poses[pose_p] = poses[pose_m];
				
				// o
				poses[pose_o] =Utilities.createImageIcon( "clay/o.gif" );
				
				// u
				poses[pose_u] =Utilities.createImageIcon( "clay/u.gif" );
				
				// q, w
				poses[pose_w] =Utilities.createImageIcon( "clay/wq.gif" );
				poses[pose_q] = poses[pose_w];
				
				// set the phoneme list
				Object defaultList[] = { "<none>", "A", "B", "C", "Closed", "D", "E", "F", "G", "I", "K", "L", 
	                "M", "N", "O", "P", "Q", "R", "S", "SH", "T", "TH", "U", "V", "W" };
				phonemes = defaultList;

			
		}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
99
26927547
FacePanel.java 178 209
FacePanel.java 226 258
----------------------------------------
			poses[pose_a] =Utilities.createImageIcon( "wally/ai.gif" );
			poses[pose_i] = poses[pose_a];

			// e
			poses[pose_e] =Utilities.createImageIcon( "wally/e.gif" );
			
			// g, t, c, k, r, s, u
			poses[pose_g] = Utilities.createImageIcon( "wally/etc.gif" );
			poses[pose_t] = poses[pose_g];
			poses[pose_c] = poses[pose_g];
			poses[pose_j] = poses[pose_g];
			poses[pose_k] = poses[pose_g];
			poses[pose_r] = poses[pose_g];
			poses[pose_s] = poses[pose_g];
			poses[pose_u] = poses[pose_g];

			// f, v
			poses[pose_f] =Utilities.createImageIcon( "wally/fv.gif" );
			poses[pose_v] = poses[pose_f];

			// l
			poses[pose_l] =Utilities.createImageIcon( "wally/l.gif" );
			poses[pose_n] = poses[pose_l];
			poses[pose_d] = poses[pose_l];
			
			// m, b, p
			poses[pose_b] =Utilities.createImageIcon( "wally/mbp.gif" );
			poses[pose_m] = poses[pose_b];
			poses[pose_p] = poses[pose_b];

			// o
			poses[pose_o] =Utilities.createImageIcon( "wally/o.gif" );

----------------------------------------
			poses[pose_a] =Utilities.createImageIcon( "blair/ai.gif" );
			poses[pose_i] = poses[pose_a];

			// e
			poses[pose_e] =Utilities.createImageIcon( "blair/e.gif" );
			
			// g, t, c, k, r, s, u
			poses[pose_g] = Utilities.createImageIcon( "blair/etc.gif" );
			poses[pose_t] = poses[pose_g];
			poses[pose_c] = poses[pose_g];
			poses[pose_j] = poses[pose_g];
			poses[pose_k] = poses[pose_g];
			poses[pose_r] = poses[pose_g];
			poses[pose_s] = poses[pose_g];
			poses[pose_u] = poses[pose_g];

			// f, v
			poses[pose_f] =Utilities.createImageIcon( "blair/fv.gif" );
			poses[pose_v] = poses[pose_f];

			// l
			poses[pose_l] =Utilities.createImageIcon( "blair/ldth.gif" );
			poses[pose_n] = poses[pose_l];
			poses[pose_d] = poses[pose_l];
			poses[pose_th] = poses[pose_l];
			
			// m, b, p
			poses[pose_b] =Utilities.createImageIcon( "blair/mbp.gif" );
			poses[pose_m] = poses[pose_b];
			poses[pose_p] = poses[pose_b];

			// o
			poses[pose_o] =Utilities.createImageIcon( "blair/o.gif" );

----------------------------------------
