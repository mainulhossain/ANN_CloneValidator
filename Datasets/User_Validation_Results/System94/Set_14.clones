$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
94
28418424
source/net/filebot/ui/rename/PresetEditor.java 223 230
source/net/filebot/ui/list/ListPanel.java 125 133
----------------------------------------
		RTextScrollPane scroll = new RTextScrollPane(editor, false);
		scroll.setLineNumbersEnabled(false);
		scroll.setFoldIndicatorEnabled(false);
		scroll.setIconRowHeaderEnabled(false);
		scroll.setVerticalScrollBarPolicy(RTextScrollPane.VERTICAL_SCROLLBAR_NEVER);
		scroll.setHorizontalScrollBarPolicy(RTextScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
		scroll.setBackground(editor.getBackground());
		scroll.setOpaque(true);

----------------------------------------
		RTextScrollPane editorScrollPane = new RTextScrollPane(editor, false);
		editorScrollPane.setLineNumbersEnabled(false);
		editorScrollPane.setFoldIndicatorEnabled(false);
		editorScrollPane.setIconRowHeaderEnabled(false);

		editorScrollPane.setVerticalScrollBarPolicy(RTextScrollPane.VERTICAL_SCROLLBAR_NEVER);
		editorScrollPane.setHorizontalScrollBarPolicy(RTextScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
		editorScrollPane.setBackground(editor.getBackground());
		editorScrollPane.setViewportBorder(createEmptyBorder(2, 2, 2, 2));

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
94
28418425
source/net/filebot/ui/rename/PresetEditor.java 223 229
source/net/filebot/ui/rename/FormatDialog.java 196 203
----------------------------------------
		RTextScrollPane scroll = new RTextScrollPane(editor, false);
		scroll.setLineNumbersEnabled(false);
		scroll.setFoldIndicatorEnabled(false);
		scroll.setIconRowHeaderEnabled(false);
		scroll.setVerticalScrollBarPolicy(RTextScrollPane.VERTICAL_SCROLLBAR_NEVER);
		scroll.setHorizontalScrollBarPolicy(RTextScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
		scroll.setBackground(editor.getBackground());

----------------------------------------
		RTextScrollPane editorScrollPane = new RTextScrollPane(editor, false);
		editorScrollPane.setLineNumbersEnabled(false);
		editorScrollPane.setFoldIndicatorEnabled(false);
		editorScrollPane.setIconRowHeaderEnabled(false);

		editorScrollPane.setVerticalScrollBarPolicy(RTextScrollPane.VERTICAL_SCROLLBAR_NEVER);
		editorScrollPane.setHorizontalScrollBarPolicy(RTextScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
		editorScrollPane.setViewportBorder(createEmptyBorder(7, 2, 7, 2));

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
94
28418426
source/net/filebot/ui/rename/PresetEditor.java 197 217
source/net/filebot/ui/list/ListPanel.java 158 178
----------------------------------------
		return inputGroup;
	}

	private RSyntaxTextArea createEditor() {
		RSyntaxTextArea editor = new RSyntaxTextArea(new RSyntaxDocument(SyntaxConstants.SYNTAX_STYLE_GROOVY), "", 1, 80);

		editor.setAntiAliasingEnabled(true);
		editor.setAnimateBracketMatching(false);
		editor.setAutoIndentEnabled(false);
		editor.setClearWhitespaceLinesEnabled(false);
		editor.setBracketMatchingEnabled(true);
		editor.setCloseCurlyBraces(false);
		editor.setCodeFoldingEnabled(false);
		editor.setHyperlinksEnabled(false);
		editor.setUseFocusableTips(false);
		editor.setHighlightCurrentLine(false);
		editor.setLineWrap(false);
		editor.setPaintMarkOccurrencesBorder(false);
		editor.setPaintTabLines(false);
		editor.setMarkOccurrences(false);
		editor.setFont(new Font(MONOSPACED, PLAIN, 14));

----------------------------------------
		createItemSequence();
	}

	private RSyntaxTextArea createEditor() {
		RSyntaxTextArea editor = new RSyntaxTextArea(new RSyntaxDocument(SyntaxConstants.SYNTAX_STYLE_GROOVY), "", 1, 80);

		editor.setAntiAliasingEnabled(true);
		editor.setAnimateBracketMatching(false);
		editor.setAutoIndentEnabled(false);
		editor.setClearWhitespaceLinesEnabled(false);
		editor.setBracketMatchingEnabled(true);
		editor.setCloseCurlyBraces(false);
		editor.setCodeFoldingEnabled(false);
		editor.setHyperlinksEnabled(false);
		editor.setUseFocusableTips(false);
		editor.setHighlightCurrentLine(false);
		editor.setLineWrap(false);
		editor.setPaintMarkOccurrencesBorder(false);
		editor.setPaintTabLines(false);
		editor.setMarkOccurrences(false);
		editor.setFont(new Font(MONOSPACED, PLAIN, 14));

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
94
28418427
source/net/filebot/ui/rename/PresetEditor.java 198 217
source/net/filebot/ui/rename/FormatDialog.java 320 339
----------------------------------------
	}

	private RSyntaxTextArea createEditor() {
		RSyntaxTextArea editor = new RSyntaxTextArea(new RSyntaxDocument(SyntaxConstants.SYNTAX_STYLE_GROOVY), "", 1, 80);

		editor.setAntiAliasingEnabled(true);
		editor.setAnimateBracketMatching(false);
		editor.setAutoIndentEnabled(false);
		editor.setClearWhitespaceLinesEnabled(false);
		editor.setBracketMatchingEnabled(true);
		editor.setCloseCurlyBraces(false);
		editor.setCodeFoldingEnabled(false);
		editor.setHyperlinksEnabled(false);
		editor.setUseFocusableTips(false);
		editor.setHighlightCurrentLine(false);
		editor.setLineWrap(false);
		editor.setPaintMarkOccurrencesBorder(false);
		editor.setPaintTabLines(false);
		editor.setMarkOccurrences(false);
		editor.setFont(new Font(MONOSPACED, PLAIN, 14));

----------------------------------------
	}

	private RSyntaxTextArea createEditor() {
		RSyntaxTextArea editor = new RSyntaxTextArea(new RSyntaxDocument(SyntaxConstants.SYNTAX_STYLE_GROOVY), "", 1, 80);

		editor.setAntiAliasingEnabled(true);
		editor.setAnimateBracketMatching(false);
		editor.setAutoIndentEnabled(false);
		editor.setClearWhitespaceLinesEnabled(false);
		editor.setBracketMatchingEnabled(true);
		editor.setCloseCurlyBraces(false);
		editor.setCodeFoldingEnabled(false);
		editor.setHyperlinksEnabled(false);
		editor.setUseFocusableTips(false);
		editor.setHighlightCurrentLine(false);
		editor.setLineWrap(false);
		editor.setPaintMarkOccurrencesBorder(false);
		editor.setPaintTabLines(false);
		editor.setMarkOccurrences(false);
		editor.setFont(new Font(MONOSPACED, PLAIN, 14));

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
94
28418428
source/net/filebot/ui/rename/PresetEditor.java 1 8
source/net/filebot/ui/rename/FormatDialog.java 1 8
----------------------------------------
package net.filebot.ui.rename;

import static java.awt.Font.*;
import static java.util.Collections.*;
import static javax.swing.BorderFactory.*;
import static net.filebot.Logging.*;
import static net.filebot.Settings.*;
import static net.filebot.util.ui.SwingUI.*;

----------------------------------------
package net.filebot.ui.rename;

import static java.awt.Font.*;
import static java.util.Collections.*;
import static javax.swing.BorderFactory.*;
import static net.filebot.Logging.*;
import static net.filebot.Settings.*;
import static net.filebot.util.ExceptionUtilities.*;

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
94
28418430
source/net/filebot/ui/filter/ExtractTool.java 50 63
source/net/filebot/ui/rename/BindingDialog.java 276 289
----------------------------------------
		super("Archives");

		table.setAutoCreateRowSorter(true);
		table.setAutoCreateColumnsFromModel(true);
		table.setFillsViewportHeight(true);

		table.setAutoResizeMode(JTable.AUTO_RESIZE_SUBSEQUENT_COLUMNS);
		table.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);

		table.setBackground(Color.white);
		table.setGridColor(new Color(0xEEEEEE));
		table.setRowHeight(25);

		JScrollPane tableScrollPane = new JScrollPane(table);

----------------------------------------
					JTable table = new JTable(new ParameterTableModel(parameters));
					table.setAutoCreateRowSorter(true);
					table.setAutoCreateColumnsFromModel(true);
					table.setFillsViewportHeight(true);

					table.setAutoResizeMode(JTable.AUTO_RESIZE_SUBSEQUENT_COLUMNS);
					table.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);

					table.setBackground(Color.white);
					table.setGridColor(new Color(0xEEEEEE));
					table.setRowHeight(25);

					// set media info exclude filter
					TableRowSorter<?> sorter = (TableRowSorter<?>) table.getRowSorter();

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
94
28418429
source/net/filebot/ui/filter/AttributeTool.java 31 44
source/net/filebot/ui/rename/BindingDialog.java 276 289
----------------------------------------
		super("Attributes");

		table.setAutoCreateRowSorter(true);
		table.setAutoCreateColumnsFromModel(true);
		table.setFillsViewportHeight(true);

		table.setAutoResizeMode(JTable.AUTO_RESIZE_SUBSEQUENT_COLUMNS);
		table.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);

		table.setBackground(Color.white);
		table.setGridColor(new Color(0xEEEEEE));
		table.setRowHeight(25);

		JScrollPane scrollPane = new JScrollPane(table);

----------------------------------------
					JTable table = new JTable(new ParameterTableModel(parameters));
					table.setAutoCreateRowSorter(true);
					table.setAutoCreateColumnsFromModel(true);
					table.setFillsViewportHeight(true);

					table.setAutoResizeMode(JTable.AUTO_RESIZE_SUBSEQUENT_COLUMNS);
					table.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);

					table.setBackground(Color.white);
					table.setGridColor(new Color(0xEEEEEE));
					table.setRowHeight(25);

					// set media info exclude filter
					TableRowSorter<?> sorter = (TableRowSorter<?>) table.getRowSorter();

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
94
28418431
source/net/filebot/ui/rename/MusicMatcher.java 27 30
source/net/filebot/ui/rename/XattrFileMatcher.java 16 21
----------------------------------------
	@Override
	public List<Match<File, ?>> match(Collection<File> files, boolean strict, SortOrder order, Locale locale, boolean autodetection, Component parent) throws Exception {
		List<Match<File, ?>> matches = new ArrayList<Match<File, ?>>();
		LinkedHashSet<File> remaining = new LinkedHashSet<File>(filter(files, AUDIO_FILES, VIDEO_FILES));

----------------------------------------
	@Override
	public List<Match<File, ?>> match(Collection<File> files, boolean strict, SortOrder order, Locale locale, boolean autodetection, Component parent) throws Exception {
		List<Match<File, ?>> matches = new ArrayList<Match<File, ?>>();

		// use strict mode to exclude files that are not xattr tagged
		match(files, true).forEach((k, v) -> {

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
94
28418432
source/net/filebot/ui/rename/MovieMatcher.java 355 371
source/net/filebot/ui/rename/EpisodeListMatcher.java 241 255
----------------------------------------
			SelectDialog<Movie> selectDialog = new SelectDialog<Movie>(parent, options, true, false, header);

			selectDialog.setTitle(service.getName());
			selectDialog.getMessageLabel().setText("<html>Select best match for \"<b>" + escapeHTML(query) + "</b>\":</html>");
			selectDialog.getCancelAction().putValue(Action.NAME, "Skip");
			selectDialog.pack();

			// show dialog
			selectDialog.restoreState(Preferences.userNodeForPackage(MovieMatcher.class));
			selectDialog.setLocation(getOffsetLocation(selectDialog.getOwner()));
			selectDialog.setVisible(true);

			// remember dialog state
			selectDialog.saveState(Preferences.userNodeForPackage(MovieMatcher.class));

			// remember if we should auto-repeat the chosen action in the future
			if (selectDialog.getAutoRepeatCheckBox().isSelected() || selectDialog.getSelectedAction() == null) {

----------------------------------------
			SelectDialog<SearchResult> selectDialog = new SelectDialog<SearchResult>(parent, options, true, false, header.getText().isEmpty() ? null : header);
			selectDialog.setTitle(provider.getName());
			selectDialog.getMessageLabel().setText("<html>Select best match for \"<b>" + escapeHTML(query) + "</b>\":</html>");
			selectDialog.getCancelAction().putValue(Action.NAME, "Skip");
			selectDialog.pack();

			// show dialog
			selectDialog.restoreState(Preferences.userNodeForPackage(EpisodeListMatcher.class));
			selectDialog.setLocation(getOffsetLocation(selectDialog.getOwner()));
			selectDialog.setVisible(true);

			// remember dialog state
			selectDialog.saveState(Preferences.userNodeForPackage(EpisodeListMatcher.class));

			if (selectDialog.getSelectedAction() == null) {

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
94
28418433
source/net/filebot/ui/rename/MovieMatcher.java 4 9
source/net/filebot/ui/SupportDialog.java 1 7
----------------------------------------
import static java.util.Comparator.*;
import static java.util.stream.Collectors.*;
import static javax.swing.BorderFactory.*;
import static net.filebot.Logging.*;
import static net.filebot.MediaTypes.*;
import static net.filebot.Settings.*;

----------------------------------------
package net.filebot.ui;

import static java.util.stream.Collectors.*;
import static javax.swing.JOptionPane.*;
import static net.filebot.Logging.*;
import static net.filebot.Settings.*;
import static net.filebot.util.StringUtilities.*;

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
94
28418434
source/net/filebot/ui/rename/RenameAction.java 1 8
source/net/filebot/ui/rename/AutoDetectMatcher.java 2 9
----------------------------------------
package net.filebot.ui.rename;

import static java.util.Arrays.*;
import static java.util.Collections.*;
import static java.util.stream.Collectors.*;
import static net.filebot.Logging.*;
import static net.filebot.Settings.*;
import static net.filebot.media.MediaDetection.*;

----------------------------------------
package net.filebot.ui.rename;

import static java.util.Collections.*;
import static java.util.Comparator.*;
import static java.util.stream.Collectors.*;
import static net.filebot.Logging.*;
import static net.filebot.Settings.*;
import static net.filebot.WebServices.*;

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
94
28418435
source/net/filebot/ui/rename/HistoryDialog.java 768 781
source/net/filebot/ui/subtitle/SubtitleViewer.java 237 251
----------------------------------------
			return sb.toString();
		}
	}

	private static class ElementTableModel extends AbstractTableModel {

		private List<Element> data = emptyList();

		public void setData(List<Element> data) {
			this.data = new ArrayList<Element>(data);

			// update view
			fireTableDataChanged();
		}

----------------------------------------
			return filter.matcher(element.getText()).find();
		}

	}

	private static class SubtitleTableModel extends AbstractTableModel {

		private List<SubtitleElement> data = emptyList();

		public void setData(List<SubtitleElement> data) {
			this.data = new ArrayList<SubtitleElement>(data);

			// update view
			fireTableDataChanged();
		}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
94
28418436
source/net/filebot/ui/rename/HistoryDialog.java 639 652
source/net/filebot/ui/subtitle/SubtitleViewer.java 220 233
----------------------------------------
			return "history.xml";
		}
	};

	private static class HistoryFilter extends RowFilter<Object, Integer> {

		private final Pattern filter;

		public HistoryFilter(String filter) {
			this.filter = compile(quote(filter), CASE_INSENSITIVE | UNICODE_CHARACTER_CLASS | CANON_EQ);
		}

		@Override
		public boolean include(Entry<?, ? extends Integer> entry) {

----------------------------------------
			filterEditor.setText("");
		}
	};

	private static class SubtitleFilter extends RowFilter<Object, Integer> {

		private final Pattern filter;

		public SubtitleFilter(String filter) {
			this.filter = compile(quote(filter), CASE_INSENSITIVE | UNICODE_CHARACTER_CLASS | CANON_EQ);
		}

		@Override
		public boolean include(Entry<?, ? extends Integer> entry) {

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
94
28418437
source/net/filebot/ui/rename/HistoryDialog.java 323 337
source/net/filebot/ui/filter/FileTree.java 173 187
----------------------------------------
	private final MouseListener contextMenuProvider = new MouseAdapter() {

		@Override
		public void mousePressed(MouseEvent e) {
			maybeShowPopup(e);
		}

		@Override
		public void mouseReleased(MouseEvent e) {
			maybeShowPopup(e);
		}

		private void maybeShowPopup(MouseEvent e) {
			if (e.isPopupTrigger()) {
				JTable table = (JTable) e.getSource();

----------------------------------------
	private class ExpandCollapsePopupListener extends MouseAdapter {

		@Override
		public void mousePressed(MouseEvent e) {
			maybeShowPopup(e);
		}

		@Override
		public void mouseReleased(MouseEvent e) {
			maybeShowPopup(e);
		}

		private void maybeShowPopup(MouseEvent e) {
			if (e.isPopupTrigger()) {
				TreePath path = getPathForLocation(e.getX(), e.getY());

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
94
28418438
source/net/filebot/ui/rename/HistoryDialog.java 315 326
source/net/filebot/ui/subtitle/SubtitleDownloadComponent.java 341 352
----------------------------------------
	private final Action clearFilterAction = new AbstractAction("Clear Filter", ResourceManager.getIcon("edit.clear")) {

		@Override
		public void actionPerformed(ActionEvent e) {
			filterEditor.setText("");
		}
	};

	private final MouseListener contextMenuProvider = new MouseAdapter() {

		@Override
		public void mousePressed(MouseEvent e) {

----------------------------------------
	private final Action clearFilterAction = new AbstractAction("Clear Filter", ResourceManager.getIcon("edit.clear")) {

		@Override
		public void actionPerformed(ActionEvent e) {
			filterEditor.setText("");
		}
	};

	private final MouseListener packageListMouseHandler = new MouseAdapter() {

		@Override
		public void mouseClicked(MouseEvent e) {

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
94
28418439
source/net/filebot/ui/SupportDialog.java 1 7
source/net/filebot/ui/rename/HistoryDialog.java 6 11
----------------------------------------
package net.filebot.ui;

import static java.util.stream.Collectors.*;
import static javax.swing.JOptionPane.*;
import static net.filebot.Logging.*;
import static net.filebot.Settings.*;
import static net.filebot.util.StringUtilities.*;

----------------------------------------
import static java.util.regex.Pattern.*;
import static java.util.stream.Collectors.*;
import static javax.swing.JOptionPane.*;
import static net.filebot.Logging.*;
import static net.filebot.Settings.*;
import static net.filebot.UserFiles.*;

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
94
28418440
source/net/filebot/ui/rename/ValidateDialog.java 182 195
source/net/filebot/ui/rename/ConflictDialog.java 301 311
----------------------------------------
		if (invalidFilePaths.isEmpty()) {
			return true;
		}

		ValidateDialog dialog = new ValidateDialog(getWindow(parent), invalidFilePaths);
		dialog.setLocation(getOffsetLocation(dialog.getOwner()));

		// show and block
		dialog.setVisible(true);

		if (dialog.cancel()) {
			// no output
			return false;
		}

----------------------------------------
		if (conflicts.isEmpty()) {
			return true;
		}

		ConflictDialog dialog = new ConflictDialog(getWindow(parent), conflicts);
		dialog.setLocation(getOffsetLocation(dialog.getOwner()));
		dialog.setVisible(true);

		if (dialog.cancel()) {
			return false;
		}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
94
28418441
source/net/filebot/ui/rename/ValidateDialog.java 1 7
source/net/filebot/ui/sfv/ChecksumTableTransferablePolicy.java 1 7
----------------------------------------
package net.filebot.ui.rename;

import static java.util.Arrays.*;
import static java.util.Collections.*;
import static net.filebot.Logging.*;
import static net.filebot.Settings.*;
import static net.filebot.util.FileUtilities.*;

----------------------------------------
package net.filebot.ui.sfv;

import static java.util.Arrays.*;
import static java.util.Collections.*;
import static net.filebot.Logging.*;
import static net.filebot.MediaTypes.*;
import static net.filebot.Settings.*;

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
94
28418442
source/net/filebot/ui/SupportDialog.java 1 7
source/net/filebot/ui/rename/EpisodeListMatcher.java 4 9
----------------------------------------
package net.filebot.ui;

import static java.util.stream.Collectors.*;
import static javax.swing.JOptionPane.*;
import static net.filebot.Logging.*;
import static net.filebot.Settings.*;
import static net.filebot.util.StringUtilities.*;

----------------------------------------
import static java.util.Comparator.*;
import static java.util.stream.Collectors.*;
import static javax.swing.BorderFactory.*;
import static net.filebot.MediaTypes.*;
import static net.filebot.Settings.*;
import static net.filebot.WebServices.*;

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
94
28418443
source/net/filebot/ui/rename/FormatDialog.java 320 342
source/net/filebot/ui/list/ListPanel.java 159 180
----------------------------------------
	}

	private RSyntaxTextArea createEditor() {
		RSyntaxTextArea editor = new RSyntaxTextArea(new RSyntaxDocument(SyntaxConstants.SYNTAX_STYLE_GROOVY), "", 1, 80);

		editor.setAntiAliasingEnabled(true);
		editor.setAnimateBracketMatching(false);
		editor.setAutoIndentEnabled(false);
		editor.setClearWhitespaceLinesEnabled(false);
		editor.setBracketMatchingEnabled(true);
		editor.setCloseCurlyBraces(false);
		editor.setCodeFoldingEnabled(false);
		editor.setHyperlinksEnabled(false);
		editor.setUseFocusableTips(false);
		editor.setHighlightCurrentLine(false);
		editor.setLineWrap(false);
		editor.setPaintMarkOccurrencesBorder(false);
		editor.setPaintTabLines(false);
		editor.setMarkOccurrences(false);
		editor.setFont(new Font(MONOSPACED, PLAIN, 14));

		// update format on change
		editor.getDocument().addDocumentListener(new LazyDocumentListener(evt -> {

----------------------------------------
	}

	private RSyntaxTextArea createEditor() {
		RSyntaxTextArea editor = new RSyntaxTextArea(new RSyntaxDocument(SyntaxConstants.SYNTAX_STYLE_GROOVY), "", 1, 80);

		editor.setAntiAliasingEnabled(true);
		editor.setAnimateBracketMatching(false);
		editor.setAutoIndentEnabled(false);
		editor.setClearWhitespaceLinesEnabled(false);
		editor.setBracketMatchingEnabled(true);
		editor.setCloseCurlyBraces(false);
		editor.setCodeFoldingEnabled(false);
		editor.setHyperlinksEnabled(false);
		editor.setUseFocusableTips(false);
		editor.setHighlightCurrentLine(false);
		editor.setLineWrap(false);
		editor.setPaintMarkOccurrencesBorder(false);
		editor.setPaintTabLines(false);
		editor.setMarkOccurrences(false);
		editor.setFont(new Font(MONOSPACED, PLAIN, 14));

		Color defaultForeground = editor.getForeground();

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
94
28418444
source/net/filebot/ui/rename/FilesListTransferablePolicy.java 105 116
source/net/filebot/ui/sfv/ChecksumTableTransferablePolicy.java 60 71
----------------------------------------
		return ExtensionFileFilter.WILDCARD;
	}

	@Override
	protected void process(List<File> chunks) {
		model.addAll(chunks);
	}

	@Override
	protected void process(Exception e) {
		log.log(Level.WARNING, ExceptionUtilities.getRootCauseMessage(e), e);
	}

----------------------------------------
		super.handleInBackground(files, action);
	}

	@Override
	protected void process(List<ChecksumCell> chunks) {
		model.addAll(chunks);
	}

	@Override
	protected void process(Exception e) {
		log.log(Level.WARNING, ExceptionUtilities.getRootCauseMessage(e), e);
	}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
94
28418445
source/net/filebot/ui/rename/RenameAction.java 15 23
source/net/filebot/ui/filter/TypeTool.java 4 13
----------------------------------------
import java.awt.event.ActionEvent;
import java.io.File;
import java.util.AbstractList;
import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

----------------------------------------
import static net.filebot.util.FileUtilities.*;

import java.io.File;
import java.io.FileFilter;
import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.concurrent.CancellationException;

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
94
28418446
source/net/filebot/ui/list/FileListTransferablePolicy.java 1 7
source/net/filebot/ui/rename/RenameAction.java 1 7
----------------------------------------
package net.filebot.ui.list;

import static java.util.Arrays.*;
import static java.util.Collections.*;
import static java.util.stream.Collectors.*;
import static net.filebot.MediaTypes.*;
import static net.filebot.ui.transfer.FileTransferable.*;

----------------------------------------
package net.filebot.ui.rename;

import static java.util.Arrays.*;
import static java.util.Collections.*;
import static java.util.stream.Collectors.*;
import static net.filebot.Logging.*;
import static net.filebot.Settings.*;

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
94
28418447
source/net/filebot/ui/subtitle/upload/MovieEditor.java 109 144
source/net/filebot/ui/subtitle/upload/FileEditor.java 28 63
----------------------------------------
		return null;
	}

	@Override
	public boolean stopCellEditing() {
		return true;
	}

	@Override
	public boolean shouldSelectCell(EventObject evt) {
		return false;
	}

	@Override
	public void removeCellEditorListener(CellEditorListener listener) {
	}

	@Override
	public boolean isCellEditable(EventObject evt) {
		return true;
	}

	@Override
	public Object getCellEditorValue() {
		return null;
	}

	@Override
	public void cancelCellEditing() {
	}

	@Override
	public void addCellEditorListener(CellEditorListener evt) {
	}

}

----------------------------------------
		return null;
	}

	@Override
	public boolean stopCellEditing() {
		return true;
	}

	@Override
	public boolean shouldSelectCell(EventObject evt) {
		return false;
	}

	@Override
	public void removeCellEditorListener(CellEditorListener listener) {
	}

	@Override
	public boolean isCellEditable(EventObject evt) {
		return true;
	}

	@Override
	public Object getCellEditorValue() {
		return null;
	}

	@Override
	public void cancelCellEditing() {
	}

	@Override
	public void addCellEditorListener(CellEditorListener evt) {
	}

}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
94
28418448
source/net/filebot/ui/subtitle/upload/MovieEditor.java 8 15
source/net/filebot/ui/subtitle/upload/FileEditor.java 7 14
----------------------------------------
import java.awt.Cursor;
import java.io.File;
import java.util.EventObject;
import java.util.List;

import javax.swing.JTable;
import javax.swing.event.CellEditorListener;
import javax.swing.table.TableCellEditor;

----------------------------------------
import java.awt.event.ActionEvent;
import java.io.File;
import java.util.EventObject;
import java.util.List;

import javax.swing.JTable;
import javax.swing.event.CellEditorListener;
import javax.swing.table.TableCellEditor;

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
94
28418449
source/net/filebot/ui/subtitle/upload/SubtitleMappingTableModel.java 99 112
source/net/filebot/ui/subtitle/SubtitleViewer.java 280 293
----------------------------------------
		return (column == 0 || column == 1 || column == 3) && EnumSet.of(Status.IdentificationRequired, Status.UploadReady, Status.IllegalInput).contains(data[row].getStatus());
	}

	@Override
	public Class<?> getColumnClass(int column) {
		switch (column) {
		case 0:
			return Movie.class;
		case 1:
			return File.class;
		case 2:
			return File.class;
		case 3:
			return Language.class;

----------------------------------------
			return data.size();
		}

		@Override
		public Class<?> getColumnClass(int column) {
			switch (column) {
			case 0:
				return Integer.class;
			case 1:
				return Date.class;
			case 2:
				return Date.class;
			case 3:
				return String.class;

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
94
28418450
source/net/filebot/ui/subtitle/SubtitlePanel.java 188 203
source/net/filebot/ui/episodelist/EpisodeListPanel.java 93 108
----------------------------------------
		return WebServices.getSubtitleProviders(getLocale());
	}

	@Override
	protected LabelProvider<SubtitleProvider> getSearchEngineLabelProvider() {
		return SimpleLabelProvider.forClass(SubtitleProvider.class);
	}

	@Override
	protected Settings getSettings() {
		return Settings.forPackage(SubtitlePanel.class);
	}

	@Override
	protected SubtitleRequestProcessor createRequestProcessor() {
		SubtitleProvider provider = searchTextField.getSelectButton().getSelectedValue();

----------------------------------------
		return WebServices.getEpisodeListProviders();
	}

	@Override
	protected LabelProvider<EpisodeListProvider> getSearchEngineLabelProvider() {
		return SimpleLabelProvider.forClass(EpisodeListProvider.class);
	}

	@Override
	protected Settings getSettings() {
		return Settings.forPackage(EpisodeListPanel.class);
	}

	@Override
	protected EpisodeListRequestProcessor createRequestProcessor() {
		EpisodeListProvider provider = searchTextField.getSelectButton().getSelectedValue();

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
94
28418451
source/net/filebot/ui/subtitle/SubtitleDownloadComponent.java 429 441
source/net/filebot/ui/filter/FileTree.java 175 187
----------------------------------------
		@Override
		public void mousePressed(MouseEvent e) {
			maybeShowPopup(e);
		}

		@Override
		public void mouseReleased(MouseEvent e) {
			maybeShowPopup(e);
		}

		private void maybeShowPopup(MouseEvent e) {
			if (e.isPopupTrigger()) {
				JList list = (JList) e.getSource();

----------------------------------------
		@Override
		public void mousePressed(MouseEvent e) {
			maybeShowPopup(e);
		}

		@Override
		public void mouseReleased(MouseEvent e) {
			maybeShowPopup(e);
		}

		private void maybeShowPopup(MouseEvent e) {
			if (e.isPopupTrigger()) {
				TreePath path = getPathForLocation(e.getX(), e.getY());

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
94
28418452
source/net/filebot/ui/filter/FileTree.java 175 187
source/net/filebot/ui/subtitle/SubtitleDownloadComponent.java 360 372
----------------------------------------
		@Override
		public void mousePressed(MouseEvent e) {
			maybeShowPopup(e);
		}

		@Override
		public void mouseReleased(MouseEvent e) {
			maybeShowPopup(e);
		}

		private void maybeShowPopup(MouseEvent e) {
			if (e.isPopupTrigger()) {
				TreePath path = getPathForLocation(e.getX(), e.getY());

----------------------------------------
		@Override
		public void mousePressed(MouseEvent e) {
			maybeShowPopup(e);
		}

		@Override
		public void mouseReleased(MouseEvent e) {
			maybeShowPopup(e);
		}

		private void maybeShowPopup(MouseEvent e) {
			if (e.isPopupTrigger()) {
				JList list = (JList) e.getSource();

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
94
28418453
source/net/filebot/ui/filter/FileTreeTransferablePolicy.java 1 6
source/net/filebot/ui/filter/ExtractTool.java 1 6
----------------------------------------
package net.filebot.ui.filter;

import static net.filebot.Logging.*;
import static net.filebot.Settings.*;
import static net.filebot.util.ExceptionUtilities.*;
import static net.filebot.util.FileUtilities.*;

----------------------------------------
package net.filebot.ui.filter;

import static net.filebot.Logging.*;
import static net.filebot.UserFiles.*;
import static net.filebot.util.FileUtilities.*;
import static net.filebot.util.ui.SwingUI.*;

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
94
28418454
source/net/filebot/ui/filter/MediaInfoTool.java 42 57
source/net/filebot/ui/filter/AttributeTool.java 37 52
----------------------------------------
		table.setCellSelectionEnabled(true);
		table.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);

		table.setBackground(Color.white);
		table.setGridColor(new Color(0xEEEEEE));
		table.setRowHeight(25);

		JScrollPane scrollPane = new JScrollPane(table);
		scrollPane.setBorder(BorderFactory.createEmptyBorder());

		setLayout(new MigLayout("insets 0, fill"));
		add(new LoadingOverlayPane(scrollPane, this), "grow");
	}

	@Override
	protected TableModel createModelInBackground(List<File> root) {

----------------------------------------
		table.setAutoResizeMode(JTable.AUTO_RESIZE_SUBSEQUENT_COLUMNS);
		table.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);

		table.setBackground(Color.white);
		table.setGridColor(new Color(0xEEEEEE));
		table.setRowHeight(25);

		JScrollPane scrollPane = new JScrollPane(table);
		scrollPane.setBorder(BorderFactory.createEmptyBorder());

		setLayout(new MigLayout("insets 0, fill"));
		add(new LoadingOverlayPane(scrollPane, this), "grow");
	}

	@Override
	protected TableModel createModelInBackground(List<File> root) {

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
94
28418455
source/net/filebot/ui/filter/MediaInfoTool.java 42 50
source/net/filebot/ui/filter/ExtractTool.java 56 64
----------------------------------------
		table.setCellSelectionEnabled(true);
		table.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);

		table.setBackground(Color.white);
		table.setGridColor(new Color(0xEEEEEE));
		table.setRowHeight(25);

		JScrollPane scrollPane = new JScrollPane(table);
		scrollPane.setBorder(BorderFactory.createEmptyBorder());

----------------------------------------
		table.setAutoResizeMode(JTable.AUTO_RESIZE_SUBSEQUENT_COLUMNS);
		table.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);

		table.setBackground(Color.white);
		table.setGridColor(new Color(0xEEEEEE));
		table.setRowHeight(25);

		JScrollPane tableScrollPane = new JScrollPane(table);
		tableScrollPane.setBorder(new SeparatorBorder(2, new Color(0, 0, 0, 90), GradientStyle.TOP_TO_BOTTOM, SeparatorBorder.Position.BOTTOM));

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
94
28418456
source/net/filebot/ui/sfv/ChecksumRow.java 177 194
source/net/filebot/ui/sfv/ChecksumCell.java 168 185
----------------------------------------
				setState(getState(hashes.values()));
			}
		}
	};

	private SwingPropertyChangeSupport pcs = new SwingPropertyChangeSupport(this, true);


	public void addPropertyChangeListener(PropertyChangeListener listener) {
		pcs.addPropertyChangeListener(listener);
	}


	public void removePropertyChangeListener(PropertyChangeListener listener) {
		pcs.removePropertyChangeListener(listener);
	}

}

----------------------------------------
				task = null;
			}
		}
	};

	private SwingPropertyChangeSupport pcs = new SwingPropertyChangeSupport(this, true);


	public void addPropertyChangeListener(PropertyChangeListener listener) {
		pcs.addPropertyChangeListener(listener);
	}


	public void removePropertyChangeListener(PropertyChangeListener listener) {
		pcs.removePropertyChangeListener(listener);
	}

}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
94
28917510
source/net/filebot/MediaTypes.java 24 29
source/net/filebot/util/ExceptionUtilities.java 5 12
----------------------------------------
	public static synchronized MediaTypes getDefault() {
		if (defaultInstance == null) {
			defaultInstance = parseDefault();
		}
		return defaultInstance;
	}

----------------------------------------
	public static Throwable getRootCause(Throwable t) {
		if (t != null) {
			while (t.getCause() != null) {
				t = t.getCause();
			}
		}
		return t;
	}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
94
28917511
source/net/filebot/format/ExpressionFormat.java 258 263
source/net/filebot/util/ExceptionUtilities.java 5 12
----------------------------------------
	protected static synchronized ScriptEngine getGroovyScriptEngine() throws ScriptException {
		if (engine == null) {
			engine = createScriptEngine();
		}
		return engine;
	}

----------------------------------------
	public static Throwable getRootCause(Throwable t) {
		if (t != null) {
			while (t.getCause() != null) {
				t = t.getCause();
			}
		}
		return t;
	}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
94
28917512
source/net/filebot/ui/transfer/ByteBufferTransferable.java 33 40
source/net/filebot/util/ExceptionUtilities.java 5 12
----------------------------------------
			try {
				// create file for transfer on demand
				if (transferable == null) {
					transferable = createFileTransferable();
				}

				return transferable.getTransferData(flavor);
			} catch (IOException e) {

----------------------------------------
	public static Throwable getRootCause(Throwable t) {
		if (t != null) {
			while (t.getCause() != null) {
				t = t.getCause();
			}
		}
		return t;
	}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
94
28917515
source/net/filebot/ui/sfv/ChecksumTable.java 51 62
source/net/filebot/util/ExceptionUtilities.java 14 22
----------------------------------------
			public String getToolTipText(MouseEvent evt) {
				try {
					int columnIndex = columnModel.getColumnIndexAtX(evt.getX());
					int modelIndex = columnModel.getColumn(columnIndex).getModelIndex();

					// display column root of checksum column
					return getModel().getColumnRoot(modelIndex).getPath();
				} catch (Exception e) {
					// ignore, column is not a checksum column
					return null;
				}
			};

----------------------------------------
	public static <T extends Throwable> T findCause(Throwable t, Class<T> type) {
		while (t != null) {
			if (type.isInstance(t)) {
				return type.cast(t);
			}
			t = t.getCause();
		}
		return null;
	}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
94
28917516
source/net/filebot/ui/transfer/ByteBufferTransferable.java 32 43
source/net/filebot/util/ExceptionUtilities.java 14 22
----------------------------------------
		if (FileTransferable.isFileListFlavor(flavor)) {
			try {
				// create file for transfer on demand
				if (transferable == null) {
					transferable = createFileTransferable();
				}

				return transferable.getTransferData(flavor);
			} catch (IOException e) {
				throw new RuntimeException(e);
			}
		}

----------------------------------------
	public static <T extends Throwable> T findCause(Throwable t, Class<T> type) {
		while (t != null) {
			if (type.isInstance(t)) {
				return type.cast(t);
			}
			t = t.getCause();
		}
		return null;
	}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
94
28917513
source/net/filebot/util/ExceptionUtilities.java 5 12
source/net/filebot/util/ExceptionUtilities.java 14 22
----------------------------------------
	public static Throwable getRootCause(Throwable t) {
		if (t != null) {
			while (t.getCause() != null) {
				t = t.getCause();
			}
		}
		return t;
	}

----------------------------------------
	public static <T extends Throwable> T findCause(Throwable t, Class<T> type) {
		while (t != null) {
			if (type.isInstance(t)) {
				return type.cast(t);
			}
			t = t.getCause();
		}
		return null;
	}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
94
28917514
source/net/filebot/util/ExceptionUtilities.java 5 12
source/net/filebot/util/AlphanumComparator.java 29 43
----------------------------------------
	public static Throwable getRootCause(Throwable t) {
		if (t != null) {
			while (t.getCause() != null) {
				t = t.getCause();
			}
		}
		return t;
	}

----------------------------------------
	protected String getChunk(String s, int start) {
		int index = start;
		int length = s.length();
		boolean mode = isDigit(s, index++);

		while (index < length) {
			if (mode != isDigit(s, index)) {
				break;
			}

			++index;
		}

		return s.substring(start, index);
	}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
94
28917517
source/net/filebot/ui/rename/RenameModel.java 78 116
source/net/filebot/similarity/SeriesNameMatcher.java 81 112
----------------------------------------
	public Map<File, File> getRenameMap() {
		Map<File, File> map = new LinkedHashMap<File, File>();

		for (int i = 0; i < names.size(); i++) {
			if (hasComplement(i)) {
				// make sure we're dealing with regular File objects form here on out
				File source = new File(files().get(i).getPath());

				FormattedFuture task = names.get(i);
				StringBuilder destination = new StringBuilder();

				// append formatted name, throw exception if not ready
				try {
					destination.append(task.get(0, TimeUnit.SECONDS));
				} catch (ExecutionException e) {
					throw new IllegalStateException(String.format("\"%s\" could not be formatted: %s.", task.preview(), e.getCause().getMessage()));
				} catch (TimeoutException e) {
					throw new IllegalStateException(String.format("\"%s\" has not been formatted yet.", task.preview()));
				} catch (InterruptedException e) {
					throw new RuntimeException(e);
				}

				// append extension, if desired
				if (preserveExtension) {
					String extension = getExtension(source);
					if (extension != null) {
						destination.append('.').append(extension.toLowerCase());
					}
				}

				// insert mapping
				if (map.put(source, new File(destination.toString())) != null) {
					throw new IllegalStateException("Duplicate source file: " + source.getName());
				}
			}
		}

		return map;
	}

----------------------------------------
	public Collection<String> matchAll(String[] names) {
		SeriesNameCollection seriesNames = new SeriesNameCollection();

		// allow matching of a small number of episodes, by setting threshold = length if length < 5
		int threshold = Math.min(names.length, 5);

		// match common word sequences (likely series names)
		SeriesNameCollection whitelist = new SeriesNameCollection();

		// focus chars before the SxE / Date pattern when matching by common word sequence
		String[] focus = Arrays.copyOf(names, names.length);
		for (int i = 0; i < focus.length; i++) {
			String beforeSxE = seasonEpisodeMatcher.head(focus[i]);
			if (beforeSxE != null && beforeSxE.length() > 0) {
				focus[i] = beforeSxE;
			} else {
				int datePos = dateMatcher.find(focus[i], 0);
				if (datePos >= 0) {
					focus[i] = focus[i].substring(0, datePos);
				}
			}
		}
		whitelist.addAll(deepMatchAll(focus, threshold));

		// 1. use pattern matching
		seriesNames.addAll(flatMatchAll(names, compile(join(whitelist, "|"), CASE_INSENSITIVE | UNICODE_CHARACTER_CLASS), threshold, false));

		// 2. use common word sequences
		seriesNames.addAll(whitelist);

		return seriesNames;
	}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
94
28917518
source/net/filebot/ui/rename/RenameModel.java 78 116
source/net/filebot/ui/LanguageComboBox.java 27 84
----------------------------------------
	public Map<File, File> getRenameMap() {
		Map<File, File> map = new LinkedHashMap<File, File>();

		for (int i = 0; i < names.size(); i++) {
			if (hasComplement(i)) {
				// make sure we're dealing with regular File objects form here on out
				File source = new File(files().get(i).getPath());

				FormattedFuture task = names.get(i);
				StringBuilder destination = new StringBuilder();

				// append formatted name, throw exception if not ready
				try {
					destination.append(task.get(0, TimeUnit.SECONDS));
				} catch (ExecutionException e) {
					throw new IllegalStateException(String.format("\"%s\" could not be formatted: %s.", task.preview(), e.getCause().getMessage()));
				} catch (TimeoutException e) {
					throw new IllegalStateException(String.format("\"%s\" has not been formatted yet.", task.preview()));
				} catch (InterruptedException e) {
					throw new RuntimeException(e);
				}

				// append extension, if desired
				if (preserveExtension) {
					String extension = getExtension(source);
					if (extension != null) {
						destination.append('.').append(extension.toLowerCase());
					}
				}

				// insert mapping
				if (map.put(source, new File(destination.toString())) != null) {
					throw new IllegalStateException("Duplicate source file: " + source.getName());
				}
			}
		}

		return map;
	}

----------------------------------------
	public LanguageComboBox(Language initialSelection, Settings settings) {
		super(new LanguageComboBoxModel(initialSelection, initialSelection));
		setRenderer(new LanguageComboBoxCellRenderer(super.getRenderer()));

		if (settings != null) {
			persistentSelectedLanguage = settings.entry("language.selected");
			persistentFavoriteLanguages = settings.node("language.favorites").asList();
		} else {
			persistentSelectedLanguage = new SimpleEntry<String, String>(null, null);
			persistentFavoriteLanguages = new ArrayList<String>();
		}

		// restore selected language
		try {
			getModel().setSelectedItem(Language.getLanguage(persistentSelectedLanguage.getValue()));
		} catch (Exception e) {
			getModel().setSelectedItem(LanguageComboBoxModel.ALL_LANGUAGES);
		}

		// restore favorite languages
		for (String favoriteLanguage : persistentFavoriteLanguages) {
			getModel().favorites().add(getModel().favorites().size(), getLanguage(favoriteLanguage));
		}

		// guess favorite languages
		if (getModel().favorites().isEmpty()) {
			for (Locale locale : new Locale[] { Locale.ENGLISH, Locale.getDefault() }) {
				getModel().favorites().add(getLanguage(locale.getLanguage()));
			}
		}

		// update favorites on change
		addPopupMenuListener(new PopupSelectionListener() {

			@Override
			public void itemStateChanged(ItemEvent e) {
				Language language = (Language) e.getItem();

				if (getModel().favorites().add(language)) {
					persistentFavoriteLanguages.clear();
					persistentFavoriteLanguages.addAll(new AbstractList<String>() {

						@Override
						public String get(int index) {
							return getModel().favorites().get(index).getCode();
						}

						@Override
						public int size() {
							return getModel().favorites().size();
						}
					});
				}

				persistentSelectedLanguage.setValue(language.getCode());
			}
		});
	}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
94
28917520
source/net/filebot/cli/FolderWatchService.java 130 135
source/net/filebot/ui/rename/RenameModel.java 224 245
----------------------------------------
			protected void processEvents(List<WatchEvent<?>> events) {
				synchronized (commitSet) {
					resetCommitTimer();
					super.processEvents(events);
				}
			}

----------------------------------------
					} else if (type == ListEvent.UPDATE) {
						// set new future, dispose old future
						FormattedFuture obsolete = futures.set(index, future);

						cancel(obsolete);

						// Don't update view immediately, to avoid irritating flickering,
						// caused by a rapid succession of change events.
						// The worker may only need a couple of milliseconds to complete,
						// so the view will be notified of the change soon enough.
						SwingUI.invokeLater(50, new Runnable() {

							@Override
							public void run() {
								// task has not been started, no change events have been sent as of yet,
								// fire change event now
								if (future.getState() == StateValue.PENDING) {
									future.firePropertyChange("state", null, StateValue.PENDING);
								}
							}
						});
					}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
94
28917521
source/net/filebot/format/ExpressionFormat.java 154 163
source/net/filebot/ui/rename/RenameModel.java 224 245
----------------------------------------
			if (snippet instanceof CompiledScript) {
				try {
					CharSequence value = normalizeExpressionValue(((CompiledScript) snippet).eval(context));
					if (value != null) {
						sb.append(value);
					}
				} catch (ScriptException e) {
					suppressed.add(normalizeExpressionException(e));
				}
			} else {

----------------------------------------
					} else if (type == ListEvent.UPDATE) {
						// set new future, dispose old future
						FormattedFuture obsolete = futures.set(index, future);

						cancel(obsolete);

						// Don't update view immediately, to avoid irritating flickering,
						// caused by a rapid succession of change events.
						// The worker may only need a couple of milliseconds to complete,
						// so the view will be notified of the change soon enough.
						SwingUI.invokeLater(50, new Runnable() {

							@Override
							public void run() {
								// task has not been started, no change events have been sent as of yet,
								// fire change event now
								if (future.getState() == StateValue.PENDING) {
									future.firePropertyChange("state", null, StateValue.PENDING);
								}
							}
						});
					}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
94
28917618
source/net/filebot/similarity/FileNameMetric.java 26 33
source/net/filebot/web/SimpleDate.java 64 75
----------------------------------------
	protected String getFileName(Object object) {
		if (object instanceof File) {
			// name without extension normalized to lower-case
			return getName((File) object).trim().toLowerCase();
		}

		return null;
	}

----------------------------------------
	public int compareTo(Object other) {
		if (other instanceof SimpleDate) {
			return compareTo((SimpleDate) other);
		} else if (other instanceof CharSequence) {
			SimpleDate otherDate = parse(other.toString());
			if (otherDate != null) {
				return compareTo(otherDate);
			}
		}

		throw new IllegalArgumentException(String.valueOf(other));
	}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
94
28917619
source/net/filebot/similarity/DateMetric.java 28 33
source/net/filebot/web/SimpleDate.java 64 75
----------------------------------------
	public SimpleDate parse(Object object) {
		if (object instanceof File) {
			return matcher.match((File) object);
		}
		return matcher.match(object.toString());
	}

----------------------------------------
	public int compareTo(Object other) {
		if (other instanceof SimpleDate) {
			return compareTo((SimpleDate) other);
		} else if (other instanceof CharSequence) {
			SimpleDate otherDate = parse(other.toString());
			if (otherDate != null) {
				return compareTo(otherDate);
			}
		}

		throw new IllegalArgumentException(String.valueOf(other));
	}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
94
28917522
source/net/filebot/ui/rename/RenameModel.java 343 358
source/net/filebot/web/SimpleDate.java 64 75
----------------------------------------
		public String toString() {
			if (isDone()) {
				try {
					return get(0, TimeUnit.SECONDS);
				} catch (Throwable t) {
					// find the original exception
					if (t.getCause() != null && t instanceof ExecutionException) {
						t = t.getCause();
					}
					return String.format("[%s] %s", getMessage(t), preview());
				}
			}

			// use preview if we are not ready yet
			return preview();
		}

----------------------------------------
	public int compareTo(Object other) {
		if (other instanceof SimpleDate) {
			return compareTo((SimpleDate) other);
		} else if (other instanceof CharSequence) {
			SimpleDate otherDate = parse(other.toString());
			if (otherDate != null) {
				return compareTo(otherDate);
			}
		}

		throw new IllegalArgumentException(String.valueOf(other));
	}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
94
28917621
source/net/filebot/web/OpenSubtitlesXmlRpc.java 74 83
source/net/filebot/web/SimpleDate.java 64 75
----------------------------------------
	public synchronized void logout() throws XmlRpcFault {
		try {
			invoke("LogOut", token);
		} catch (XmlRpcFault e) {
			// anonymous users will always get an 401 Unauthorized when trying to logout,
			// so we ignore the status of the logout response
		} finally {
			token = null;
		}
	}

----------------------------------------
	public int compareTo(Object other) {
		if (other instanceof SimpleDate) {
			return compareTo((SimpleDate) other);
		} else if (other instanceof CharSequence) {
			SimpleDate otherDate = parse(other.toString());
			if (otherDate != null) {
				return compareTo(otherDate);
			}
		}

		throw new IllegalArgumentException(String.valueOf(other));
	}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
94
28917523
source/net/filebot/ui/rename/RenameModel.java 343 358
source/net/filebot/format/ExpressionBindings.java 58 74
----------------------------------------
		public String toString() {
			if (isDone()) {
				try {
					return get(0, TimeUnit.SECONDS);
				} catch (Throwable t) {
					// find the original exception
					if (t.getCause() != null && t instanceof ExecutionException) {
						t = t.getCause();
					}
					return String.format("[%s] %s", getMessage(t), preview());
				}
			}

			// use preview if we are not ready yet
			return preview();
		}

----------------------------------------
		if (method != null) {
			try {
				Object value = method.invoke(bindingBean);
				if (!isUndefined(value)) {
					return value;
				}
				if (undefined != null) {
					return undefined.invoke(bindingBean, key); // invoke fallback method
				}
			} catch (Exception e) {
				// check InvocationTargetException cause
				if (e.getCause() instanceof BindingException) {
					throw (BindingException) e.getCause();
				}
				throw new BindingException(key.toString(), getRootCauseMessage(e), e);
			}
		}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
94
28917615
source/net/filebot/ui/list/ListItem.java 26 35
source/net/filebot/format/ExpressionBindings.java 58 74
----------------------------------------
	public Object getFormattedValue() {
		if (value == null) {
			try {
				value = format.format(bindings);
			} catch (Exception e) {
				value = e;
			}
		}
		return value;
	}

----------------------------------------
		if (method != null) {
			try {
				Object value = method.invoke(bindingBean);
				if (!isUndefined(value)) {
					return value;
				}
				if (undefined != null) {
					return undefined.invoke(bindingBean, key); // invoke fallback method
				}
			} catch (Exception e) {
				// check InvocationTargetException cause
				if (e.getCause() instanceof BindingException) {
					throw (BindingException) e.getCause();
				}
				throw new BindingException(key.toString(), getRootCauseMessage(e), e);
			}
		}

----------------------------------------
