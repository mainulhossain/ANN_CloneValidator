$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
96
22834636
net/sf/varscan/Trio.java 254 263
net/sf/varscan/FilterVariants.java 162 171
----------------------------------------
	    		try {
			    	Thread.sleep(5000);
			    	numNaps++;

			    	if(numNaps > 100)
			    	{
			    		System.err.println("Input file was not ready after 100 5-second cycles!");
			    		System.exit(10);
			    	}
		    	}

----------------------------------------
	    		try {
			    	Thread.sleep(5000);
			    	numNaps++;

			    	if(numNaps > 100)
			    	{
			    		System.err.println("Input file was not ready after 100 5-second cycles!");
			    		System.exit(10);
			    	}
		    	}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
96
22834744
net/sf/varscan/CopyCaller.java 187 195
net/sf/varscan/FilterVariants.java 162 171
----------------------------------------
	    		try {
			    	Thread.sleep(5000);
			    	numNaps++;
			    	if(numNaps > 100)
			    	{
			    		System.err.println("Input file was not ready after 100 5-second cycles!");
			    		System.exit(10);
			    	}
	    		}

----------------------------------------
	    		try {
			    	Thread.sleep(5000);
			    	numNaps++;

			    	if(numNaps > 100)
			    	{
			    		System.err.println("Input file was not ready after 100 5-second cycles!");
			    		System.exit(10);
			    	}
		    	}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
96
22834749
net/sf/varscan/Coverage.java 112 121
net/sf/varscan/FilterVariants.java 162 171
----------------------------------------
	    		try {
			    	Thread.sleep(5000);
			    	numNaps++;

			    	if(numNaps > 10)
			    	{
			    		System.err.println("Input file was not ready after 10 5-second cycles!");
			    		return;
			    	}
		    	}

----------------------------------------
	    		try {
			    	Thread.sleep(5000);
			    	numNaps++;

			    	if(numNaps > 100)
			    	{
			    		System.err.println("Input file was not ready after 100 5-second cycles!");
			    		System.exit(10);
			    	}
		    	}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
96
22834750
net/sf/varscan/VarScan.java 519 529
net/sf/varscan/FilterVariants.java 162 171
----------------------------------------
	    		{
	    			System.err.println("Input stream not ready, waiting for 5 seconds...");
	    			Thread.sleep(5000);
	    			num_naps++;

	    			if(num_naps >= 100)
	    			{
	    				System.err.println("ERROR: Gave up waiting after 500 seconds...\n");
	    				System.exit(10);
	    			}
	    		}

----------------------------------------
	    		try {
			    	Thread.sleep(5000);
			    	numNaps++;

			    	if(numNaps > 100)
			    	{
			    		System.err.println("Input file was not ready after 100 5-second cycles!");
			    		System.exit(10);
			    	}
		    	}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
96
22834745
net/sf/varscan/CallPileup.java 142 151
net/sf/varscan/FilterVariants.java 162 171
----------------------------------------
	    		try {
			    	Thread.sleep(5000);
			    	numNaps++;

			    	if(numNaps > 100)
			    	{
			    		System.err.println("Input file was not ready after 100 5-second cycles!");
			    		System.exit(10);
			    	}
		    	}

----------------------------------------
	    		try {
			    	Thread.sleep(5000);
			    	numNaps++;

			    	if(numNaps > 100)
			    	{
			    		System.err.println("Input file was not ready after 100 5-second cycles!");
			    		System.exit(10);
			    	}
		    	}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
96
22834752
net/sf/varscan/Copynumber.java 140 149
net/sf/varscan/FilterVariants.java 162 171
----------------------------------------
	    		try {
			    	Thread.sleep(5000);
			    	numNaps++;

			    	if(numNaps > 100)
			    	{
			    		System.err.println("Input file was not ready after 100 5-second cycles!");
			    		System.exit(10);
			    	}
		    	}

----------------------------------------
	    		try {
			    	Thread.sleep(5000);
			    	numNaps++;

			    	if(numNaps > 100)
			    	{
			    		System.err.println("Input file was not ready after 100 5-second cycles!");
			    		System.exit(10);
			    	}
		    	}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
96
22834747
net/sf/varscan/CallMpileup.java 234 243
net/sf/varscan/FilterVariants.java 162 171
----------------------------------------
	    		try {
			    	Thread.sleep(5000);
			    	numNaps++;

			    	if(numNaps > 100)
			    	{
			    		System.err.println("Input file was not ready after 100 5-second cycles!");
			    		System.exit(10);
			    	}
		    	}

----------------------------------------
	    		try {
			    	Thread.sleep(5000);
			    	numNaps++;

			    	if(numNaps > 100)
			    	{
			    		System.err.println("Input file was not ready after 100 5-second cycles!");
			    		System.exit(10);
			    	}
		    	}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
96
22834776
net/sf/varscan/ReadCounts.java 126 134
net/sf/varscan/FilterVariants.java 162 171
----------------------------------------
	    		try {
			    	Thread.sleep(5000);
			    	numNaps++;
			    	if(numNaps > 100)
			    	{
			    		System.err.println("Input file was not ready after 100 5-second cycles!");
			    		System.exit(10);
			    	}
	    		}

----------------------------------------
	    		try {
			    	Thread.sleep(5000);
			    	numNaps++;

			    	if(numNaps > 100)
			    	{
			    		System.err.println("Input file was not ready after 100 5-second cycles!");
			    		System.exit(10);
			    	}
		    	}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
96
22834748
net/sf/varscan/Somatic.java 256 265
net/sf/varscan/FilterVariants.java 162 171
----------------------------------------
	    		try {
			    	Thread.sleep(5000);
			    	numNaps++;

			    	if(numNaps > 100)
			    	{
			    		System.err.println("Input file was not ready after 100 5-second cycles!");
			    		System.exit(10);
			    	}
		    	}

----------------------------------------
	    		try {
			    	Thread.sleep(5000);
			    	numNaps++;

			    	if(numNaps > 100)
			    	{
			    		System.err.println("Input file was not ready after 100 5-second cycles!");
			    		System.exit(10);
			    	}
		    	}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
96
22834751
net/sf/varscan/ProcessSomatic.java 80 89
net/sf/varscan/FilterVariants.java 162 171
----------------------------------------
	    		try {
			    	Thread.sleep(5000);
			    	numNaps++;

			    	if(numNaps > 100)
			    	{
			    		System.err.println("Input file was not ready after 100 5-second cycles!");
			    		System.exit(10);
			    	}
		    	}

----------------------------------------
	    		try {
			    	Thread.sleep(5000);
			    	numNaps++;

			    	if(numNaps > 100)
			    	{
			    		System.err.println("Input file was not ready after 100 5-second cycles!");
			    		System.exit(10);
			    	}
		    	}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
96
22834746
net/sf/varscan/FilterSomatic.java 166 175
net/sf/varscan/FilterVariants.java 162 171
----------------------------------------
	    		try {
			    	Thread.sleep(5000);
			    	numNaps++;

			    	if(numNaps > 100)
			    	{
			    		System.err.println("Input file was not ready after 100 5-second cycles!");
			    		System.exit(10);
			    	}
		    	}

----------------------------------------
	    		try {
			    	Thread.sleep(5000);
			    	numNaps++;

			    	if(numNaps > 100)
			    	{
			    		System.err.println("Input file was not ready after 100 5-second cycles!");
			    		System.exit(10);
			    	}
		    	}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
96
22834643
net/sf/varscan/Somatic.java 374 635
net/sf/varscan/Somatic.java 1058 1391
----------------------------------------
			    			{
			    				// Get the alleles to determine type //
			    				String[] compareContents = compareResult.split("\t");
				    			String allele1 = compareContents[0];
				    			String allele2 = compareContents[1];

				    			double strandedness1 = 0.50;
				    			double strandedness2 = 0.50;
				    			double strandednessDiff = 0.00;

				    			if(compareContents.length >= 17)
				    			{
				    				try
				    				{
				    					int tumorReads1plus = Integer.parseInt(compareContents[13]);
				    					int tumorReads1minus = Integer.parseInt(compareContents[14]);
				    					int tumorReads2plus = Integer.parseInt(compareContents[15]);
				    					int tumorReads2minus = Integer.parseInt(compareContents[16]);

				    					if(tumorReads1plus > 0 || tumorReads1minus > 0)
				    					{
				    						strandedness1 = (double) tumorReads1plus / (double) (tumorReads1plus + tumorReads1minus);
				    					}

				    					if(tumorReads2plus > 0 || tumorReads2minus > 0)
				    					{
				    						strandedness2 = (double) tumorReads2plus / (double) (tumorReads2plus + tumorReads2minus);
				    						if(tumorReads1plus > 0 || tumorReads1minus > 0)
				    						{
				    							strandednessDiff = java.lang.Math.abs(strandedness1 - strandedness2);
				    						}
				    					}
				    				}
				    				catch(Exception e)
				    				{
				    					// Exception parsing info from compareResult //
				    				}
				    			}

			    				//stats.put("comparedPositions", (stats.get("comparedPositions") + 1));
				    			comparedPositions++;

			    				if(params.containsKey("verbose") && !compareResult.contains("Reference"))
			    					System.err.println(chromNormal + "\t" + posNormal + "\t" + compareResult);

			    				// If VCF format specified, supply it //

			    				if(params.containsKey("output-vcf"))
			    				{
			    					int normalReads1 = Integer.parseInt(compareContents[2]);
			    					int normalReads2 = Integer.parseInt(compareContents[3]);
			    					String normalFreq = compareContents[4];
			    					String normalCall = compareContents[5];
			    					int tumorReads1 = Integer.parseInt(compareContents[6]);
			    					int tumorReads2 = Integer.parseInt(compareContents[7]);
			    					String tumorFreq = compareContents[8];
			    					String tumorCall = compareContents[9];
			    					String somStatus = compareContents[10];
			    					Double germlineP = Double.parseDouble(compareContents[11]);
			    					Double somaticP = Double.parseDouble(compareContents[12]);

			    					int totalDepth = pileupDepthNormal + pileupDepthTumor;

			    					if(allele2.startsWith("+"))
			    					{
			    						// INSERTION //
			    						// Ref = ref base; Var = ref base followed by inserted bases //
			    						String varColumn = allele1 + allele2.replace("+", "");
			    						compareResult = "." + "\t" + allele1 + "\t" + varColumn + "\t" + ".";
			    					}
			    					else if(allele2.startsWith("-"))
			    					{
			    						// DELETION //
			    						// Ref = ref base followed by deleted bases; var = ref base //
			    						String refColumn = allele1 + allele2.replace("-", "");
			    						compareResult = "." + "\t" + refColumn + "\t" + allele1 + "\t" + ".";
			    					}
			    					else
			    					{
				    					compareResult = "." + "\t" + allele1 + "\t" + allele2 + "\t" + ".";
			    					}


			    					// Decide on filter field //
			    					if(doStrandFilter && strandednessDiff > 0.10 && (strandedness2 < 0.10 || strandedness2 > 0.90))
			    					{
			    						compareResult += "\t" + "str10";
			    					}
			    					else if(somStatus.equals("IndelFilter"))
			    					{
			    						compareResult += "\t" + "indelError";
			    					}
			    					else
			    					{
			    						compareResult += "\t" + "PASS";
			    					}

			    					// Determine somatic status id and score //
			    					int ssCode = 0;
			    					double somScore = 0;

			    					if(somStatus.equals("Reference"))
			    					{
			    						// Wildtype //
			    						ssCode = 0;
			    						calledReference++;
			    					}
			    					else if(somStatus.equals("Germline"))
			    					{
			    						// Germline //
			    						ssCode = 1;
			    						calledGermline++;
			    						if(somaticP == 0)
			    						{
			    							somScore = 0;
			    						}
			    						else
			    						{
			    							somScore = 0 - (10 * java.lang.Math.log10(somaticP));
			    						}
			    					}
			    					else if(somStatus.equals("Somatic"))
			    					{
			    						// Somatic //
			    						ssCode = 2;
			    						calledSomatic++;
			    						if(somaticP == 0)
			    						{
			    							somScore = 255;
			    						}
			    						else
			    						{
			    							somScore = 0 - (10 * java.lang.Math.log10(somaticP));
			    						}
			    					}
			    					else if(somStatus.equals("LOH"))
			    					{
			    						// LOH //
			    						ssCode = 3;
			    						calledLOH++;
			    						if(somaticP == 0)
			    						{
			    							somScore = 255;
			    						}
			    						else
			    						{
			    							somScore = 0 - (10 * java.lang.Math.log10(somaticP));
			    						}
			    					}
			    					else
			    					{
			    						// Unknown //
			    						calledUnknown++;
			    						ssCode = 5;
			    					}

			    					// Adjust somatic score //
			    					if(somScore > 255)
			    						somScore = 255;

			    					// Print the info field //

			    					compareResult += "\t" + "DP=" + totalDepth;
			    					if(somStatus.equals("Somatic"))
			    						compareResult += ";SOMATIC";
			    					compareResult += ";" + "SS=" + ssCode;
			    					compareResult += ";" + "SSC=" + (int) somScore;
			    					compareResult += ";" + "GPV=" + pvalueFormat.format(germlineP);
			    					compareResult += ";" + "SPV=" + pvalueFormat.format(somaticP);

			    					// Print the format field //

			    					String tumorDP4 = "";
			    					String normalDP4 = "";

					    			if(compareContents.length >= 17)
					    			{
					    				try
					    				{
					    					tumorDP4 = compareContents[13] + "," + compareContents[14] + "," + compareContents[15] + "," + compareContents[16];
					    					normalDP4 = compareContents[17] + "," + compareContents[18] + "," + compareContents[19] + "," + compareContents[20];
					    				}
					    				catch(Exception e)
					    				{
					    					// Exception parsing info from compareResult //
					    					tumorDP4 = "";
					    					normalDP4 = "";
					    				}
					    			}

					    			if(tumorDP4.length() > 0)
					    				compareResult += "\tGT:GQ:DP:RD:AD:FREQ:DP4";
					    			else
					    				compareResult += "\tGT:GQ:DP:RD:AD:FREQ";

			    					// Determine normal genotype //
			    					String normalGt = ".";
			    					String tumorGt = ".";
			    					if(normalCall.equals(refBase))
			    					{
			    						normalGt = "0/0";
			    					}
			    					else if(VarScan.isHeterozygous(normalCall))
			    					{
			    						normalGt = "0/1";
			    					}
			    					else
			    					{
			    						normalGt = "1/1";
			    					}

			    					if(tumorCall.equals(refBase))
			    					{
			    						tumorGt = "0/0";
			    					}
			    					else if(VarScan.isHeterozygous(tumorCall))
			    					{
			    						tumorGt = "0/1";
			    					}
			    					else
			    					{
			    						tumorGt = "1/1";
			    					}

			    					if(tumorDP4.length() > 0)
			    					{
				    					compareResult += "\t" + normalGt + ":.:" + pileupDepthNormal + ":" + normalReads1 + ":" + normalReads2 + ":" + normalFreq + ":" + normalDP4;
				    					compareResult += "\t" + tumorGt + ":.:" + pileupDepthTumor + ":" + tumorReads1 + ":" + tumorReads2 + ":" + tumorFreq + ":" + tumorDP4;
			    					}
			    					else
			    					{
				    					compareResult += "\t" + normalGt + ":.:" + pileupDepthNormal + ":" + normalReads1 + ":" + normalReads2 + ":" + normalFreq;
				    					compareResult += "\t" + tumorGt + ":.:" + pileupDepthTumor + ":" + tumorReads1 + ":" + tumorReads2 + ":" + tumorFreq;
			    					}
			    				}

			    				// Print to master file for validation //

			    				if(params.containsKey("validation"))
			    				{
			    					outValidation.println(chromNormal + "\t" + posNormal + "\t" + compareResult);
			    				}

			    				if(!params.containsKey("validation") && (compareResult.contains("Reference") || compareResult.contains("SS=0")  || compareResult.contains("Filter")))
			    				{
			    					// Don't print reference/indelfilter positions unless doing validation //
			    				}
			    				else if(doStrandFilter && strandednessDiff > 0.10 && (strandedness2 < 0.10 || strandedness2 > 0.90))
			    				{
			    					// If filter is set, ignore variants that are supported largely by one strand //
			    					if(!params.containsKey("output-vcf"))
			    						compareResult = "StrandFilter";
			    				}
			    				else if(allele1.contains("-") || allele1.contains("+") || allele2.contains("-") || allele2.contains("+"))//if(compareResult.contains("INS") || compareResult.contains("DEL"))
			    				{
			    					outIndel.println(chromNormal + "\t" + posNormal + "\t" + compareResult);
			    				}
			    				else
			    				{
				    				outSnp.println(chromNormal + "\t" + posNormal + "\t" + compareResult);
			    				}
			    			}

----------------------------------------
		    	{
		    		normalWasReset = false;
		    		// Seek to matching Normal Position //

		    		while(chromNormal.equals(chromTumor) && posNormal < posTumor && ((lineNormal = normal.readLine()) != null))
		    		{
		    			String[] normalContents = lineNormal.split("\t");
				    	if(normalContents.length > 1)
				    	{
					    	chromNormal = normalContents[0];
					    	posNormal = Integer.parseInt(normalContents[1]);
				    	}
		    		}

		    		// Seek to matching Tumor Position //

		    		while(chromNormal.equals(chromTumor) && posTumor < posNormal && ((lineTumor = tumor.readLine()) != null))
		    		{
		    			tumorContents = lineTumor.split("\t");
				    	if(tumorContents.length > 1)
				    	{
					    	chromTumor = tumorContents[0];
					    	posTumor = Integer.parseInt(tumorContents[1]);
				    	}
		    		}

		    		// Proceed if normal and tumor positions match //

		    		if(chromNormal.equals(chromTumor) && chromNormal.equals(chromTumor) && posNormal == posTumor)
		    		{
		    			//stats.put("sharedPositions", (stats.get("sharedPositions") + 1));
		    			sharedPositions++;
		    			if(params.containsKey("verbose"))
		    					System.err.println("Comparing calls at " + chromTumor + ":" + posTumor);

		    			refBase = tumorContents[2];
		    			String compareResult = comparePositions(lineNormal, lineTumor, minCoverage, minReads2, minVarFreq, minAvgQual, pValueThreshold, somaticPvalue, minFreqForHom, normalPurity, tumorPurity);

		    			if(compareResult.length() > 0)
		    			{
		    				// Get the alleles to determine type //
		    				String[] compareContents = compareResult.split("\t");
			    			String allele1 = compareContents[0];
			    			String allele2 = compareContents[1];

			    			double strandedness1 = 0.50;
			    			double strandedness2 = 0.50;
			    			double strandednessDiff = 0.00;

			    			if(compareContents.length >= 17)
			    			{
			    				try
			    				{
			    					int tumorReads1plus = Integer.parseInt(compareContents[13]);
			    					int tumorReads1minus = Integer.parseInt(compareContents[14]);
			    					int tumorReads2plus = Integer.parseInt(compareContents[15]);
			    					int tumorReads2minus = Integer.parseInt(compareContents[16]);

			    					if(tumorReads1plus > 0 || tumorReads1minus > 0)
			    					{
			    						strandedness1 = (double) tumorReads1plus / (double) (tumorReads1plus + tumorReads1minus);
			    					}

			    					if(tumorReads2plus > 0 || tumorReads2minus > 0)
			    					{
			    						strandedness2 = (double) tumorReads2plus / (double) (tumorReads2plus + tumorReads2minus);
			    						if(tumorReads1plus > 0 || tumorReads1minus > 0)
			    						{
			    							strandednessDiff = java.lang.Math.abs(strandedness1 - strandedness2);
			    						}
			    					}
			    				}
			    				catch(Exception e)
			    				{
			    					// Exception parsing info from compareResult //
			    				}
			    			}

		    				//stats.put("comparedPositions", (stats.get("comparedPositions") + 1));
			    			comparedPositions++;

		    				if(params.containsKey("verbose") && !compareResult.contains("Reference"))
		    					System.err.println(chromNormal + "\t" + posNormal + "\t" + compareResult);

		    				// If VCF format specified, supply it //

		    				if(params.containsKey("output-vcf"))
		    				{
		    					int normalReads1 = Integer.parseInt(compareContents[2]);
		    					int normalReads2 = Integer.parseInt(compareContents[3]);
		    					String normalFreq = compareContents[4];
		    					String normalCall = compareContents[5];
		    					int tumorReads1 = Integer.parseInt(compareContents[6]);
		    					int tumorReads2 = Integer.parseInt(compareContents[7]);
		    					String tumorFreq = compareContents[8];
		    					String tumorCall = compareContents[9];
		    					String somStatus = compareContents[10];
		    					Double germlineP = Double.parseDouble(compareContents[11]);
		    					Double somaticP = Double.parseDouble(compareContents[12]);

		    					String[] normalContents = lineNormal.split("\t");
		    					//tumorContents = lineTumor.split("\t");
		    					int pileupDepthNormal = Integer.parseInt(normalContents[3]);
		    					int pileupDepthTumor = Integer.parseInt(tumorContents[3]);

		    					int totalDepth = pileupDepthNormal + pileupDepthTumor;

		    					if(allele2.startsWith("+"))
		    					{
		    						// INSERTION //
		    						// Ref = ref base; Var = ref base followed by inserted bases //
		    						String varColumn = allele1 + allele2.replace("+", "");
		    						compareResult = "." + "\t" + allele1 + "\t" + varColumn + "\t" + ".";
		    					}
		    					else if(allele2.startsWith("-"))
		    					{
		    						// DELETION //
		    						// Ref = ref base followed by deleted bases; var = ref base //
		    						String refColumn = allele1 + allele2.replace("-", "");
		    						compareResult = "." + "\t" + refColumn + "\t" + allele1 + "\t" + ".";
		    					}
		    					else
		    					{
			    					compareResult = "." + "\t" + allele1 + "\t" + allele2 + "\t" + ".";
		    					}


		    					// Decide on filter field //
		    					if(params.containsKey("strand-filter") && strandednessDiff > 0.10 && (strandedness2 < 0.10 || strandedness2 > 0.90))
		    					{
		    						compareResult += "\t" + "str10";
		    					}
		    					else if(somStatus.equals("IndelFilter"))
		    					{
		    						compareResult += "\t" + "indelError";
		    					}
		    					else
		    					{
		    						compareResult += "\t" + "PASS";
		    					}

		    					// Determine somatic status id and score //
		    					int ssCode = 0;
		    					double somScore = 0;

		    					if(somStatus.equals("Reference"))
		    					{
		    						// Wildtype //
		    						ssCode = 0;
		    						calledReference++;
		    					}
		    					else if(somStatus.equals("Germline"))
		    					{
		    						// Germline //
		    						ssCode = 1;
		    						calledGermline++;
		    						if(somaticP == 0)
		    						{
		    							somScore = 0;
		    						}
		    						else
		    						{
		    							somScore = 0 - (10 * java.lang.Math.log10(somaticP));
		    						}
		    					}
		    					else if(somStatus.equals("Somatic"))
		    					{
		    						// Somatic //
		    						ssCode = 2;
		    						calledSomatic++;
		    						if(somaticP == 0)
		    						{
		    							somScore = 255;
		    						}
		    						else
		    						{
		    							somScore = 0 - (10 * java.lang.Math.log10(somaticP));
		    						}
		    					}
		    					else if(somStatus.equals("LOH"))
		    					{
		    						// LOH //
		    						ssCode = 3;
		    						calledLOH++;
		    						if(somaticP == 0)
		    						{
		    							somScore = 255;
		    						}
		    						else
		    						{
		    							somScore = 0 - (10 * java.lang.Math.log10(somaticP));
		    						}
		    					}
		    					else
		    					{
		    						// Unknown //
		    						calledUnknown++;
		    						ssCode = 5;
		    					}

		    					// Adjust somatic score //
		    					if(somScore > 255)
		    						somScore = 255;

		    					// Print the info field //

		    					compareResult += "\t" + "DP=" + totalDepth;
		    					if(somStatus.equals("Somatic"))
		    						compareResult += ";SOMATIC";
		    					compareResult += ";" + "SS=" + ssCode;
		    					compareResult += ";" + "SSC=" + (int) somScore;
		    					compareResult += ";" + "GPV=" + pvalueFormat.format(germlineP);
		    					compareResult += ";" + "SPV=" + pvalueFormat.format(somaticP);

		    					// Print the format field //

		    					String tumorDP4 = "";
		    					String normalDP4 = "";

				    			if(compareContents.length >= 17)
				    			{
				    				try
				    				{
				    					tumorDP4 = compareContents[13] + "," + compareContents[14] + "," + compareContents[15] + "," + compareContents[16];
				    					normalDP4 = compareContents[17] + "," + compareContents[18] + "," + compareContents[19] + "," + compareContents[20];
				    				}
				    				catch(Exception e)
				    				{
				    					// Exception parsing info from compareResult //
				    					tumorDP4 = "";
				    					normalDP4 = "";
				    				}
				    			}

				    			if(tumorDP4.length() > 0)
				    				compareResult += "\tGT:GQ:DP:RD:AD:FREQ:DP4";
				    			else
				    				compareResult += "\tGT:GQ:DP:RD:AD:FREQ";

		    					// Determine normal genotype //
		    					String normalGt = ".";
		    					String tumorGt = ".";
		    					if(normalCall.equals(refBase))
		    					{
		    						normalGt = "0/0";
		    					}
		    					else if(VarScan.isHeterozygous(normalCall))
		    					{
		    						normalGt = "0/1";
		    					}
		    					else
		    					{
		    						normalGt = "1/1";
		    					}

		    					if(tumorCall.equals(refBase))
		    					{
		    						tumorGt = "0/0";
		    					}
		    					else if(VarScan.isHeterozygous(tumorCall))
		    					{
		    						tumorGt = "0/1";
		    					}
		    					else
		    					{
		    						tumorGt = "1/1";
		    					}

		    					if(tumorDP4.length() > 0)
		    					{
			    					compareResult += "\t" + normalGt + ":.:" + pileupDepthNormal + ":" + normalReads1 + ":" + normalReads2 + ":" + normalFreq + ":" + normalDP4;
			    					compareResult += "\t" + tumorGt + ":.:" + pileupDepthTumor + ":" + tumorReads1 + ":" + tumorReads2 + ":" + tumorFreq + ":" + tumorDP4;
		    					}
		    					else
		    					{
			    					compareResult += "\t" + normalGt + ":.:" + pileupDepthNormal + ":" + normalReads1 + ":" + normalReads2 + ":" + normalFreq;
			    					compareResult += "\t" + tumorGt + ":.:" + pileupDepthTumor + ":" + tumorReads1 + ":" + tumorReads2 + ":" + tumorFreq;
		    					}
		    				}
		    				// Print to master file for validation //

		    				if(params.containsKey("validation"))
		    				{
		    					outValidation.println(chromNormal + "\t" + posNormal + "\t" + compareResult);
		    				}

		    				if(!params.containsKey("validation") && (compareResult.contains("Reference") || compareResult.contains("SS=0") || compareResult.contains("Filter")))
		    				{
		    					// Don't print reference/indelfilter positions unless doing validation //
		    				}
		    				else if(params.containsKey("strand-filter") && strandednessDiff > 0.10 && (strandedness2 < 0.10 || strandedness2 > 0.90))
		    				{
		    					// If filter is set, ignore variants that are supported largely by one strand //
		    					compareResult = "StrandFilter";
		    				}
		    				else if(allele1.contains("-") || allele1.contains("+") || allele2.contains("-") || allele2.contains("+"))//if(compareResult.contains("INS") || compareResult.contains("DEL"))
		    				{
		    					outIndel.println(chromNormal + "\t" + posNormal + "\t" + compareResult);
		    				}
		    				else
		    				{
			    				outSnp.println(chromNormal + "\t" + posNormal + "\t" + compareResult);
		    				}
		    			}
		    			else
		    			{
//		    				System.err.println("Uncalled" + chromNormal + "\t" + posNormal + "\t" + compareResult);
		    			}

		    			if(compareResult.contains("Reference"))
		    				calledReference++; //stats.put("calledReference", (stats.get("calledReference") + 1));
		    			else if(compareResult.contains("IndelFilter"))
		    				indelFilter++;	//stats.put("indelFilter", (stats.get("indelFilter") + 1));
		    			else if(compareResult.contains("StrandFilter"))
		    				strandFilter++;
		    			else if(compareResult.contains("Germline"))
		    				calledGermline++;	//stats.put("calledGermline", (stats.get("calledGermline") + 1));
		    			else if(compareResult.contains("Somatic"))
		    				calledSomatic++;	//stats.put("calledSomatic", (stats.get("calledSomatic") + 1));
		    			else if(compareResult.contains("LOH"))
		    				calledLOH++;	//stats.put("calledLOH", (stats.get("calledLOH") + 1));
		    			else if(compareResult.contains("Unknown"))
		    				calledUnknown++;	//stats.put("calledUnknown", (stats.get("calledUnknown") + 1));
		    			else if(compareResult.contains("Variant"))
		    				calledVariant++;	//stats.put("calledVariant", (stats.get("calledVariant") + 1));

				    	prevChromNormal = chromNormal;
				    	prevChromTumor = chromTumor;
		    		}
		    		else
		    		{
		    			//System.err.println("Failed to match positions " + chromNormal + " " + posNormal + " to Tumor " + chromTumor + " " + posTumor);
		    		}
		    	}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
96
22834642
net/sf/varscan/Somatic.java 343 660
net/sf/varscan/Somatic.java 1058 1391
----------------------------------------
	    				{
	    					sharedPositions++;

	    					// Parse common fields from line //
	    					String refName = lineContents[0];
	    					int position = Integer.parseInt(lineContents[1]);
	    					refBase = lineContents[2].toUpperCase();

	    					chromNormal = refName;
	    					chromTumor = refName;
	    					posNormal = position;
	    					posTumor = position;

	    					// Parse normal, which should be first sample //
	    					int normalOffset = 3;
	    					int pileupDepthNormal = Integer.parseInt(lineContents[normalOffset]);
		    	        	String normalBases = lineContents[normalOffset + 1];
		    	        	String normalQualities = lineContents[normalOffset + 2];

	    					// Parse tumor, which should be second sample //
	    					int tumorOffset = 6;
	    					int pileupDepthTumor = Integer.parseInt(lineContents[tumorOffset]);
		    	        	String tumorBases = lineContents[tumorOffset + 1];
		    	        	String tumorQualities = lineContents[tumorOffset + 2];

	    					lineNormal = refName + "\t" + position + "\t" + refBase + "\t" + pileupDepthNormal + "\t" + normalBases + "\t" + normalQualities;
	    					lineTumor = refName + "\t" + position + "\t" + refBase + "\t" + pileupDepthTumor + "\t" + tumorBases + "\t" + tumorQualities;

	    					String compareResult = comparePositions(lineNormal, lineTumor, minCoverage, minReads2, minVarFreq, minAvgQual, pValueThreshold, somaticPvalue, minFreqForHom, normalPurity, tumorPurity);

			    			if(compareResult.length() > 0)
			    			{
			    				// Get the alleles to determine type //
			    				String[] compareContents = compareResult.split("\t");
				    			String allele1 = compareContents[0];
				    			String allele2 = compareContents[1];

				    			double strandedness1 = 0.50;
				    			double strandedness2 = 0.50;
				    			double strandednessDiff = 0.00;

				    			if(compareContents.length >= 17)
				    			{
				    				try
				    				{
				    					int tumorReads1plus = Integer.parseInt(compareContents[13]);
				    					int tumorReads1minus = Integer.parseInt(compareContents[14]);
				    					int tumorReads2plus = Integer.parseInt(compareContents[15]);
				    					int tumorReads2minus = Integer.parseInt(compareContents[16]);

				    					if(tumorReads1plus > 0 || tumorReads1minus > 0)
				    					{
				    						strandedness1 = (double) tumorReads1plus / (double) (tumorReads1plus + tumorReads1minus);
				    					}

				    					if(tumorReads2plus > 0 || tumorReads2minus > 0)
				    					{
				    						strandedness2 = (double) tumorReads2plus / (double) (tumorReads2plus + tumorReads2minus);
				    						if(tumorReads1plus > 0 || tumorReads1minus > 0)
				    						{
				    							strandednessDiff = java.lang.Math.abs(strandedness1 - strandedness2);
				    						}
				    					}
				    				}
				    				catch(Exception e)
				    				{
				    					// Exception parsing info from compareResult //
				    				}
				    			}

			    				//stats.put("comparedPositions", (stats.get("comparedPositions") + 1));
				    			comparedPositions++;

			    				if(params.containsKey("verbose") && !compareResult.contains("Reference"))
			    					System.err.println(chromNormal + "\t" + posNormal + "\t" + compareResult);

			    				// If VCF format specified, supply it //

			    				if(params.containsKey("output-vcf"))
			    				{
			    					int normalReads1 = Integer.parseInt(compareContents[2]);
			    					int normalReads2 = Integer.parseInt(compareContents[3]);
			    					String normalFreq = compareContents[4];
			    					String normalCall = compareContents[5];
			    					int tumorReads1 = Integer.parseInt(compareContents[6]);
			    					int tumorReads2 = Integer.parseInt(compareContents[7]);
			    					String tumorFreq = compareContents[8];
			    					String tumorCall = compareContents[9];
			    					String somStatus = compareContents[10];
			    					Double germlineP = Double.parseDouble(compareContents[11]);
			    					Double somaticP = Double.parseDouble(compareContents[12]);

			    					int totalDepth = pileupDepthNormal + pileupDepthTumor;

			    					if(allele2.startsWith("+"))
			    					{
			    						// INSERTION //
			    						// Ref = ref base; Var = ref base followed by inserted bases //
			    						String varColumn = allele1 + allele2.replace("+", "");
			    						compareResult = "." + "\t" + allele1 + "\t" + varColumn + "\t" + ".";
			    					}
			    					else if(allele2.startsWith("-"))
			    					{
			    						// DELETION //
			    						// Ref = ref base followed by deleted bases; var = ref base //
			    						String refColumn = allele1 + allele2.replace("-", "");
			    						compareResult = "." + "\t" + refColumn + "\t" + allele1 + "\t" + ".";
			    					}
			    					else
			    					{
				    					compareResult = "." + "\t" + allele1 + "\t" + allele2 + "\t" + ".";
			    					}


			    					// Decide on filter field //
			    					if(doStrandFilter && strandednessDiff > 0.10 && (strandedness2 < 0.10 || strandedness2 > 0.90))
			    					{
			    						compareResult += "\t" + "str10";
			    					}
			    					else if(somStatus.equals("IndelFilter"))
			    					{
			    						compareResult += "\t" + "indelError";
			    					}
			    					else
			    					{
			    						compareResult += "\t" + "PASS";
			    					}

			    					// Determine somatic status id and score //
			    					int ssCode = 0;
			    					double somScore = 0;

			    					if(somStatus.equals("Reference"))
			    					{
			    						// Wildtype //
			    						ssCode = 0;
			    						calledReference++;
			    					}
			    					else if(somStatus.equals("Germline"))
			    					{
			    						// Germline //
			    						ssCode = 1;
			    						calledGermline++;
			    						if(somaticP == 0)
			    						{
			    							somScore = 0;
			    						}
			    						else
			    						{
			    							somScore = 0 - (10 * java.lang.Math.log10(somaticP));
			    						}
			    					}
			    					else if(somStatus.equals("Somatic"))
			    					{
			    						// Somatic //
			    						ssCode = 2;
			    						calledSomatic++;
			    						if(somaticP == 0)
			    						{
			    							somScore = 255;
			    						}
			    						else
			    						{
			    							somScore = 0 - (10 * java.lang.Math.log10(somaticP));
			    						}
			    					}
			    					else if(somStatus.equals("LOH"))
			    					{
			    						// LOH //
			    						ssCode = 3;
			    						calledLOH++;
			    						if(somaticP == 0)
			    						{
			    							somScore = 255;
			    						}
			    						else
			    						{
			    							somScore = 0 - (10 * java.lang.Math.log10(somaticP));
			    						}
			    					}
			    					else
			    					{
			    						// Unknown //
			    						calledUnknown++;
			    						ssCode = 5;
			    					}

			    					// Adjust somatic score //
			    					if(somScore > 255)
			    						somScore = 255;

			    					// Print the info field //

			    					compareResult += "\t" + "DP=" + totalDepth;
			    					if(somStatus.equals("Somatic"))
			    						compareResult += ";SOMATIC";
			    					compareResult += ";" + "SS=" + ssCode;
			    					compareResult += ";" + "SSC=" + (int) somScore;
			    					compareResult += ";" + "GPV=" + pvalueFormat.format(germlineP);
			    					compareResult += ";" + "SPV=" + pvalueFormat.format(somaticP);

			    					// Print the format field //

			    					String tumorDP4 = "";
			    					String normalDP4 = "";

					    			if(compareContents.length >= 17)
					    			{
					    				try
					    				{
					    					tumorDP4 = compareContents[13] + "," + compareContents[14] + "," + compareContents[15] + "," + compareContents[16];
					    					normalDP4 = compareContents[17] + "," + compareContents[18] + "," + compareContents[19] + "," + compareContents[20];
					    				}
					    				catch(Exception e)
					    				{
					    					// Exception parsing info from compareResult //
					    					tumorDP4 = "";
					    					normalDP4 = "";
					    				}
					    			}

					    			if(tumorDP4.length() > 0)
					    				compareResult += "\tGT:GQ:DP:RD:AD:FREQ:DP4";
					    			else
					    				compareResult += "\tGT:GQ:DP:RD:AD:FREQ";

			    					// Determine normal genotype //
			    					String normalGt = ".";
			    					String tumorGt = ".";
			    					if(normalCall.equals(refBase))
			    					{
			    						normalGt = "0/0";
			    					}
			    					else if(VarScan.isHeterozygous(normalCall))
			    					{
			    						normalGt = "0/1";
			    					}
			    					else
			    					{
			    						normalGt = "1/1";
			    					}

			    					if(tumorCall.equals(refBase))
			    					{
			    						tumorGt = "0/0";
			    					}
			    					else if(VarScan.isHeterozygous(tumorCall))
			    					{
			    						tumorGt = "0/1";
			    					}
			    					else
			    					{
			    						tumorGt = "1/1";
			    					}

			    					if(tumorDP4.length() > 0)
			    					{
				    					compareResult += "\t" + normalGt + ":.:" + pileupDepthNormal + ":" + normalReads1 + ":" + normalReads2 + ":" + normalFreq + ":" + normalDP4;
				    					compareResult += "\t" + tumorGt + ":.:" + pileupDepthTumor + ":" + tumorReads1 + ":" + tumorReads2 + ":" + tumorFreq + ":" + tumorDP4;
			    					}
			    					else
			    					{
				    					compareResult += "\t" + normalGt + ":.:" + pileupDepthNormal + ":" + normalReads1 + ":" + normalReads2 + ":" + normalFreq;
				    					compareResult += "\t" + tumorGt + ":.:" + pileupDepthTumor + ":" + tumorReads1 + ":" + tumorReads2 + ":" + tumorFreq;
			    					}
			    				}

			    				// Print to master file for validation //

			    				if(params.containsKey("validation"))
			    				{
			    					outValidation.println(chromNormal + "\t" + posNormal + "\t" + compareResult);
			    				}

			    				if(!params.containsKey("validation") && (compareResult.contains("Reference") || compareResult.contains("SS=0")  || compareResult.contains("Filter")))
			    				{
			    					// Don't print reference/indelfilter positions unless doing validation //
			    				}
			    				else if(doStrandFilter && strandednessDiff > 0.10 && (strandedness2 < 0.10 || strandedness2 > 0.90))
			    				{
			    					// If filter is set, ignore variants that are supported largely by one strand //
			    					if(!params.containsKey("output-vcf"))
			    						compareResult = "StrandFilter";
			    				}
			    				else if(allele1.contains("-") || allele1.contains("+") || allele2.contains("-") || allele2.contains("+"))//if(compareResult.contains("INS") || compareResult.contains("DEL"))
			    				{
			    					outIndel.println(chromNormal + "\t" + posNormal + "\t" + compareResult);
			    				}
			    				else
			    				{
				    				outSnp.println(chromNormal + "\t" + posNormal + "\t" + compareResult);
			    				}
			    			}
			    			else
			    			{
//			    				System.err.println("Uncalled" + chromNormal + "\t" + posNormal + "\t" + compareResult);
			    			}

			    			if(compareResult.contains("Reference"))
			    				calledReference++; //stats.put("calledReference", (stats.get("calledReference") + 1));
			    			else if(compareResult.contains("IndelFilter"))
			    				indelFilter++;	//stats.put("indelFilter", (stats.get("indelFilter") + 1));
			    			else if(compareResult.contains("StrandFilter"))
			    				strandFilter++;
			    			else if(compareResult.contains("Germline"))
			    				calledGermline++;	//stats.put("calledGermline", (stats.get("calledGermline") + 1));
			    			else if(compareResult.contains("Somatic"))
			    				calledSomatic++;	//stats.put("calledSomatic", (stats.get("calledSomatic") + 1));
			    			else if(compareResult.contains("LOH"))
			    				calledLOH++;	//stats.put("calledLOH", (stats.get("calledLOH") + 1));
			    			else if(compareResult.contains("Unknown"))
			    				calledUnknown++;	//stats.put("calledUnknown", (stats.get("calledUnknown") + 1));
			    			else if(compareResult.contains("Variant"))
			    				calledVariant++;	//stats.put("calledVariant", (stats.get("calledVariant") + 1));



	    				}

----------------------------------------
		    	{
		    		normalWasReset = false;
		    		// Seek to matching Normal Position //

		    		while(chromNormal.equals(chromTumor) && posNormal < posTumor && ((lineNormal = normal.readLine()) != null))
		    		{
		    			String[] normalContents = lineNormal.split("\t");
				    	if(normalContents.length > 1)
				    	{
					    	chromNormal = normalContents[0];
					    	posNormal = Integer.parseInt(normalContents[1]);
				    	}
		    		}

		    		// Seek to matching Tumor Position //

		    		while(chromNormal.equals(chromTumor) && posTumor < posNormal && ((lineTumor = tumor.readLine()) != null))
		    		{
		    			tumorContents = lineTumor.split("\t");
				    	if(tumorContents.length > 1)
				    	{
					    	chromTumor = tumorContents[0];
					    	posTumor = Integer.parseInt(tumorContents[1]);
				    	}
		    		}

		    		// Proceed if normal and tumor positions match //

		    		if(chromNormal.equals(chromTumor) && chromNormal.equals(chromTumor) && posNormal == posTumor)
		    		{
		    			//stats.put("sharedPositions", (stats.get("sharedPositions") + 1));
		    			sharedPositions++;
		    			if(params.containsKey("verbose"))
		    					System.err.println("Comparing calls at " + chromTumor + ":" + posTumor);

		    			refBase = tumorContents[2];
		    			String compareResult = comparePositions(lineNormal, lineTumor, minCoverage, minReads2, minVarFreq, minAvgQual, pValueThreshold, somaticPvalue, minFreqForHom, normalPurity, tumorPurity);

		    			if(compareResult.length() > 0)
		    			{
		    				// Get the alleles to determine type //
		    				String[] compareContents = compareResult.split("\t");
			    			String allele1 = compareContents[0];
			    			String allele2 = compareContents[1];

			    			double strandedness1 = 0.50;
			    			double strandedness2 = 0.50;
			    			double strandednessDiff = 0.00;

			    			if(compareContents.length >= 17)
			    			{
			    				try
			    				{
			    					int tumorReads1plus = Integer.parseInt(compareContents[13]);
			    					int tumorReads1minus = Integer.parseInt(compareContents[14]);
			    					int tumorReads2plus = Integer.parseInt(compareContents[15]);
			    					int tumorReads2minus = Integer.parseInt(compareContents[16]);

			    					if(tumorReads1plus > 0 || tumorReads1minus > 0)
			    					{
			    						strandedness1 = (double) tumorReads1plus / (double) (tumorReads1plus + tumorReads1minus);
			    					}

			    					if(tumorReads2plus > 0 || tumorReads2minus > 0)
			    					{
			    						strandedness2 = (double) tumorReads2plus / (double) (tumorReads2plus + tumorReads2minus);
			    						if(tumorReads1plus > 0 || tumorReads1minus > 0)
			    						{
			    							strandednessDiff = java.lang.Math.abs(strandedness1 - strandedness2);
			    						}
			    					}
			    				}
			    				catch(Exception e)
			    				{
			    					// Exception parsing info from compareResult //
			    				}
			    			}

		    				//stats.put("comparedPositions", (stats.get("comparedPositions") + 1));
			    			comparedPositions++;

		    				if(params.containsKey("verbose") && !compareResult.contains("Reference"))
		    					System.err.println(chromNormal + "\t" + posNormal + "\t" + compareResult);

		    				// If VCF format specified, supply it //

		    				if(params.containsKey("output-vcf"))
		    				{
		    					int normalReads1 = Integer.parseInt(compareContents[2]);
		    					int normalReads2 = Integer.parseInt(compareContents[3]);
		    					String normalFreq = compareContents[4];
		    					String normalCall = compareContents[5];
		    					int tumorReads1 = Integer.parseInt(compareContents[6]);
		    					int tumorReads2 = Integer.parseInt(compareContents[7]);
		    					String tumorFreq = compareContents[8];
		    					String tumorCall = compareContents[9];
		    					String somStatus = compareContents[10];
		    					Double germlineP = Double.parseDouble(compareContents[11]);
		    					Double somaticP = Double.parseDouble(compareContents[12]);

		    					String[] normalContents = lineNormal.split("\t");
		    					//tumorContents = lineTumor.split("\t");
		    					int pileupDepthNormal = Integer.parseInt(normalContents[3]);
		    					int pileupDepthTumor = Integer.parseInt(tumorContents[3]);

		    					int totalDepth = pileupDepthNormal + pileupDepthTumor;

		    					if(allele2.startsWith("+"))
		    					{
		    						// INSERTION //
		    						// Ref = ref base; Var = ref base followed by inserted bases //
		    						String varColumn = allele1 + allele2.replace("+", "");
		    						compareResult = "." + "\t" + allele1 + "\t" + varColumn + "\t" + ".";
		    					}
		    					else if(allele2.startsWith("-"))
		    					{
		    						// DELETION //
		    						// Ref = ref base followed by deleted bases; var = ref base //
		    						String refColumn = allele1 + allele2.replace("-", "");
		    						compareResult = "." + "\t" + refColumn + "\t" + allele1 + "\t" + ".";
		    					}
		    					else
		    					{
			    					compareResult = "." + "\t" + allele1 + "\t" + allele2 + "\t" + ".";
		    					}


		    					// Decide on filter field //
		    					if(params.containsKey("strand-filter") && strandednessDiff > 0.10 && (strandedness2 < 0.10 || strandedness2 > 0.90))
		    					{
		    						compareResult += "\t" + "str10";
		    					}
		    					else if(somStatus.equals("IndelFilter"))
		    					{
		    						compareResult += "\t" + "indelError";
		    					}
		    					else
		    					{
		    						compareResult += "\t" + "PASS";
		    					}

		    					// Determine somatic status id and score //
		    					int ssCode = 0;
		    					double somScore = 0;

		    					if(somStatus.equals("Reference"))
		    					{
		    						// Wildtype //
		    						ssCode = 0;
		    						calledReference++;
		    					}
		    					else if(somStatus.equals("Germline"))
		    					{
		    						// Germline //
		    						ssCode = 1;
		    						calledGermline++;
		    						if(somaticP == 0)
		    						{
		    							somScore = 0;
		    						}
		    						else
		    						{
		    							somScore = 0 - (10 * java.lang.Math.log10(somaticP));
		    						}
		    					}
		    					else if(somStatus.equals("Somatic"))
		    					{
		    						// Somatic //
		    						ssCode = 2;
		    						calledSomatic++;
		    						if(somaticP == 0)
		    						{
		    							somScore = 255;
		    						}
		    						else
		    						{
		    							somScore = 0 - (10 * java.lang.Math.log10(somaticP));
		    						}
		    					}
		    					else if(somStatus.equals("LOH"))
		    					{
		    						// LOH //
		    						ssCode = 3;
		    						calledLOH++;
		    						if(somaticP == 0)
		    						{
		    							somScore = 255;
		    						}
		    						else
		    						{
		    							somScore = 0 - (10 * java.lang.Math.log10(somaticP));
		    						}
		    					}
		    					else
		    					{
		    						// Unknown //
		    						calledUnknown++;
		    						ssCode = 5;
		    					}

		    					// Adjust somatic score //
		    					if(somScore > 255)
		    						somScore = 255;

		    					// Print the info field //

		    					compareResult += "\t" + "DP=" + totalDepth;
		    					if(somStatus.equals("Somatic"))
		    						compareResult += ";SOMATIC";
		    					compareResult += ";" + "SS=" + ssCode;
		    					compareResult += ";" + "SSC=" + (int) somScore;
		    					compareResult += ";" + "GPV=" + pvalueFormat.format(germlineP);
		    					compareResult += ";" + "SPV=" + pvalueFormat.format(somaticP);

		    					// Print the format field //

		    					String tumorDP4 = "";
		    					String normalDP4 = "";

				    			if(compareContents.length >= 17)
				    			{
				    				try
				    				{
				    					tumorDP4 = compareContents[13] + "," + compareContents[14] + "," + compareContents[15] + "," + compareContents[16];
				    					normalDP4 = compareContents[17] + "," + compareContents[18] + "," + compareContents[19] + "," + compareContents[20];
				    				}
				    				catch(Exception e)
				    				{
				    					// Exception parsing info from compareResult //
				    					tumorDP4 = "";
				    					normalDP4 = "";
				    				}
				    			}

				    			if(tumorDP4.length() > 0)
				    				compareResult += "\tGT:GQ:DP:RD:AD:FREQ:DP4";
				    			else
				    				compareResult += "\tGT:GQ:DP:RD:AD:FREQ";

		    					// Determine normal genotype //
		    					String normalGt = ".";
		    					String tumorGt = ".";
		    					if(normalCall.equals(refBase))
		    					{
		    						normalGt = "0/0";
		    					}
		    					else if(VarScan.isHeterozygous(normalCall))
		    					{
		    						normalGt = "0/1";
		    					}
		    					else
		    					{
		    						normalGt = "1/1";
		    					}

		    					if(tumorCall.equals(refBase))
		    					{
		    						tumorGt = "0/0";
		    					}
		    					else if(VarScan.isHeterozygous(tumorCall))
		    					{
		    						tumorGt = "0/1";
		    					}
		    					else
		    					{
		    						tumorGt = "1/1";
		    					}

		    					if(tumorDP4.length() > 0)
		    					{
			    					compareResult += "\t" + normalGt + ":.:" + pileupDepthNormal + ":" + normalReads1 + ":" + normalReads2 + ":" + normalFreq + ":" + normalDP4;
			    					compareResult += "\t" + tumorGt + ":.:" + pileupDepthTumor + ":" + tumorReads1 + ":" + tumorReads2 + ":" + tumorFreq + ":" + tumorDP4;
		    					}
		    					else
		    					{
			    					compareResult += "\t" + normalGt + ":.:" + pileupDepthNormal + ":" + normalReads1 + ":" + normalReads2 + ":" + normalFreq;
			    					compareResult += "\t" + tumorGt + ":.:" + pileupDepthTumor + ":" + tumorReads1 + ":" + tumorReads2 + ":" + tumorFreq;
		    					}
		    				}
		    				// Print to master file for validation //

		    				if(params.containsKey("validation"))
		    				{
		    					outValidation.println(chromNormal + "\t" + posNormal + "\t" + compareResult);
		    				}

		    				if(!params.containsKey("validation") && (compareResult.contains("Reference") || compareResult.contains("SS=0") || compareResult.contains("Filter")))
		    				{
		    					// Don't print reference/indelfilter positions unless doing validation //
		    				}
		    				else if(params.containsKey("strand-filter") && strandednessDiff > 0.10 && (strandedness2 < 0.10 || strandedness2 > 0.90))
		    				{
		    					// If filter is set, ignore variants that are supported largely by one strand //
		    					compareResult = "StrandFilter";
		    				}
		    				else if(allele1.contains("-") || allele1.contains("+") || allele2.contains("-") || allele2.contains("+"))//if(compareResult.contains("INS") || compareResult.contains("DEL"))
		    				{
		    					outIndel.println(chromNormal + "\t" + posNormal + "\t" + compareResult);
		    				}
		    				else
		    				{
			    				outSnp.println(chromNormal + "\t" + posNormal + "\t" + compareResult);
		    				}
		    			}
		    			else
		    			{
//		    				System.err.println("Uncalled" + chromNormal + "\t" + posNormal + "\t" + compareResult);
		    			}

		    			if(compareResult.contains("Reference"))
		    				calledReference++; //stats.put("calledReference", (stats.get("calledReference") + 1));
		    			else if(compareResult.contains("IndelFilter"))
		    				indelFilter++;	//stats.put("indelFilter", (stats.get("indelFilter") + 1));
		    			else if(compareResult.contains("StrandFilter"))
		    				strandFilter++;
		    			else if(compareResult.contains("Germline"))
		    				calledGermline++;	//stats.put("calledGermline", (stats.get("calledGermline") + 1));
		    			else if(compareResult.contains("Somatic"))
		    				calledSomatic++;	//stats.put("calledSomatic", (stats.get("calledSomatic") + 1));
		    			else if(compareResult.contains("LOH"))
		    				calledLOH++;	//stats.put("calledLOH", (stats.get("calledLOH") + 1));
		    			else if(compareResult.contains("Unknown"))
		    				calledUnknown++;	//stats.put("calledUnknown", (stats.get("calledUnknown") + 1));
		    			else if(compareResult.contains("Variant"))
		    				calledVariant++;	//stats.put("calledVariant", (stats.get("calledVariant") + 1));

				    	prevChromNormal = chromNormal;
				    	prevChromTumor = chromTumor;
		    		}
		    		else
		    		{
		    			//System.err.println("Failed to match positions " + chromNormal + " " + posNormal + " to Tumor " + chromTumor + " " + posTumor);
		    		}
		    	}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
96
22834641
net/sf/varscan/Somatic.java 337 666
net/sf/varscan/Somatic.java 1058 1391
----------------------------------------
	    			{
	    				String[] lineContents = line.split("\t", -1);

	    				// Verify expected pileup format //

	    				if(lineContents.length > 5 && lineContents[0].length() > 0 && lineContents[1].length() > 0 && lineContents[2].length() > 0 && lineContents[3].length() > 0)
	    				{
	    					sharedPositions++;

	    					// Parse common fields from line //
	    					String refName = lineContents[0];
	    					int position = Integer.parseInt(lineContents[1]);
	    					refBase = lineContents[2].toUpperCase();

	    					chromNormal = refName;
	    					chromTumor = refName;
	    					posNormal = position;
	    					posTumor = position;

	    					// Parse normal, which should be first sample //
	    					int normalOffset = 3;
	    					int pileupDepthNormal = Integer.parseInt(lineContents[normalOffset]);
		    	        	String normalBases = lineContents[normalOffset + 1];
		    	        	String normalQualities = lineContents[normalOffset + 2];

	    					// Parse tumor, which should be second sample //
	    					int tumorOffset = 6;
	    					int pileupDepthTumor = Integer.parseInt(lineContents[tumorOffset]);
		    	        	String tumorBases = lineContents[tumorOffset + 1];
		    	        	String tumorQualities = lineContents[tumorOffset + 2];

	    					lineNormal = refName + "\t" + position + "\t" + refBase + "\t" + pileupDepthNormal + "\t" + normalBases + "\t" + normalQualities;
	    					lineTumor = refName + "\t" + position + "\t" + refBase + "\t" + pileupDepthTumor + "\t" + tumorBases + "\t" + tumorQualities;

	    					String compareResult = comparePositions(lineNormal, lineTumor, minCoverage, minReads2, minVarFreq, minAvgQual, pValueThreshold, somaticPvalue, minFreqForHom, normalPurity, tumorPurity);

			    			if(compareResult.length() > 0)
			    			{
			    				// Get the alleles to determine type //
			    				String[] compareContents = compareResult.split("\t");
				    			String allele1 = compareContents[0];
				    			String allele2 = compareContents[1];

				    			double strandedness1 = 0.50;
				    			double strandedness2 = 0.50;
				    			double strandednessDiff = 0.00;

				    			if(compareContents.length >= 17)
				    			{
				    				try
				    				{
				    					int tumorReads1plus = Integer.parseInt(compareContents[13]);
				    					int tumorReads1minus = Integer.parseInt(compareContents[14]);
				    					int tumorReads2plus = Integer.parseInt(compareContents[15]);
				    					int tumorReads2minus = Integer.parseInt(compareContents[16]);

				    					if(tumorReads1plus > 0 || tumorReads1minus > 0)
				    					{
				    						strandedness1 = (double) tumorReads1plus / (double) (tumorReads1plus + tumorReads1minus);
				    					}

				    					if(tumorReads2plus > 0 || tumorReads2minus > 0)
				    					{
				    						strandedness2 = (double) tumorReads2plus / (double) (tumorReads2plus + tumorReads2minus);
				    						if(tumorReads1plus > 0 || tumorReads1minus > 0)
				    						{
				    							strandednessDiff = java.lang.Math.abs(strandedness1 - strandedness2);
				    						}
				    					}
				    				}
				    				catch(Exception e)
				    				{
				    					// Exception parsing info from compareResult //
				    				}
				    			}

			    				//stats.put("comparedPositions", (stats.get("comparedPositions") + 1));
				    			comparedPositions++;

			    				if(params.containsKey("verbose") && !compareResult.contains("Reference"))
			    					System.err.println(chromNormal + "\t" + posNormal + "\t" + compareResult);

			    				// If VCF format specified, supply it //

			    				if(params.containsKey("output-vcf"))
			    				{
			    					int normalReads1 = Integer.parseInt(compareContents[2]);
			    					int normalReads2 = Integer.parseInt(compareContents[3]);
			    					String normalFreq = compareContents[4];
			    					String normalCall = compareContents[5];
			    					int tumorReads1 = Integer.parseInt(compareContents[6]);
			    					int tumorReads2 = Integer.parseInt(compareContents[7]);
			    					String tumorFreq = compareContents[8];
			    					String tumorCall = compareContents[9];
			    					String somStatus = compareContents[10];
			    					Double germlineP = Double.parseDouble(compareContents[11]);
			    					Double somaticP = Double.parseDouble(compareContents[12]);

			    					int totalDepth = pileupDepthNormal + pileupDepthTumor;

			    					if(allele2.startsWith("+"))
			    					{
			    						// INSERTION //
			    						// Ref = ref base; Var = ref base followed by inserted bases //
			    						String varColumn = allele1 + allele2.replace("+", "");
			    						compareResult = "." + "\t" + allele1 + "\t" + varColumn + "\t" + ".";
			    					}
			    					else if(allele2.startsWith("-"))
			    					{
			    						// DELETION //
			    						// Ref = ref base followed by deleted bases; var = ref base //
			    						String refColumn = allele1 + allele2.replace("-", "");
			    						compareResult = "." + "\t" + refColumn + "\t" + allele1 + "\t" + ".";
			    					}
			    					else
			    					{
				    					compareResult = "." + "\t" + allele1 + "\t" + allele2 + "\t" + ".";
			    					}


			    					// Decide on filter field //
			    					if(doStrandFilter && strandednessDiff > 0.10 && (strandedness2 < 0.10 || strandedness2 > 0.90))
			    					{
			    						compareResult += "\t" + "str10";
			    					}
			    					else if(somStatus.equals("IndelFilter"))
			    					{
			    						compareResult += "\t" + "indelError";
			    					}
			    					else
			    					{
			    						compareResult += "\t" + "PASS";
			    					}

			    					// Determine somatic status id and score //
			    					int ssCode = 0;
			    					double somScore = 0;

			    					if(somStatus.equals("Reference"))
			    					{
			    						// Wildtype //
			    						ssCode = 0;
			    						calledReference++;
			    					}
			    					else if(somStatus.equals("Germline"))
			    					{
			    						// Germline //
			    						ssCode = 1;
			    						calledGermline++;
			    						if(somaticP == 0)
			    						{
			    							somScore = 0;
			    						}
			    						else
			    						{
			    							somScore = 0 - (10 * java.lang.Math.log10(somaticP));
			    						}
			    					}
			    					else if(somStatus.equals("Somatic"))
			    					{
			    						// Somatic //
			    						ssCode = 2;
			    						calledSomatic++;
			    						if(somaticP == 0)
			    						{
			    							somScore = 255;
			    						}
			    						else
			    						{
			    							somScore = 0 - (10 * java.lang.Math.log10(somaticP));
			    						}
			    					}
			    					else if(somStatus.equals("LOH"))
			    					{
			    						// LOH //
			    						ssCode = 3;
			    						calledLOH++;
			    						if(somaticP == 0)
			    						{
			    							somScore = 255;
			    						}
			    						else
			    						{
			    							somScore = 0 - (10 * java.lang.Math.log10(somaticP));
			    						}
			    					}
			    					else
			    					{
			    						// Unknown //
			    						calledUnknown++;
			    						ssCode = 5;
			    					}

			    					// Adjust somatic score //
			    					if(somScore > 255)
			    						somScore = 255;

			    					// Print the info field //

			    					compareResult += "\t" + "DP=" + totalDepth;
			    					if(somStatus.equals("Somatic"))
			    						compareResult += ";SOMATIC";
			    					compareResult += ";" + "SS=" + ssCode;
			    					compareResult += ";" + "SSC=" + (int) somScore;
			    					compareResult += ";" + "GPV=" + pvalueFormat.format(germlineP);
			    					compareResult += ";" + "SPV=" + pvalueFormat.format(somaticP);

			    					// Print the format field //

			    					String tumorDP4 = "";
			    					String normalDP4 = "";

					    			if(compareContents.length >= 17)
					    			{
					    				try
					    				{
					    					tumorDP4 = compareContents[13] + "," + compareContents[14] + "," + compareContents[15] + "," + compareContents[16];
					    					normalDP4 = compareContents[17] + "," + compareContents[18] + "," + compareContents[19] + "," + compareContents[20];
					    				}
					    				catch(Exception e)
					    				{
					    					// Exception parsing info from compareResult //
					    					tumorDP4 = "";
					    					normalDP4 = "";
					    				}
					    			}

					    			if(tumorDP4.length() > 0)
					    				compareResult += "\tGT:GQ:DP:RD:AD:FREQ:DP4";
					    			else
					    				compareResult += "\tGT:GQ:DP:RD:AD:FREQ";

			    					// Determine normal genotype //
			    					String normalGt = ".";
			    					String tumorGt = ".";
			    					if(normalCall.equals(refBase))
			    					{
			    						normalGt = "0/0";
			    					}
			    					else if(VarScan.isHeterozygous(normalCall))
			    					{
			    						normalGt = "0/1";
			    					}
			    					else
			    					{
			    						normalGt = "1/1";
			    					}

			    					if(tumorCall.equals(refBase))
			    					{
			    						tumorGt = "0/0";
			    					}
			    					else if(VarScan.isHeterozygous(tumorCall))
			    					{
			    						tumorGt = "0/1";
			    					}
			    					else
			    					{
			    						tumorGt = "1/1";
			    					}

			    					if(tumorDP4.length() > 0)
			    					{
				    					compareResult += "\t" + normalGt + ":.:" + pileupDepthNormal + ":" + normalReads1 + ":" + normalReads2 + ":" + normalFreq + ":" + normalDP4;
				    					compareResult += "\t" + tumorGt + ":.:" + pileupDepthTumor + ":" + tumorReads1 + ":" + tumorReads2 + ":" + tumorFreq + ":" + tumorDP4;
			    					}
			    					else
			    					{
				    					compareResult += "\t" + normalGt + ":.:" + pileupDepthNormal + ":" + normalReads1 + ":" + normalReads2 + ":" + normalFreq;
				    					compareResult += "\t" + tumorGt + ":.:" + pileupDepthTumor + ":" + tumorReads1 + ":" + tumorReads2 + ":" + tumorFreq;
			    					}
			    				}

			    				// Print to master file for validation //

			    				if(params.containsKey("validation"))
			    				{
			    					outValidation.println(chromNormal + "\t" + posNormal + "\t" + compareResult);
			    				}

			    				if(!params.containsKey("validation") && (compareResult.contains("Reference") || compareResult.contains("SS=0")  || compareResult.contains("Filter")))
			    				{
			    					// Don't print reference/indelfilter positions unless doing validation //
			    				}
			    				else if(doStrandFilter && strandednessDiff > 0.10 && (strandedness2 < 0.10 || strandedness2 > 0.90))
			    				{
			    					// If filter is set, ignore variants that are supported largely by one strand //
			    					if(!params.containsKey("output-vcf"))
			    						compareResult = "StrandFilter";
			    				}
			    				else if(allele1.contains("-") || allele1.contains("+") || allele2.contains("-") || allele2.contains("+"))//if(compareResult.contains("INS") || compareResult.contains("DEL"))
			    				{
			    					outIndel.println(chromNormal + "\t" + posNormal + "\t" + compareResult);
			    				}
			    				else
			    				{
				    				outSnp.println(chromNormal + "\t" + posNormal + "\t" + compareResult);
			    				}
			    			}
			    			else
			    			{
//			    				System.err.println("Uncalled" + chromNormal + "\t" + posNormal + "\t" + compareResult);
			    			}

			    			if(compareResult.contains("Reference"))
			    				calledReference++; //stats.put("calledReference", (stats.get("calledReference") + 1));
			    			else if(compareResult.contains("IndelFilter"))
			    				indelFilter++;	//stats.put("indelFilter", (stats.get("indelFilter") + 1));
			    			else if(compareResult.contains("StrandFilter"))
			    				strandFilter++;
			    			else if(compareResult.contains("Germline"))
			    				calledGermline++;	//stats.put("calledGermline", (stats.get("calledGermline") + 1));
			    			else if(compareResult.contains("Somatic"))
			    				calledSomatic++;	//stats.put("calledSomatic", (stats.get("calledSomatic") + 1));
			    			else if(compareResult.contains("LOH"))
			    				calledLOH++;	//stats.put("calledLOH", (stats.get("calledLOH") + 1));
			    			else if(compareResult.contains("Unknown"))
			    				calledUnknown++;	//stats.put("calledUnknown", (stats.get("calledUnknown") + 1));
			    			else if(compareResult.contains("Variant"))
			    				calledVariant++;	//stats.put("calledVariant", (stats.get("calledVariant") + 1));



	    				}
	    				else
	    				{
	    					System.err.println("Error: Invalid format or not enough samples in mpileup: " + line + "\n");
	    					return;
	    				}
	    			}

----------------------------------------
		    	{
		    		normalWasReset = false;
		    		// Seek to matching Normal Position //

		    		while(chromNormal.equals(chromTumor) && posNormal < posTumor && ((lineNormal = normal.readLine()) != null))
		    		{
		    			String[] normalContents = lineNormal.split("\t");
				    	if(normalContents.length > 1)
				    	{
					    	chromNormal = normalContents[0];
					    	posNormal = Integer.parseInt(normalContents[1]);
				    	}
		    		}

		    		// Seek to matching Tumor Position //

		    		while(chromNormal.equals(chromTumor) && posTumor < posNormal && ((lineTumor = tumor.readLine()) != null))
		    		{
		    			tumorContents = lineTumor.split("\t");
				    	if(tumorContents.length > 1)
				    	{
					    	chromTumor = tumorContents[0];
					    	posTumor = Integer.parseInt(tumorContents[1]);
				    	}
		    		}

		    		// Proceed if normal and tumor positions match //

		    		if(chromNormal.equals(chromTumor) && chromNormal.equals(chromTumor) && posNormal == posTumor)
		    		{
		    			//stats.put("sharedPositions", (stats.get("sharedPositions") + 1));
		    			sharedPositions++;
		    			if(params.containsKey("verbose"))
		    					System.err.println("Comparing calls at " + chromTumor + ":" + posTumor);

		    			refBase = tumorContents[2];
		    			String compareResult = comparePositions(lineNormal, lineTumor, minCoverage, minReads2, minVarFreq, minAvgQual, pValueThreshold, somaticPvalue, minFreqForHom, normalPurity, tumorPurity);

		    			if(compareResult.length() > 0)
		    			{
		    				// Get the alleles to determine type //
		    				String[] compareContents = compareResult.split("\t");
			    			String allele1 = compareContents[0];
			    			String allele2 = compareContents[1];

			    			double strandedness1 = 0.50;
			    			double strandedness2 = 0.50;
			    			double strandednessDiff = 0.00;

			    			if(compareContents.length >= 17)
			    			{
			    				try
			    				{
			    					int tumorReads1plus = Integer.parseInt(compareContents[13]);
			    					int tumorReads1minus = Integer.parseInt(compareContents[14]);
			    					int tumorReads2plus = Integer.parseInt(compareContents[15]);
			    					int tumorReads2minus = Integer.parseInt(compareContents[16]);

			    					if(tumorReads1plus > 0 || tumorReads1minus > 0)
			    					{
			    						strandedness1 = (double) tumorReads1plus / (double) (tumorReads1plus + tumorReads1minus);
			    					}

			    					if(tumorReads2plus > 0 || tumorReads2minus > 0)
			    					{
			    						strandedness2 = (double) tumorReads2plus / (double) (tumorReads2plus + tumorReads2minus);
			    						if(tumorReads1plus > 0 || tumorReads1minus > 0)
			    						{
			    							strandednessDiff = java.lang.Math.abs(strandedness1 - strandedness2);
			    						}
			    					}
			    				}
			    				catch(Exception e)
			    				{
			    					// Exception parsing info from compareResult //
			    				}
			    			}

		    				//stats.put("comparedPositions", (stats.get("comparedPositions") + 1));
			    			comparedPositions++;

		    				if(params.containsKey("verbose") && !compareResult.contains("Reference"))
		    					System.err.println(chromNormal + "\t" + posNormal + "\t" + compareResult);

		    				// If VCF format specified, supply it //

		    				if(params.containsKey("output-vcf"))
		    				{
		    					int normalReads1 = Integer.parseInt(compareContents[2]);
		    					int normalReads2 = Integer.parseInt(compareContents[3]);
		    					String normalFreq = compareContents[4];
		    					String normalCall = compareContents[5];
		    					int tumorReads1 = Integer.parseInt(compareContents[6]);
		    					int tumorReads2 = Integer.parseInt(compareContents[7]);
		    					String tumorFreq = compareContents[8];
		    					String tumorCall = compareContents[9];
		    					String somStatus = compareContents[10];
		    					Double germlineP = Double.parseDouble(compareContents[11]);
		    					Double somaticP = Double.parseDouble(compareContents[12]);

		    					String[] normalContents = lineNormal.split("\t");
		    					//tumorContents = lineTumor.split("\t");
		    					int pileupDepthNormal = Integer.parseInt(normalContents[3]);
		    					int pileupDepthTumor = Integer.parseInt(tumorContents[3]);

		    					int totalDepth = pileupDepthNormal + pileupDepthTumor;

		    					if(allele2.startsWith("+"))
		    					{
		    						// INSERTION //
		    						// Ref = ref base; Var = ref base followed by inserted bases //
		    						String varColumn = allele1 + allele2.replace("+", "");
		    						compareResult = "." + "\t" + allele1 + "\t" + varColumn + "\t" + ".";
		    					}
		    					else if(allele2.startsWith("-"))
		    					{
		    						// DELETION //
		    						// Ref = ref base followed by deleted bases; var = ref base //
		    						String refColumn = allele1 + allele2.replace("-", "");
		    						compareResult = "." + "\t" + refColumn + "\t" + allele1 + "\t" + ".";
		    					}
		    					else
		    					{
			    					compareResult = "." + "\t" + allele1 + "\t" + allele2 + "\t" + ".";
		    					}


		    					// Decide on filter field //
		    					if(params.containsKey("strand-filter") && strandednessDiff > 0.10 && (strandedness2 < 0.10 || strandedness2 > 0.90))
		    					{
		    						compareResult += "\t" + "str10";
		    					}
		    					else if(somStatus.equals("IndelFilter"))
		    					{
		    						compareResult += "\t" + "indelError";
		    					}
		    					else
		    					{
		    						compareResult += "\t" + "PASS";
		    					}

		    					// Determine somatic status id and score //
		    					int ssCode = 0;
		    					double somScore = 0;

		    					if(somStatus.equals("Reference"))
		    					{
		    						// Wildtype //
		    						ssCode = 0;
		    						calledReference++;
		    					}
		    					else if(somStatus.equals("Germline"))
		    					{
		    						// Germline //
		    						ssCode = 1;
		    						calledGermline++;
		    						if(somaticP == 0)
		    						{
		    							somScore = 0;
		    						}
		    						else
		    						{
		    							somScore = 0 - (10 * java.lang.Math.log10(somaticP));
		    						}
		    					}
		    					else if(somStatus.equals("Somatic"))
		    					{
		    						// Somatic //
		    						ssCode = 2;
		    						calledSomatic++;
		    						if(somaticP == 0)
		    						{
		    							somScore = 255;
		    						}
		    						else
		    						{
		    							somScore = 0 - (10 * java.lang.Math.log10(somaticP));
		    						}
		    					}
		    					else if(somStatus.equals("LOH"))
		    					{
		    						// LOH //
		    						ssCode = 3;
		    						calledLOH++;
		    						if(somaticP == 0)
		    						{
		    							somScore = 255;
		    						}
		    						else
		    						{
		    							somScore = 0 - (10 * java.lang.Math.log10(somaticP));
		    						}
		    					}
		    					else
		    					{
		    						// Unknown //
		    						calledUnknown++;
		    						ssCode = 5;
		    					}

		    					// Adjust somatic score //
		    					if(somScore > 255)
		    						somScore = 255;

		    					// Print the info field //

		    					compareResult += "\t" + "DP=" + totalDepth;
		    					if(somStatus.equals("Somatic"))
		    						compareResult += ";SOMATIC";
		    					compareResult += ";" + "SS=" + ssCode;
		    					compareResult += ";" + "SSC=" + (int) somScore;
		    					compareResult += ";" + "GPV=" + pvalueFormat.format(germlineP);
		    					compareResult += ";" + "SPV=" + pvalueFormat.format(somaticP);

		    					// Print the format field //

		    					String tumorDP4 = "";
		    					String normalDP4 = "";

				    			if(compareContents.length >= 17)
				    			{
				    				try
				    				{
				    					tumorDP4 = compareContents[13] + "," + compareContents[14] + "," + compareContents[15] + "," + compareContents[16];
				    					normalDP4 = compareContents[17] + "," + compareContents[18] + "," + compareContents[19] + "," + compareContents[20];
				    				}
				    				catch(Exception e)
				    				{
				    					// Exception parsing info from compareResult //
				    					tumorDP4 = "";
				    					normalDP4 = "";
				    				}
				    			}

				    			if(tumorDP4.length() > 0)
				    				compareResult += "\tGT:GQ:DP:RD:AD:FREQ:DP4";
				    			else
				    				compareResult += "\tGT:GQ:DP:RD:AD:FREQ";

		    					// Determine normal genotype //
		    					String normalGt = ".";
		    					String tumorGt = ".";
		    					if(normalCall.equals(refBase))
		    					{
		    						normalGt = "0/0";
		    					}
		    					else if(VarScan.isHeterozygous(normalCall))
		    					{
		    						normalGt = "0/1";
		    					}
		    					else
		    					{
		    						normalGt = "1/1";
		    					}

		    					if(tumorCall.equals(refBase))
		    					{
		    						tumorGt = "0/0";
		    					}
		    					else if(VarScan.isHeterozygous(tumorCall))
		    					{
		    						tumorGt = "0/1";
		    					}
		    					else
		    					{
		    						tumorGt = "1/1";
		    					}

		    					if(tumorDP4.length() > 0)
		    					{
			    					compareResult += "\t" + normalGt + ":.:" + pileupDepthNormal + ":" + normalReads1 + ":" + normalReads2 + ":" + normalFreq + ":" + normalDP4;
			    					compareResult += "\t" + tumorGt + ":.:" + pileupDepthTumor + ":" + tumorReads1 + ":" + tumorReads2 + ":" + tumorFreq + ":" + tumorDP4;
		    					}
		    					else
		    					{
			    					compareResult += "\t" + normalGt + ":.:" + pileupDepthNormal + ":" + normalReads1 + ":" + normalReads2 + ":" + normalFreq;
			    					compareResult += "\t" + tumorGt + ":.:" + pileupDepthTumor + ":" + tumorReads1 + ":" + tumorReads2 + ":" + tumorFreq;
		    					}
		    				}
		    				// Print to master file for validation //

		    				if(params.containsKey("validation"))
		    				{
		    					outValidation.println(chromNormal + "\t" + posNormal + "\t" + compareResult);
		    				}

		    				if(!params.containsKey("validation") && (compareResult.contains("Reference") || compareResult.contains("SS=0") || compareResult.contains("Filter")))
		    				{
		    					// Don't print reference/indelfilter positions unless doing validation //
		    				}
		    				else if(params.containsKey("strand-filter") && strandednessDiff > 0.10 && (strandedness2 < 0.10 || strandedness2 > 0.90))
		    				{
		    					// If filter is set, ignore variants that are supported largely by one strand //
		    					compareResult = "StrandFilter";
		    				}
		    				else if(allele1.contains("-") || allele1.contains("+") || allele2.contains("-") || allele2.contains("+"))//if(compareResult.contains("INS") || compareResult.contains("DEL"))
		    				{
		    					outIndel.println(chromNormal + "\t" + posNormal + "\t" + compareResult);
		    				}
		    				else
		    				{
			    				outSnp.println(chromNormal + "\t" + posNormal + "\t" + compareResult);
		    				}
		    			}
		    			else
		    			{
//		    				System.err.println("Uncalled" + chromNormal + "\t" + posNormal + "\t" + compareResult);
		    			}

		    			if(compareResult.contains("Reference"))
		    				calledReference++; //stats.put("calledReference", (stats.get("calledReference") + 1));
		    			else if(compareResult.contains("IndelFilter"))
		    				indelFilter++;	//stats.put("indelFilter", (stats.get("indelFilter") + 1));
		    			else if(compareResult.contains("StrandFilter"))
		    				strandFilter++;
		    			else if(compareResult.contains("Germline"))
		    				calledGermline++;	//stats.put("calledGermline", (stats.get("calledGermline") + 1));
		    			else if(compareResult.contains("Somatic"))
		    				calledSomatic++;	//stats.put("calledSomatic", (stats.get("calledSomatic") + 1));
		    			else if(compareResult.contains("LOH"))
		    				calledLOH++;	//stats.put("calledLOH", (stats.get("calledLOH") + 1));
		    			else if(compareResult.contains("Unknown"))
		    				calledUnknown++;	//stats.put("calledUnknown", (stats.get("calledUnknown") + 1));
		    			else if(compareResult.contains("Variant"))
		    				calledVariant++;	//stats.put("calledVariant", (stats.get("calledVariant") + 1));

				    	prevChromNormal = chromNormal;
				    	prevChromTumor = chromTumor;
		    		}
		    		else
		    		{
		    			//System.err.println("Failed to match positions " + chromNormal + " " + posNormal + " to Tumor " + chromTumor + " " + posTumor);
		    		}
		    	}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
96
22834645
net/sf/varscan/Somatic.java 276 696
net/sf/varscan/Somatic.java 1058 1391
----------------------------------------
	    	{
	    		// Declare some file-parsing variables //
			    String lineNormal;
			    String lineTumor;
			    String chromNormal = "";
			    String chromTumor = "";
			    String refBase = "";
			    int posNormal = 0;
			    int posTumor = 0;

				// Declare output file //
		 	 	PrintStream outSnp = null; // declare a print stream object for SNPs
		 	 	PrintStream outIndel = null; // declare a print stream object for Indels
		 	 	PrintStream outValidation = null; // declare a print stream object for both for validation
		 	 	PrintStream outCopyNumber = null; // declare a print stream object for both for validation

		 	 	if(params.containsKey("output-vcf"))
		 	 	{
		 	 		if(!outputSnp.contains(".vcf"))
		 	 			outputSnp += ".vcf";
		 	 		if(!outputIndel.contains(".vcf"))
		 	 			outputIndel += ".vcf";
		 	 	}
		 		outSnp = new PrintStream( new FileOutputStream(outputSnp) );
		 		outIndel = new PrintStream( new FileOutputStream(outputIndel) );

		 		if(!params.containsKey("no-headers") && !params.containsKey("output-vcf"))
		 		{
		 			outSnp.println("chrom\tposition\tref\tvar\tnormal_reads1\tnormal_reads2\tnormal_var_freq\tnormal_gt\ttumor_reads1\ttumor_reads2\ttumor_var_freq\ttumor_gt\tsomatic_status\tvariant_p_value\tsomatic_p_value\ttumor_reads1_plus\ttumor_reads1_minus\ttumor_reads2_plus\ttumor_reads2_minus\tnormal_reads1_plus\tnormal_reads1_minus\tnormal_reads2_plus\tnormal_reads2_minus");
		 			outIndel.println("chrom\tposition\tref\tvar\tnormal_reads1\tnormal_reads2\tnormal_var_freq\tnormal_gt\ttumor_reads1\ttumor_reads2\ttumor_var_freq\ttumor_gt\tsomatic_status\tvariant_p_value\tsomatic_p_value\ttumor_reads1_plus\ttumor_reads1_minus\ttumor_reads2_plus\ttumor_reads2_minus\tnormal_reads1_plus\tnormal_reads1_minus\tnormal_reads2_plus\tnormal_reads2_minus");
		 		}

		 		if(params.containsKey("output-vcf"))
				{
					// Output VCF Header //
					outSnp.println(vcfHeader);
					outIndel.println(vcfHeader);
				}

		 		if(params.containsKey("validation"))
		 		{
			 		outValidation = new PrintStream( new FileOutputStream(outputName + ".validation") );
			 		if(!params.containsKey("no-headers") && !params.containsKey("output-vcf"))
			 			outValidation.println("chrom\tposition\tref\tvar\tnormal_reads1\tnormal_reads2\tnormal_var_freq\tnormal_gt\ttumor_reads1\ttumor_reads2\ttumor_var_freq\ttumor_gt\tsomatic_status\tvariant_p_value\tsomatic_p_value\ttumor_reads1_plus\ttumor_reads1_minus\ttumor_reads2_plus\ttumor_reads2_minus");
			 		if(params.containsKey("output-vcf"))
					{
						// Output VCF Header //
						outValidation.println(vcfHeader);
					}
		 		}

	    		// Parse the infile line by line //
	    		System.err.println("Reading mpileup input...");
	    		int numParsingExceptions = 0;

	    		while ((line = in.readLine()) != null)
	    		{

	    			// Begin try-catch for line parsing //

	    			try
	    			{
	    				String[] lineContents = line.split("\t", -1);

	    				// Verify expected pileup format //

	    				if(lineContents.length > 5 && lineContents[0].length() > 0 && lineContents[1].length() > 0 && lineContents[2].length() > 0 && lineContents[3].length() > 0)
	    				{
	    					sharedPositions++;

	    					// Parse common fields from line //
	    					String refName = lineContents[0];
	    					int position = Integer.parseInt(lineContents[1]);
	    					refBase = lineContents[2].toUpperCase();

	    					chromNormal = refName;
	    					chromTumor = refName;
	    					posNormal = position;
	    					posTumor = position;

	    					// Parse normal, which should be first sample //
	    					int normalOffset = 3;
	    					int pileupDepthNormal = Integer.parseInt(lineContents[normalOffset]);
		    	        	String normalBases = lineContents[normalOffset + 1];
		    	        	String normalQualities = lineContents[normalOffset + 2];

	    					// Parse tumor, which should be second sample //
	    					int tumorOffset = 6;
	    					int pileupDepthTumor = Integer.parseInt(lineContents[tumorOffset]);
		    	        	String tumorBases = lineContents[tumorOffset + 1];
		    	        	String tumorQualities = lineContents[tumorOffset + 2];

	    					lineNormal = refName + "\t" + position + "\t" + refBase + "\t" + pileupDepthNormal + "\t" + normalBases + "\t" + normalQualities;
	    					lineTumor = refName + "\t" + position + "\t" + refBase + "\t" + pileupDepthTumor + "\t" + tumorBases + "\t" + tumorQualities;

	    					String compareResult = comparePositions(lineNormal, lineTumor, minCoverage, minReads2, minVarFreq, minAvgQual, pValueThreshold, somaticPvalue, minFreqForHom, normalPurity, tumorPurity);

			    			if(compareResult.length() > 0)
			    			{
			    				// Get the alleles to determine type //
			    				String[] compareContents = compareResult.split("\t");
				    			String allele1 = compareContents[0];
				    			String allele2 = compareContents[1];

				    			double strandedness1 = 0.50;
				    			double strandedness2 = 0.50;
				    			double strandednessDiff = 0.00;

				    			if(compareContents.length >= 17)
				    			{
				    				try
				    				{
				    					int tumorReads1plus = Integer.parseInt(compareContents[13]);
				    					int tumorReads1minus = Integer.parseInt(compareContents[14]);
				    					int tumorReads2plus = Integer.parseInt(compareContents[15]);
				    					int tumorReads2minus = Integer.parseInt(compareContents[16]);

				    					if(tumorReads1plus > 0 || tumorReads1minus > 0)
				    					{
				    						strandedness1 = (double) tumorReads1plus / (double) (tumorReads1plus + tumorReads1minus);
				    					}

				    					if(tumorReads2plus > 0 || tumorReads2minus > 0)
				    					{
				    						strandedness2 = (double) tumorReads2plus / (double) (tumorReads2plus + tumorReads2minus);
				    						if(tumorReads1plus > 0 || tumorReads1minus > 0)
				    						{
				    							strandednessDiff = java.lang.Math.abs(strandedness1 - strandedness2);
				    						}
				    					}
				    				}
				    				catch(Exception e)
				    				{
				    					// Exception parsing info from compareResult //
				    				}
				    			}

			    				//stats.put("comparedPositions", (stats.get("comparedPositions") + 1));
				    			comparedPositions++;

			    				if(params.containsKey("verbose") && !compareResult.contains("Reference"))
			    					System.err.println(chromNormal + "\t" + posNormal + "\t" + compareResult);

			    				// If VCF format specified, supply it //

			    				if(params.containsKey("output-vcf"))
			    				{
			    					int normalReads1 = Integer.parseInt(compareContents[2]);
			    					int normalReads2 = Integer.parseInt(compareContents[3]);
			    					String normalFreq = compareContents[4];
			    					String normalCall = compareContents[5];
			    					int tumorReads1 = Integer.parseInt(compareContents[6]);
			    					int tumorReads2 = Integer.parseInt(compareContents[7]);
			    					String tumorFreq = compareContents[8];
			    					String tumorCall = compareContents[9];
			    					String somStatus = compareContents[10];
			    					Double germlineP = Double.parseDouble(compareContents[11]);
			    					Double somaticP = Double.parseDouble(compareContents[12]);

			    					int totalDepth = pileupDepthNormal + pileupDepthTumor;

			    					if(allele2.startsWith("+"))
			    					{
			    						// INSERTION //
			    						// Ref = ref base; Var = ref base followed by inserted bases //
			    						String varColumn = allele1 + allele2.replace("+", "");
			    						compareResult = "." + "\t" + allele1 + "\t" + varColumn + "\t" + ".";
			    					}
			    					else if(allele2.startsWith("-"))
			    					{
			    						// DELETION //
			    						// Ref = ref base followed by deleted bases; var = ref base //
			    						String refColumn = allele1 + allele2.replace("-", "");
			    						compareResult = "." + "\t" + refColumn + "\t" + allele1 + "\t" + ".";
			    					}
			    					else
			    					{
				    					compareResult = "." + "\t" + allele1 + "\t" + allele2 + "\t" + ".";
			    					}


			    					// Decide on filter field //
			    					if(doStrandFilter && strandednessDiff > 0.10 && (strandedness2 < 0.10 || strandedness2 > 0.90))
			    					{
			    						compareResult += "\t" + "str10";
			    					}
			    					else if(somStatus.equals("IndelFilter"))
			    					{
			    						compareResult += "\t" + "indelError";
			    					}
			    					else
			    					{
			    						compareResult += "\t" + "PASS";
			    					}

			    					// Determine somatic status id and score //
			    					int ssCode = 0;
			    					double somScore = 0;

			    					if(somStatus.equals("Reference"))
			    					{
			    						// Wildtype //
			    						ssCode = 0;
			    						calledReference++;
			    					}
			    					else if(somStatus.equals("Germline"))
			    					{
			    						// Germline //
			    						ssCode = 1;
			    						calledGermline++;
			    						if(somaticP == 0)
			    						{
			    							somScore = 0;
			    						}
			    						else
			    						{
			    							somScore = 0 - (10 * java.lang.Math.log10(somaticP));
			    						}
			    					}
			    					else if(somStatus.equals("Somatic"))
			    					{
			    						// Somatic //
			    						ssCode = 2;
			    						calledSomatic++;
			    						if(somaticP == 0)
			    						{
			    							somScore = 255;
			    						}
			    						else
			    						{
			    							somScore = 0 - (10 * java.lang.Math.log10(somaticP));
			    						}
			    					}
			    					else if(somStatus.equals("LOH"))
			    					{
			    						// LOH //
			    						ssCode = 3;
			    						calledLOH++;
			    						if(somaticP == 0)
			    						{
			    							somScore = 255;
			    						}
			    						else
			    						{
			    							somScore = 0 - (10 * java.lang.Math.log10(somaticP));
			    						}
			    					}
			    					else
			    					{
			    						// Unknown //
			    						calledUnknown++;
			    						ssCode = 5;
			    					}

			    					// Adjust somatic score //
			    					if(somScore > 255)
			    						somScore = 255;

			    					// Print the info field //

			    					compareResult += "\t" + "DP=" + totalDepth;
			    					if(somStatus.equals("Somatic"))
			    						compareResult += ";SOMATIC";
			    					compareResult += ";" + "SS=" + ssCode;
			    					compareResult += ";" + "SSC=" + (int) somScore;
			    					compareResult += ";" + "GPV=" + pvalueFormat.format(germlineP);
			    					compareResult += ";" + "SPV=" + pvalueFormat.format(somaticP);

			    					// Print the format field //

			    					String tumorDP4 = "";
			    					String normalDP4 = "";

					    			if(compareContents.length >= 17)
					    			{
					    				try
					    				{
					    					tumorDP4 = compareContents[13] + "," + compareContents[14] + "," + compareContents[15] + "," + compareContents[16];
					    					normalDP4 = compareContents[17] + "," + compareContents[18] + "," + compareContents[19] + "," + compareContents[20];
					    				}
					    				catch(Exception e)
					    				{
					    					// Exception parsing info from compareResult //
					    					tumorDP4 = "";
					    					normalDP4 = "";
					    				}
					    			}

					    			if(tumorDP4.length() > 0)
					    				compareResult += "\tGT:GQ:DP:RD:AD:FREQ:DP4";
					    			else
					    				compareResult += "\tGT:GQ:DP:RD:AD:FREQ";

			    					// Determine normal genotype //
			    					String normalGt = ".";
			    					String tumorGt = ".";
			    					if(normalCall.equals(refBase))
			    					{
			    						normalGt = "0/0";
			    					}
			    					else if(VarScan.isHeterozygous(normalCall))
			    					{
			    						normalGt = "0/1";
			    					}
			    					else
			    					{
			    						normalGt = "1/1";
			    					}

			    					if(tumorCall.equals(refBase))
			    					{
			    						tumorGt = "0/0";
			    					}
			    					else if(VarScan.isHeterozygous(tumorCall))
			    					{
			    						tumorGt = "0/1";
			    					}
			    					else
			    					{
			    						tumorGt = "1/1";
			    					}

			    					if(tumorDP4.length() > 0)
			    					{
				    					compareResult += "\t" + normalGt + ":.:" + pileupDepthNormal + ":" + normalReads1 + ":" + normalReads2 + ":" + normalFreq + ":" + normalDP4;
				    					compareResult += "\t" + tumorGt + ":.:" + pileupDepthTumor + ":" + tumorReads1 + ":" + tumorReads2 + ":" + tumorFreq + ":" + tumorDP4;
			    					}
			    					else
			    					{
				    					compareResult += "\t" + normalGt + ":.:" + pileupDepthNormal + ":" + normalReads1 + ":" + normalReads2 + ":" + normalFreq;
				    					compareResult += "\t" + tumorGt + ":.:" + pileupDepthTumor + ":" + tumorReads1 + ":" + tumorReads2 + ":" + tumorFreq;
			    					}
			    				}

			    				// Print to master file for validation //

			    				if(params.containsKey("validation"))
			    				{
			    					outValidation.println(chromNormal + "\t" + posNormal + "\t" + compareResult);
			    				}

			    				if(!params.containsKey("validation") && (compareResult.contains("Reference") || compareResult.contains("SS=0")  || compareResult.contains("Filter")))
			    				{
			    					// Don't print reference/indelfilter positions unless doing validation //
			    				}
			    				else if(doStrandFilter && strandednessDiff > 0.10 && (strandedness2 < 0.10 || strandedness2 > 0.90))
			    				{
			    					// If filter is set, ignore variants that are supported largely by one strand //
			    					if(!params.containsKey("output-vcf"))
			    						compareResult = "StrandFilter";
			    				}
			    				else if(allele1.contains("-") || allele1.contains("+") || allele2.contains("-") || allele2.contains("+"))//if(compareResult.contains("INS") || compareResult.contains("DEL"))
			    				{
			    					outIndel.println(chromNormal + "\t" + posNormal + "\t" + compareResult);
			    				}
			    				else
			    				{
				    				outSnp.println(chromNormal + "\t" + posNormal + "\t" + compareResult);
			    				}
			    			}
			    			else
			    			{
//			    				System.err.println("Uncalled" + chromNormal + "\t" + posNormal + "\t" + compareResult);
			    			}

			    			if(compareResult.contains("Reference"))
			    				calledReference++; //stats.put("calledReference", (stats.get("calledReference") + 1));
			    			else if(compareResult.contains("IndelFilter"))
			    				indelFilter++;	//stats.put("indelFilter", (stats.get("indelFilter") + 1));
			    			else if(compareResult.contains("StrandFilter"))
			    				strandFilter++;
			    			else if(compareResult.contains("Germline"))
			    				calledGermline++;	//stats.put("calledGermline", (stats.get("calledGermline") + 1));
			    			else if(compareResult.contains("Somatic"))
			    				calledSomatic++;	//stats.put("calledSomatic", (stats.get("calledSomatic") + 1));
			    			else if(compareResult.contains("LOH"))
			    				calledLOH++;	//stats.put("calledLOH", (stats.get("calledLOH") + 1));
			    			else if(compareResult.contains("Unknown"))
			    				calledUnknown++;	//stats.put("calledUnknown", (stats.get("calledUnknown") + 1));
			    			else if(compareResult.contains("Variant"))
			    				calledVariant++;	//stats.put("calledVariant", (stats.get("calledVariant") + 1));



	    				}
	    				else
	    				{
	    					System.err.println("Error: Invalid format or not enough samples in mpileup: " + line + "\n");
	    					return;
	    				}
	    			}
	    			catch(Exception e)
	    		    {
	    		    	System.err.println("Parsing Exception on line:\n" + line + "\n" + e.getLocalizedMessage());
	    				numParsingExceptions++;
	    				if(numParsingExceptions >= 5)
	    				{
	    					System.err.println("Too many parsing exceptions encountered; exiting");
	    					return;
	    				}
	    		    	return;
	    		    }
	    		}

	    		// Close input/output files //
	    		in.close();
			    outSnp.close();
			    outIndel.close();

			    System.err.println(sharedPositions + " positions in mpileup file"); //stats.get("sharedPositions")
			    System.err.println(comparedPositions + " had sufficient coverage for comparison"); //stats.get("comparedPositions")
			    System.err.println(calledReference + " were called Reference"); //stats.get("calledReference")
			    System.err.println(indelFilter + " were mixed SNP-indel calls and filtered");
			    if(doStrandFilter)
			    	System.err.println(strandFilter + " were removed by the strand filter");
			    System.err.println(calledGermline + " were called Germline");
			    System.err.println(calledLOH + " were called LOH");
			    System.err.println(calledSomatic + " were called Somatic");
			    System.err.println(calledUnknown + " were called Unknown");
			    System.err.println(calledVariant + " were called Variant");
	    	}

----------------------------------------
		    	{
		    		normalWasReset = false;
		    		// Seek to matching Normal Position //

		    		while(chromNormal.equals(chromTumor) && posNormal < posTumor && ((lineNormal = normal.readLine()) != null))
		    		{
		    			String[] normalContents = lineNormal.split("\t");
				    	if(normalContents.length > 1)
				    	{
					    	chromNormal = normalContents[0];
					    	posNormal = Integer.parseInt(normalContents[1]);
				    	}
		    		}

		    		// Seek to matching Tumor Position //

		    		while(chromNormal.equals(chromTumor) && posTumor < posNormal && ((lineTumor = tumor.readLine()) != null))
		    		{
		    			tumorContents = lineTumor.split("\t");
				    	if(tumorContents.length > 1)
				    	{
					    	chromTumor = tumorContents[0];
					    	posTumor = Integer.parseInt(tumorContents[1]);
				    	}
		    		}

		    		// Proceed if normal and tumor positions match //

		    		if(chromNormal.equals(chromTumor) && chromNormal.equals(chromTumor) && posNormal == posTumor)
		    		{
		    			//stats.put("sharedPositions", (stats.get("sharedPositions") + 1));
		    			sharedPositions++;
		    			if(params.containsKey("verbose"))
		    					System.err.println("Comparing calls at " + chromTumor + ":" + posTumor);

		    			refBase = tumorContents[2];
		    			String compareResult = comparePositions(lineNormal, lineTumor, minCoverage, minReads2, minVarFreq, minAvgQual, pValueThreshold, somaticPvalue, minFreqForHom, normalPurity, tumorPurity);

		    			if(compareResult.length() > 0)
		    			{
		    				// Get the alleles to determine type //
		    				String[] compareContents = compareResult.split("\t");
			    			String allele1 = compareContents[0];
			    			String allele2 = compareContents[1];

			    			double strandedness1 = 0.50;
			    			double strandedness2 = 0.50;
			    			double strandednessDiff = 0.00;

			    			if(compareContents.length >= 17)
			    			{
			    				try
			    				{
			    					int tumorReads1plus = Integer.parseInt(compareContents[13]);
			    					int tumorReads1minus = Integer.parseInt(compareContents[14]);
			    					int tumorReads2plus = Integer.parseInt(compareContents[15]);
			    					int tumorReads2minus = Integer.parseInt(compareContents[16]);

			    					if(tumorReads1plus > 0 || tumorReads1minus > 0)
			    					{
			    						strandedness1 = (double) tumorReads1plus / (double) (tumorReads1plus + tumorReads1minus);
			    					}

			    					if(tumorReads2plus > 0 || tumorReads2minus > 0)
			    					{
			    						strandedness2 = (double) tumorReads2plus / (double) (tumorReads2plus + tumorReads2minus);
			    						if(tumorReads1plus > 0 || tumorReads1minus > 0)
			    						{
			    							strandednessDiff = java.lang.Math.abs(strandedness1 - strandedness2);
			    						}
			    					}
			    				}
			    				catch(Exception e)
			    				{
			    					// Exception parsing info from compareResult //
			    				}
			    			}

		    				//stats.put("comparedPositions", (stats.get("comparedPositions") + 1));
			    			comparedPositions++;

		    				if(params.containsKey("verbose") && !compareResult.contains("Reference"))
		    					System.err.println(chromNormal + "\t" + posNormal + "\t" + compareResult);

		    				// If VCF format specified, supply it //

		    				if(params.containsKey("output-vcf"))
		    				{
		    					int normalReads1 = Integer.parseInt(compareContents[2]);
		    					int normalReads2 = Integer.parseInt(compareContents[3]);
		    					String normalFreq = compareContents[4];
		    					String normalCall = compareContents[5];
		    					int tumorReads1 = Integer.parseInt(compareContents[6]);
		    					int tumorReads2 = Integer.parseInt(compareContents[7]);
		    					String tumorFreq = compareContents[8];
		    					String tumorCall = compareContents[9];
		    					String somStatus = compareContents[10];
		    					Double germlineP = Double.parseDouble(compareContents[11]);
		    					Double somaticP = Double.parseDouble(compareContents[12]);

		    					String[] normalContents = lineNormal.split("\t");
		    					//tumorContents = lineTumor.split("\t");
		    					int pileupDepthNormal = Integer.parseInt(normalContents[3]);
		    					int pileupDepthTumor = Integer.parseInt(tumorContents[3]);

		    					int totalDepth = pileupDepthNormal + pileupDepthTumor;

		    					if(allele2.startsWith("+"))
		    					{
		    						// INSERTION //
		    						// Ref = ref base; Var = ref base followed by inserted bases //
		    						String varColumn = allele1 + allele2.replace("+", "");
		    						compareResult = "." + "\t" + allele1 + "\t" + varColumn + "\t" + ".";
		    					}
		    					else if(allele2.startsWith("-"))
		    					{
		    						// DELETION //
		    						// Ref = ref base followed by deleted bases; var = ref base //
		    						String refColumn = allele1 + allele2.replace("-", "");
		    						compareResult = "." + "\t" + refColumn + "\t" + allele1 + "\t" + ".";
		    					}
		    					else
		    					{
			    					compareResult = "." + "\t" + allele1 + "\t" + allele2 + "\t" + ".";
		    					}


		    					// Decide on filter field //
		    					if(params.containsKey("strand-filter") && strandednessDiff > 0.10 && (strandedness2 < 0.10 || strandedness2 > 0.90))
		    					{
		    						compareResult += "\t" + "str10";
		    					}
		    					else if(somStatus.equals("IndelFilter"))
		    					{
		    						compareResult += "\t" + "indelError";
		    					}
		    					else
		    					{
		    						compareResult += "\t" + "PASS";
		    					}

		    					// Determine somatic status id and score //
		    					int ssCode = 0;
		    					double somScore = 0;

		    					if(somStatus.equals("Reference"))
		    					{
		    						// Wildtype //
		    						ssCode = 0;
		    						calledReference++;
		    					}
		    					else if(somStatus.equals("Germline"))
		    					{
		    						// Germline //
		    						ssCode = 1;
		    						calledGermline++;
		    						if(somaticP == 0)
		    						{
		    							somScore = 0;
		    						}
		    						else
		    						{
		    							somScore = 0 - (10 * java.lang.Math.log10(somaticP));
		    						}
		    					}
		    					else if(somStatus.equals("Somatic"))
		    					{
		    						// Somatic //
		    						ssCode = 2;
		    						calledSomatic++;
		    						if(somaticP == 0)
		    						{
		    							somScore = 255;
		    						}
		    						else
		    						{
		    							somScore = 0 - (10 * java.lang.Math.log10(somaticP));
		    						}
		    					}
		    					else if(somStatus.equals("LOH"))
		    					{
		    						// LOH //
		    						ssCode = 3;
		    						calledLOH++;
		    						if(somaticP == 0)
		    						{
		    							somScore = 255;
		    						}
		    						else
		    						{
		    							somScore = 0 - (10 * java.lang.Math.log10(somaticP));
		    						}
		    					}
		    					else
		    					{
		    						// Unknown //
		    						calledUnknown++;
		    						ssCode = 5;
		    					}

		    					// Adjust somatic score //
		    					if(somScore > 255)
		    						somScore = 255;

		    					// Print the info field //

		    					compareResult += "\t" + "DP=" + totalDepth;
		    					if(somStatus.equals("Somatic"))
		    						compareResult += ";SOMATIC";
		    					compareResult += ";" + "SS=" + ssCode;
		    					compareResult += ";" + "SSC=" + (int) somScore;
		    					compareResult += ";" + "GPV=" + pvalueFormat.format(germlineP);
		    					compareResult += ";" + "SPV=" + pvalueFormat.format(somaticP);

		    					// Print the format field //

		    					String tumorDP4 = "";
		    					String normalDP4 = "";

				    			if(compareContents.length >= 17)
				    			{
				    				try
				    				{
				    					tumorDP4 = compareContents[13] + "," + compareContents[14] + "," + compareContents[15] + "," + compareContents[16];
				    					normalDP4 = compareContents[17] + "," + compareContents[18] + "," + compareContents[19] + "," + compareContents[20];
				    				}
				    				catch(Exception e)
				    				{
				    					// Exception parsing info from compareResult //
				    					tumorDP4 = "";
				    					normalDP4 = "";
				    				}
				    			}

				    			if(tumorDP4.length() > 0)
				    				compareResult += "\tGT:GQ:DP:RD:AD:FREQ:DP4";
				    			else
				    				compareResult += "\tGT:GQ:DP:RD:AD:FREQ";

		    					// Determine normal genotype //
		    					String normalGt = ".";
		    					String tumorGt = ".";
		    					if(normalCall.equals(refBase))
		    					{
		    						normalGt = "0/0";
		    					}
		    					else if(VarScan.isHeterozygous(normalCall))
		    					{
		    						normalGt = "0/1";
		    					}
		    					else
		    					{
		    						normalGt = "1/1";
		    					}

		    					if(tumorCall.equals(refBase))
		    					{
		    						tumorGt = "0/0";
		    					}
		    					else if(VarScan.isHeterozygous(tumorCall))
		    					{
		    						tumorGt = "0/1";
		    					}
		    					else
		    					{
		    						tumorGt = "1/1";
		    					}

		    					if(tumorDP4.length() > 0)
		    					{
			    					compareResult += "\t" + normalGt + ":.:" + pileupDepthNormal + ":" + normalReads1 + ":" + normalReads2 + ":" + normalFreq + ":" + normalDP4;
			    					compareResult += "\t" + tumorGt + ":.:" + pileupDepthTumor + ":" + tumorReads1 + ":" + tumorReads2 + ":" + tumorFreq + ":" + tumorDP4;
		    					}
		    					else
		    					{
			    					compareResult += "\t" + normalGt + ":.:" + pileupDepthNormal + ":" + normalReads1 + ":" + normalReads2 + ":" + normalFreq;
			    					compareResult += "\t" + tumorGt + ":.:" + pileupDepthTumor + ":" + tumorReads1 + ":" + tumorReads2 + ":" + tumorFreq;
		    					}
		    				}
		    				// Print to master file for validation //

		    				if(params.containsKey("validation"))
		    				{
		    					outValidation.println(chromNormal + "\t" + posNormal + "\t" + compareResult);
		    				}

		    				if(!params.containsKey("validation") && (compareResult.contains("Reference") || compareResult.contains("SS=0") || compareResult.contains("Filter")))
		    				{
		    					// Don't print reference/indelfilter positions unless doing validation //
		    				}
		    				else if(params.containsKey("strand-filter") && strandednessDiff > 0.10 && (strandedness2 < 0.10 || strandedness2 > 0.90))
		    				{
		    					// If filter is set, ignore variants that are supported largely by one strand //
		    					compareResult = "StrandFilter";
		    				}
		    				else if(allele1.contains("-") || allele1.contains("+") || allele2.contains("-") || allele2.contains("+"))//if(compareResult.contains("INS") || compareResult.contains("DEL"))
		    				{
		    					outIndel.println(chromNormal + "\t" + posNormal + "\t" + compareResult);
		    				}
		    				else
		    				{
			    				outSnp.println(chromNormal + "\t" + posNormal + "\t" + compareResult);
		    				}
		    			}
		    			else
		    			{
//		    				System.err.println("Uncalled" + chromNormal + "\t" + posNormal + "\t" + compareResult);
		    			}

		    			if(compareResult.contains("Reference"))
		    				calledReference++; //stats.put("calledReference", (stats.get("calledReference") + 1));
		    			else if(compareResult.contains("IndelFilter"))
		    				indelFilter++;	//stats.put("indelFilter", (stats.get("indelFilter") + 1));
		    			else if(compareResult.contains("StrandFilter"))
		    				strandFilter++;
		    			else if(compareResult.contains("Germline"))
		    				calledGermline++;	//stats.put("calledGermline", (stats.get("calledGermline") + 1));
		    			else if(compareResult.contains("Somatic"))
		    				calledSomatic++;	//stats.put("calledSomatic", (stats.get("calledSomatic") + 1));
		    			else if(compareResult.contains("LOH"))
		    				calledLOH++;	//stats.put("calledLOH", (stats.get("calledLOH") + 1));
		    			else if(compareResult.contains("Unknown"))
		    				calledUnknown++;	//stats.put("calledUnknown", (stats.get("calledUnknown") + 1));
		    			else if(compareResult.contains("Variant"))
		    				calledVariant++;	//stats.put("calledVariant", (stats.get("calledVariant") + 1));

				    	prevChromNormal = chromNormal;
				    	prevChromTumor = chromTumor;
		    		}
		    		else
		    		{
		    			//System.err.println("Failed to match positions " + chromNormal + " " + posNormal + " to Tumor " + chromTumor + " " + posTumor);
		    		}
		    	}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
96
22834644
net/sf/varscan/Somatic.java 332 678
net/sf/varscan/Somatic.java 1058 1391
----------------------------------------
	    		{

	    			// Begin try-catch for line parsing //

	    			try
	    			{
	    				String[] lineContents = line.split("\t", -1);

	    				// Verify expected pileup format //

	    				if(lineContents.length > 5 && lineContents[0].length() > 0 && lineContents[1].length() > 0 && lineContents[2].length() > 0 && lineContents[3].length() > 0)
	    				{
	    					sharedPositions++;

	    					// Parse common fields from line //
	    					String refName = lineContents[0];
	    					int position = Integer.parseInt(lineContents[1]);
	    					refBase = lineContents[2].toUpperCase();

	    					chromNormal = refName;
	    					chromTumor = refName;
	    					posNormal = position;
	    					posTumor = position;

	    					// Parse normal, which should be first sample //
	    					int normalOffset = 3;
	    					int pileupDepthNormal = Integer.parseInt(lineContents[normalOffset]);
		    	        	String normalBases = lineContents[normalOffset + 1];
		    	        	String normalQualities = lineContents[normalOffset + 2];

	    					// Parse tumor, which should be second sample //
	    					int tumorOffset = 6;
	    					int pileupDepthTumor = Integer.parseInt(lineContents[tumorOffset]);
		    	        	String tumorBases = lineContents[tumorOffset + 1];
		    	        	String tumorQualities = lineContents[tumorOffset + 2];

	    					lineNormal = refName + "\t" + position + "\t" + refBase + "\t" + pileupDepthNormal + "\t" + normalBases + "\t" + normalQualities;
	    					lineTumor = refName + "\t" + position + "\t" + refBase + "\t" + pileupDepthTumor + "\t" + tumorBases + "\t" + tumorQualities;

	    					String compareResult = comparePositions(lineNormal, lineTumor, minCoverage, minReads2, minVarFreq, minAvgQual, pValueThreshold, somaticPvalue, minFreqForHom, normalPurity, tumorPurity);

			    			if(compareResult.length() > 0)
			    			{
			    				// Get the alleles to determine type //
			    				String[] compareContents = compareResult.split("\t");
				    			String allele1 = compareContents[0];
				    			String allele2 = compareContents[1];

				    			double strandedness1 = 0.50;
				    			double strandedness2 = 0.50;
				    			double strandednessDiff = 0.00;

				    			if(compareContents.length >= 17)
				    			{
				    				try
				    				{
				    					int tumorReads1plus = Integer.parseInt(compareContents[13]);
				    					int tumorReads1minus = Integer.parseInt(compareContents[14]);
				    					int tumorReads2plus = Integer.parseInt(compareContents[15]);
				    					int tumorReads2minus = Integer.parseInt(compareContents[16]);

				    					if(tumorReads1plus > 0 || tumorReads1minus > 0)
				    					{
				    						strandedness1 = (double) tumorReads1plus / (double) (tumorReads1plus + tumorReads1minus);
				    					}

				    					if(tumorReads2plus > 0 || tumorReads2minus > 0)
				    					{
				    						strandedness2 = (double) tumorReads2plus / (double) (tumorReads2plus + tumorReads2minus);
				    						if(tumorReads1plus > 0 || tumorReads1minus > 0)
				    						{
				    							strandednessDiff = java.lang.Math.abs(strandedness1 - strandedness2);
				    						}
				    					}
				    				}
				    				catch(Exception e)
				    				{
				    					// Exception parsing info from compareResult //
				    				}
				    			}

			    				//stats.put("comparedPositions", (stats.get("comparedPositions") + 1));
				    			comparedPositions++;

			    				if(params.containsKey("verbose") && !compareResult.contains("Reference"))
			    					System.err.println(chromNormal + "\t" + posNormal + "\t" + compareResult);

			    				// If VCF format specified, supply it //

			    				if(params.containsKey("output-vcf"))
			    				{
			    					int normalReads1 = Integer.parseInt(compareContents[2]);
			    					int normalReads2 = Integer.parseInt(compareContents[3]);
			    					String normalFreq = compareContents[4];
			    					String normalCall = compareContents[5];
			    					int tumorReads1 = Integer.parseInt(compareContents[6]);
			    					int tumorReads2 = Integer.parseInt(compareContents[7]);
			    					String tumorFreq = compareContents[8];
			    					String tumorCall = compareContents[9];
			    					String somStatus = compareContents[10];
			    					Double germlineP = Double.parseDouble(compareContents[11]);
			    					Double somaticP = Double.parseDouble(compareContents[12]);

			    					int totalDepth = pileupDepthNormal + pileupDepthTumor;

			    					if(allele2.startsWith("+"))
			    					{
			    						// INSERTION //
			    						// Ref = ref base; Var = ref base followed by inserted bases //
			    						String varColumn = allele1 + allele2.replace("+", "");
			    						compareResult = "." + "\t" + allele1 + "\t" + varColumn + "\t" + ".";
			    					}
			    					else if(allele2.startsWith("-"))
			    					{
			    						// DELETION //
			    						// Ref = ref base followed by deleted bases; var = ref base //
			    						String refColumn = allele1 + allele2.replace("-", "");
			    						compareResult = "." + "\t" + refColumn + "\t" + allele1 + "\t" + ".";
			    					}
			    					else
			    					{
				    					compareResult = "." + "\t" + allele1 + "\t" + allele2 + "\t" + ".";
			    					}


			    					// Decide on filter field //
			    					if(doStrandFilter && strandednessDiff > 0.10 && (strandedness2 < 0.10 || strandedness2 > 0.90))
			    					{
			    						compareResult += "\t" + "str10";
			    					}
			    					else if(somStatus.equals("IndelFilter"))
			    					{
			    						compareResult += "\t" + "indelError";
			    					}
			    					else
			    					{
			    						compareResult += "\t" + "PASS";
			    					}

			    					// Determine somatic status id and score //
			    					int ssCode = 0;
			    					double somScore = 0;

			    					if(somStatus.equals("Reference"))
			    					{
			    						// Wildtype //
			    						ssCode = 0;
			    						calledReference++;
			    					}
			    					else if(somStatus.equals("Germline"))
			    					{
			    						// Germline //
			    						ssCode = 1;
			    						calledGermline++;
			    						if(somaticP == 0)
			    						{
			    							somScore = 0;
			    						}
			    						else
			    						{
			    							somScore = 0 - (10 * java.lang.Math.log10(somaticP));
			    						}
			    					}
			    					else if(somStatus.equals("Somatic"))
			    					{
			    						// Somatic //
			    						ssCode = 2;
			    						calledSomatic++;
			    						if(somaticP == 0)
			    						{
			    							somScore = 255;
			    						}
			    						else
			    						{
			    							somScore = 0 - (10 * java.lang.Math.log10(somaticP));
			    						}
			    					}
			    					else if(somStatus.equals("LOH"))
			    					{
			    						// LOH //
			    						ssCode = 3;
			    						calledLOH++;
			    						if(somaticP == 0)
			    						{
			    							somScore = 255;
			    						}
			    						else
			    						{
			    							somScore = 0 - (10 * java.lang.Math.log10(somaticP));
			    						}
			    					}
			    					else
			    					{
			    						// Unknown //
			    						calledUnknown++;
			    						ssCode = 5;
			    					}

			    					// Adjust somatic score //
			    					if(somScore > 255)
			    						somScore = 255;

			    					// Print the info field //

			    					compareResult += "\t" + "DP=" + totalDepth;
			    					if(somStatus.equals("Somatic"))
			    						compareResult += ";SOMATIC";
			    					compareResult += ";" + "SS=" + ssCode;
			    					compareResult += ";" + "SSC=" + (int) somScore;
			    					compareResult += ";" + "GPV=" + pvalueFormat.format(germlineP);
			    					compareResult += ";" + "SPV=" + pvalueFormat.format(somaticP);

			    					// Print the format field //

			    					String tumorDP4 = "";
			    					String normalDP4 = "";

					    			if(compareContents.length >= 17)
					    			{
					    				try
					    				{
					    					tumorDP4 = compareContents[13] + "," + compareContents[14] + "," + compareContents[15] + "," + compareContents[16];
					    					normalDP4 = compareContents[17] + "," + compareContents[18] + "," + compareContents[19] + "," + compareContents[20];
					    				}
					    				catch(Exception e)
					    				{
					    					// Exception parsing info from compareResult //
					    					tumorDP4 = "";
					    					normalDP4 = "";
					    				}
					    			}

					    			if(tumorDP4.length() > 0)
					    				compareResult += "\tGT:GQ:DP:RD:AD:FREQ:DP4";
					    			else
					    				compareResult += "\tGT:GQ:DP:RD:AD:FREQ";

			    					// Determine normal genotype //
			    					String normalGt = ".";
			    					String tumorGt = ".";
			    					if(normalCall.equals(refBase))
			    					{
			    						normalGt = "0/0";
			    					}
			    					else if(VarScan.isHeterozygous(normalCall))
			    					{
			    						normalGt = "0/1";
			    					}
			    					else
			    					{
			    						normalGt = "1/1";
			    					}

			    					if(tumorCall.equals(refBase))
			    					{
			    						tumorGt = "0/0";
			    					}
			    					else if(VarScan.isHeterozygous(tumorCall))
			    					{
			    						tumorGt = "0/1";
			    					}
			    					else
			    					{
			    						tumorGt = "1/1";
			    					}

			    					if(tumorDP4.length() > 0)
			    					{
				    					compareResult += "\t" + normalGt + ":.:" + pileupDepthNormal + ":" + normalReads1 + ":" + normalReads2 + ":" + normalFreq + ":" + normalDP4;
				    					compareResult += "\t" + tumorGt + ":.:" + pileupDepthTumor + ":" + tumorReads1 + ":" + tumorReads2 + ":" + tumorFreq + ":" + tumorDP4;
			    					}
			    					else
			    					{
				    					compareResult += "\t" + normalGt + ":.:" + pileupDepthNormal + ":" + normalReads1 + ":" + normalReads2 + ":" + normalFreq;
				    					compareResult += "\t" + tumorGt + ":.:" + pileupDepthTumor + ":" + tumorReads1 + ":" + tumorReads2 + ":" + tumorFreq;
			    					}
			    				}

			    				// Print to master file for validation //

			    				if(params.containsKey("validation"))
			    				{
			    					outValidation.println(chromNormal + "\t" + posNormal + "\t" + compareResult);
			    				}

			    				if(!params.containsKey("validation") && (compareResult.contains("Reference") || compareResult.contains("SS=0")  || compareResult.contains("Filter")))
			    				{
			    					// Don't print reference/indelfilter positions unless doing validation //
			    				}
			    				else if(doStrandFilter && strandednessDiff > 0.10 && (strandedness2 < 0.10 || strandedness2 > 0.90))
			    				{
			    					// If filter is set, ignore variants that are supported largely by one strand //
			    					if(!params.containsKey("output-vcf"))
			    						compareResult = "StrandFilter";
			    				}
			    				else if(allele1.contains("-") || allele1.contains("+") || allele2.contains("-") || allele2.contains("+"))//if(compareResult.contains("INS") || compareResult.contains("DEL"))
			    				{
			    					outIndel.println(chromNormal + "\t" + posNormal + "\t" + compareResult);
			    				}
			    				else
			    				{
				    				outSnp.println(chromNormal + "\t" + posNormal + "\t" + compareResult);
			    				}
			    			}
			    			else
			    			{
//			    				System.err.println("Uncalled" + chromNormal + "\t" + posNormal + "\t" + compareResult);
			    			}

			    			if(compareResult.contains("Reference"))
			    				calledReference++; //stats.put("calledReference", (stats.get("calledReference") + 1));
			    			else if(compareResult.contains("IndelFilter"))
			    				indelFilter++;	//stats.put("indelFilter", (stats.get("indelFilter") + 1));
			    			else if(compareResult.contains("StrandFilter"))
			    				strandFilter++;
			    			else if(compareResult.contains("Germline"))
			    				calledGermline++;	//stats.put("calledGermline", (stats.get("calledGermline") + 1));
			    			else if(compareResult.contains("Somatic"))
			    				calledSomatic++;	//stats.put("calledSomatic", (stats.get("calledSomatic") + 1));
			    			else if(compareResult.contains("LOH"))
			    				calledLOH++;	//stats.put("calledLOH", (stats.get("calledLOH") + 1));
			    			else if(compareResult.contains("Unknown"))
			    				calledUnknown++;	//stats.put("calledUnknown", (stats.get("calledUnknown") + 1));
			    			else if(compareResult.contains("Variant"))
			    				calledVariant++;	//stats.put("calledVariant", (stats.get("calledVariant") + 1));



	    				}
	    				else
	    				{
	    					System.err.println("Error: Invalid format or not enough samples in mpileup: " + line + "\n");
	    					return;
	    				}
	    			}
	    			catch(Exception e)
	    		    {
	    		    	System.err.println("Parsing Exception on line:\n" + line + "\n" + e.getLocalizedMessage());
	    				numParsingExceptions++;
	    				if(numParsingExceptions >= 5)
	    				{
	    					System.err.println("Too many parsing exceptions encountered; exiting");
	    					return;
	    				}
	    		    	return;
	    		    }
	    		}

----------------------------------------
		    	{
		    		normalWasReset = false;
		    		// Seek to matching Normal Position //

		    		while(chromNormal.equals(chromTumor) && posNormal < posTumor && ((lineNormal = normal.readLine()) != null))
		    		{
		    			String[] normalContents = lineNormal.split("\t");
				    	if(normalContents.length > 1)
				    	{
					    	chromNormal = normalContents[0];
					    	posNormal = Integer.parseInt(normalContents[1]);
				    	}
		    		}

		    		// Seek to matching Tumor Position //

		    		while(chromNormal.equals(chromTumor) && posTumor < posNormal && ((lineTumor = tumor.readLine()) != null))
		    		{
		    			tumorContents = lineTumor.split("\t");
				    	if(tumorContents.length > 1)
				    	{
					    	chromTumor = tumorContents[0];
					    	posTumor = Integer.parseInt(tumorContents[1]);
				    	}
		    		}

		    		// Proceed if normal and tumor positions match //

		    		if(chromNormal.equals(chromTumor) && chromNormal.equals(chromTumor) && posNormal == posTumor)
		    		{
		    			//stats.put("sharedPositions", (stats.get("sharedPositions") + 1));
		    			sharedPositions++;
		    			if(params.containsKey("verbose"))
		    					System.err.println("Comparing calls at " + chromTumor + ":" + posTumor);

		    			refBase = tumorContents[2];
		    			String compareResult = comparePositions(lineNormal, lineTumor, minCoverage, minReads2, minVarFreq, minAvgQual, pValueThreshold, somaticPvalue, minFreqForHom, normalPurity, tumorPurity);

		    			if(compareResult.length() > 0)
		    			{
		    				// Get the alleles to determine type //
		    				String[] compareContents = compareResult.split("\t");
			    			String allele1 = compareContents[0];
			    			String allele2 = compareContents[1];

			    			double strandedness1 = 0.50;
			    			double strandedness2 = 0.50;
			    			double strandednessDiff = 0.00;

			    			if(compareContents.length >= 17)
			    			{
			    				try
			    				{
			    					int tumorReads1plus = Integer.parseInt(compareContents[13]);
			    					int tumorReads1minus = Integer.parseInt(compareContents[14]);
			    					int tumorReads2plus = Integer.parseInt(compareContents[15]);
			    					int tumorReads2minus = Integer.parseInt(compareContents[16]);

			    					if(tumorReads1plus > 0 || tumorReads1minus > 0)
			    					{
			    						strandedness1 = (double) tumorReads1plus / (double) (tumorReads1plus + tumorReads1minus);
			    					}

			    					if(tumorReads2plus > 0 || tumorReads2minus > 0)
			    					{
			    						strandedness2 = (double) tumorReads2plus / (double) (tumorReads2plus + tumorReads2minus);
			    						if(tumorReads1plus > 0 || tumorReads1minus > 0)
			    						{
			    							strandednessDiff = java.lang.Math.abs(strandedness1 - strandedness2);
			    						}
			    					}
			    				}
			    				catch(Exception e)
			    				{
			    					// Exception parsing info from compareResult //
			    				}
			    			}

		    				//stats.put("comparedPositions", (stats.get("comparedPositions") + 1));
			    			comparedPositions++;

		    				if(params.containsKey("verbose") && !compareResult.contains("Reference"))
		    					System.err.println(chromNormal + "\t" + posNormal + "\t" + compareResult);

		    				// If VCF format specified, supply it //

		    				if(params.containsKey("output-vcf"))
		    				{
		    					int normalReads1 = Integer.parseInt(compareContents[2]);
		    					int normalReads2 = Integer.parseInt(compareContents[3]);
		    					String normalFreq = compareContents[4];
		    					String normalCall = compareContents[5];
		    					int tumorReads1 = Integer.parseInt(compareContents[6]);
		    					int tumorReads2 = Integer.parseInt(compareContents[7]);
		    					String tumorFreq = compareContents[8];
		    					String tumorCall = compareContents[9];
		    					String somStatus = compareContents[10];
		    					Double germlineP = Double.parseDouble(compareContents[11]);
		    					Double somaticP = Double.parseDouble(compareContents[12]);

		    					String[] normalContents = lineNormal.split("\t");
		    					//tumorContents = lineTumor.split("\t");
		    					int pileupDepthNormal = Integer.parseInt(normalContents[3]);
		    					int pileupDepthTumor = Integer.parseInt(tumorContents[3]);

		    					int totalDepth = pileupDepthNormal + pileupDepthTumor;

		    					if(allele2.startsWith("+"))
		    					{
		    						// INSERTION //
		    						// Ref = ref base; Var = ref base followed by inserted bases //
		    						String varColumn = allele1 + allele2.replace("+", "");
		    						compareResult = "." + "\t" + allele1 + "\t" + varColumn + "\t" + ".";
		    					}
		    					else if(allele2.startsWith("-"))
		    					{
		    						// DELETION //
		    						// Ref = ref base followed by deleted bases; var = ref base //
		    						String refColumn = allele1 + allele2.replace("-", "");
		    						compareResult = "." + "\t" + refColumn + "\t" + allele1 + "\t" + ".";
		    					}
		    					else
		    					{
			    					compareResult = "." + "\t" + allele1 + "\t" + allele2 + "\t" + ".";
		    					}


		    					// Decide on filter field //
		    					if(params.containsKey("strand-filter") && strandednessDiff > 0.10 && (strandedness2 < 0.10 || strandedness2 > 0.90))
		    					{
		    						compareResult += "\t" + "str10";
		    					}
		    					else if(somStatus.equals("IndelFilter"))
		    					{
		    						compareResult += "\t" + "indelError";
		    					}
		    					else
		    					{
		    						compareResult += "\t" + "PASS";
		    					}

		    					// Determine somatic status id and score //
		    					int ssCode = 0;
		    					double somScore = 0;

		    					if(somStatus.equals("Reference"))
		    					{
		    						// Wildtype //
		    						ssCode = 0;
		    						calledReference++;
		    					}
		    					else if(somStatus.equals("Germline"))
		    					{
		    						// Germline //
		    						ssCode = 1;
		    						calledGermline++;
		    						if(somaticP == 0)
		    						{
		    							somScore = 0;
		    						}
		    						else
		    						{
		    							somScore = 0 - (10 * java.lang.Math.log10(somaticP));
		    						}
		    					}
		    					else if(somStatus.equals("Somatic"))
		    					{
		    						// Somatic //
		    						ssCode = 2;
		    						calledSomatic++;
		    						if(somaticP == 0)
		    						{
		    							somScore = 255;
		    						}
		    						else
		    						{
		    							somScore = 0 - (10 * java.lang.Math.log10(somaticP));
		    						}
		    					}
		    					else if(somStatus.equals("LOH"))
		    					{
		    						// LOH //
		    						ssCode = 3;
		    						calledLOH++;
		    						if(somaticP == 0)
		    						{
		    							somScore = 255;
		    						}
		    						else
		    						{
		    							somScore = 0 - (10 * java.lang.Math.log10(somaticP));
		    						}
		    					}
		    					else
		    					{
		    						// Unknown //
		    						calledUnknown++;
		    						ssCode = 5;
		    					}

		    					// Adjust somatic score //
		    					if(somScore > 255)
		    						somScore = 255;

		    					// Print the info field //

		    					compareResult += "\t" + "DP=" + totalDepth;
		    					if(somStatus.equals("Somatic"))
		    						compareResult += ";SOMATIC";
		    					compareResult += ";" + "SS=" + ssCode;
		    					compareResult += ";" + "SSC=" + (int) somScore;
		    					compareResult += ";" + "GPV=" + pvalueFormat.format(germlineP);
		    					compareResult += ";" + "SPV=" + pvalueFormat.format(somaticP);

		    					// Print the format field //

		    					String tumorDP4 = "";
		    					String normalDP4 = "";

				    			if(compareContents.length >= 17)
				    			{
				    				try
				    				{
				    					tumorDP4 = compareContents[13] + "," + compareContents[14] + "," + compareContents[15] + "," + compareContents[16];
				    					normalDP4 = compareContents[17] + "," + compareContents[18] + "," + compareContents[19] + "," + compareContents[20];
				    				}
				    				catch(Exception e)
				    				{
				    					// Exception parsing info from compareResult //
				    					tumorDP4 = "";
				    					normalDP4 = "";
				    				}
				    			}

				    			if(tumorDP4.length() > 0)
				    				compareResult += "\tGT:GQ:DP:RD:AD:FREQ:DP4";
				    			else
				    				compareResult += "\tGT:GQ:DP:RD:AD:FREQ";

		    					// Determine normal genotype //
		    					String normalGt = ".";
		    					String tumorGt = ".";
		    					if(normalCall.equals(refBase))
		    					{
		    						normalGt = "0/0";
		    					}
		    					else if(VarScan.isHeterozygous(normalCall))
		    					{
		    						normalGt = "0/1";
		    					}
		    					else
		    					{
		    						normalGt = "1/1";
		    					}

		    					if(tumorCall.equals(refBase))
		    					{
		    						tumorGt = "0/0";
		    					}
		    					else if(VarScan.isHeterozygous(tumorCall))
		    					{
		    						tumorGt = "0/1";
		    					}
		    					else
		    					{
		    						tumorGt = "1/1";
		    					}

		    					if(tumorDP4.length() > 0)
		    					{
			    					compareResult += "\t" + normalGt + ":.:" + pileupDepthNormal + ":" + normalReads1 + ":" + normalReads2 + ":" + normalFreq + ":" + normalDP4;
			    					compareResult += "\t" + tumorGt + ":.:" + pileupDepthTumor + ":" + tumorReads1 + ":" + tumorReads2 + ":" + tumorFreq + ":" + tumorDP4;
		    					}
		    					else
		    					{
			    					compareResult += "\t" + normalGt + ":.:" + pileupDepthNormal + ":" + normalReads1 + ":" + normalReads2 + ":" + normalFreq;
			    					compareResult += "\t" + tumorGt + ":.:" + pileupDepthTumor + ":" + tumorReads1 + ":" + tumorReads2 + ":" + tumorFreq;
		    					}
		    				}
		    				// Print to master file for validation //

		    				if(params.containsKey("validation"))
		    				{
		    					outValidation.println(chromNormal + "\t" + posNormal + "\t" + compareResult);
		    				}

		    				if(!params.containsKey("validation") && (compareResult.contains("Reference") || compareResult.contains("SS=0") || compareResult.contains("Filter")))
		    				{
		    					// Don't print reference/indelfilter positions unless doing validation //
		    				}
		    				else if(params.containsKey("strand-filter") && strandednessDiff > 0.10 && (strandedness2 < 0.10 || strandedness2 > 0.90))
		    				{
		    					// If filter is set, ignore variants that are supported largely by one strand //
		    					compareResult = "StrandFilter";
		    				}
		    				else if(allele1.contains("-") || allele1.contains("+") || allele2.contains("-") || allele2.contains("+"))//if(compareResult.contains("INS") || compareResult.contains("DEL"))
		    				{
		    					outIndel.println(chromNormal + "\t" + posNormal + "\t" + compareResult);
		    				}
		    				else
		    				{
			    				outSnp.println(chromNormal + "\t" + posNormal + "\t" + compareResult);
		    				}
		    			}
		    			else
		    			{
//		    				System.err.println("Uncalled" + chromNormal + "\t" + posNormal + "\t" + compareResult);
		    			}

		    			if(compareResult.contains("Reference"))
		    				calledReference++; //stats.put("calledReference", (stats.get("calledReference") + 1));
		    			else if(compareResult.contains("IndelFilter"))
		    				indelFilter++;	//stats.put("indelFilter", (stats.get("indelFilter") + 1));
		    			else if(compareResult.contains("StrandFilter"))
		    				strandFilter++;
		    			else if(compareResult.contains("Germline"))
		    				calledGermline++;	//stats.put("calledGermline", (stats.get("calledGermline") + 1));
		    			else if(compareResult.contains("Somatic"))
		    				calledSomatic++;	//stats.put("calledSomatic", (stats.get("calledSomatic") + 1));
		    			else if(compareResult.contains("LOH"))
		    				calledLOH++;	//stats.put("calledLOH", (stats.get("calledLOH") + 1));
		    			else if(compareResult.contains("Unknown"))
		    				calledUnknown++;	//stats.put("calledUnknown", (stats.get("calledUnknown") + 1));
		    			else if(compareResult.contains("Variant"))
		    				calledVariant++;	//stats.put("calledVariant", (stats.get("calledVariant") + 1));

				    	prevChromNormal = chromNormal;
				    	prevChromTumor = chromTumor;
		    		}
		    		else
		    		{
		    			//System.err.println("Failed to match positions " + chromNormal + " " + posNormal + " to Tumor " + chromTumor + " " + posTumor);
		    		}
		    	}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
96
22834653
net/sf/varscan/Somatic.java 374 635
net/sf/varscan/Somatic.java 1087 1386
----------------------------------------
			    			{
			    				// Get the alleles to determine type //
			    				String[] compareContents = compareResult.split("\t");
				    			String allele1 = compareContents[0];
				    			String allele2 = compareContents[1];

				    			double strandedness1 = 0.50;
				    			double strandedness2 = 0.50;
				    			double strandednessDiff = 0.00;

				    			if(compareContents.length >= 17)
				    			{
				    				try
				    				{
				    					int tumorReads1plus = Integer.parseInt(compareContents[13]);
				    					int tumorReads1minus = Integer.parseInt(compareContents[14]);
				    					int tumorReads2plus = Integer.parseInt(compareContents[15]);
				    					int tumorReads2minus = Integer.parseInt(compareContents[16]);

				    					if(tumorReads1plus > 0 || tumorReads1minus > 0)
				    					{
				    						strandedness1 = (double) tumorReads1plus / (double) (tumorReads1plus + tumorReads1minus);
				    					}

				    					if(tumorReads2plus > 0 || tumorReads2minus > 0)
				    					{
				    						strandedness2 = (double) tumorReads2plus / (double) (tumorReads2plus + tumorReads2minus);
				    						if(tumorReads1plus > 0 || tumorReads1minus > 0)
				    						{
				    							strandednessDiff = java.lang.Math.abs(strandedness1 - strandedness2);
				    						}
				    					}
				    				}
				    				catch(Exception e)
				    				{
				    					// Exception parsing info from compareResult //
				    				}
				    			}

			    				//stats.put("comparedPositions", (stats.get("comparedPositions") + 1));
				    			comparedPositions++;

			    				if(params.containsKey("verbose") && !compareResult.contains("Reference"))
			    					System.err.println(chromNormal + "\t" + posNormal + "\t" + compareResult);

			    				// If VCF format specified, supply it //

			    				if(params.containsKey("output-vcf"))
			    				{
			    					int normalReads1 = Integer.parseInt(compareContents[2]);
			    					int normalReads2 = Integer.parseInt(compareContents[3]);
			    					String normalFreq = compareContents[4];
			    					String normalCall = compareContents[5];
			    					int tumorReads1 = Integer.parseInt(compareContents[6]);
			    					int tumorReads2 = Integer.parseInt(compareContents[7]);
			    					String tumorFreq = compareContents[8];
			    					String tumorCall = compareContents[9];
			    					String somStatus = compareContents[10];
			    					Double germlineP = Double.parseDouble(compareContents[11]);
			    					Double somaticP = Double.parseDouble(compareContents[12]);

			    					int totalDepth = pileupDepthNormal + pileupDepthTumor;

			    					if(allele2.startsWith("+"))
			    					{
			    						// INSERTION //
			    						// Ref = ref base; Var = ref base followed by inserted bases //
			    						String varColumn = allele1 + allele2.replace("+", "");
			    						compareResult = "." + "\t" + allele1 + "\t" + varColumn + "\t" + ".";
			    					}
			    					else if(allele2.startsWith("-"))
			    					{
			    						// DELETION //
			    						// Ref = ref base followed by deleted bases; var = ref base //
			    						String refColumn = allele1 + allele2.replace("-", "");
			    						compareResult = "." + "\t" + refColumn + "\t" + allele1 + "\t" + ".";
			    					}
			    					else
			    					{
				    					compareResult = "." + "\t" + allele1 + "\t" + allele2 + "\t" + ".";
			    					}


			    					// Decide on filter field //
			    					if(doStrandFilter && strandednessDiff > 0.10 && (strandedness2 < 0.10 || strandedness2 > 0.90))
			    					{
			    						compareResult += "\t" + "str10";
			    					}
			    					else if(somStatus.equals("IndelFilter"))
			    					{
			    						compareResult += "\t" + "indelError";
			    					}
			    					else
			    					{
			    						compareResult += "\t" + "PASS";
			    					}

			    					// Determine somatic status id and score //
			    					int ssCode = 0;
			    					double somScore = 0;

			    					if(somStatus.equals("Reference"))
			    					{
			    						// Wildtype //
			    						ssCode = 0;
			    						calledReference++;
			    					}
			    					else if(somStatus.equals("Germline"))
			    					{
			    						// Germline //
			    						ssCode = 1;
			    						calledGermline++;
			    						if(somaticP == 0)
			    						{
			    							somScore = 0;
			    						}
			    						else
			    						{
			    							somScore = 0 - (10 * java.lang.Math.log10(somaticP));
			    						}
			    					}
			    					else if(somStatus.equals("Somatic"))
			    					{
			    						// Somatic //
			    						ssCode = 2;
			    						calledSomatic++;
			    						if(somaticP == 0)
			    						{
			    							somScore = 255;
			    						}
			    						else
			    						{
			    							somScore = 0 - (10 * java.lang.Math.log10(somaticP));
			    						}
			    					}
			    					else if(somStatus.equals("LOH"))
			    					{
			    						// LOH //
			    						ssCode = 3;
			    						calledLOH++;
			    						if(somaticP == 0)
			    						{
			    							somScore = 255;
			    						}
			    						else
			    						{
			    							somScore = 0 - (10 * java.lang.Math.log10(somaticP));
			    						}
			    					}
			    					else
			    					{
			    						// Unknown //
			    						calledUnknown++;
			    						ssCode = 5;
			    					}

			    					// Adjust somatic score //
			    					if(somScore > 255)
			    						somScore = 255;

			    					// Print the info field //

			    					compareResult += "\t" + "DP=" + totalDepth;
			    					if(somStatus.equals("Somatic"))
			    						compareResult += ";SOMATIC";
			    					compareResult += ";" + "SS=" + ssCode;
			    					compareResult += ";" + "SSC=" + (int) somScore;
			    					compareResult += ";" + "GPV=" + pvalueFormat.format(germlineP);
			    					compareResult += ";" + "SPV=" + pvalueFormat.format(somaticP);

			    					// Print the format field //

			    					String tumorDP4 = "";
			    					String normalDP4 = "";

					    			if(compareContents.length >= 17)
					    			{
					    				try
					    				{
					    					tumorDP4 = compareContents[13] + "," + compareContents[14] + "," + compareContents[15] + "," + compareContents[16];
					    					normalDP4 = compareContents[17] + "," + compareContents[18] + "," + compareContents[19] + "," + compareContents[20];
					    				}
					    				catch(Exception e)
					    				{
					    					// Exception parsing info from compareResult //
					    					tumorDP4 = "";
					    					normalDP4 = "";
					    				}
					    			}

					    			if(tumorDP4.length() > 0)
					    				compareResult += "\tGT:GQ:DP:RD:AD:FREQ:DP4";
					    			else
					    				compareResult += "\tGT:GQ:DP:RD:AD:FREQ";

			    					// Determine normal genotype //
			    					String normalGt = ".";
			    					String tumorGt = ".";
			    					if(normalCall.equals(refBase))
			    					{
			    						normalGt = "0/0";
			    					}
			    					else if(VarScan.isHeterozygous(normalCall))
			    					{
			    						normalGt = "0/1";
			    					}
			    					else
			    					{
			    						normalGt = "1/1";
			    					}

			    					if(tumorCall.equals(refBase))
			    					{
			    						tumorGt = "0/0";
			    					}
			    					else if(VarScan.isHeterozygous(tumorCall))
			    					{
			    						tumorGt = "0/1";
			    					}
			    					else
			    					{
			    						tumorGt = "1/1";
			    					}

			    					if(tumorDP4.length() > 0)
			    					{
				    					compareResult += "\t" + normalGt + ":.:" + pileupDepthNormal + ":" + normalReads1 + ":" + normalReads2 + ":" + normalFreq + ":" + normalDP4;
				    					compareResult += "\t" + tumorGt + ":.:" + pileupDepthTumor + ":" + tumorReads1 + ":" + tumorReads2 + ":" + tumorFreq + ":" + tumorDP4;
			    					}
			    					else
			    					{
				    					compareResult += "\t" + normalGt + ":.:" + pileupDepthNormal + ":" + normalReads1 + ":" + normalReads2 + ":" + normalFreq;
				    					compareResult += "\t" + tumorGt + ":.:" + pileupDepthTumor + ":" + tumorReads1 + ":" + tumorReads2 + ":" + tumorFreq;
			    					}
			    				}

			    				// Print to master file for validation //

			    				if(params.containsKey("validation"))
			    				{
			    					outValidation.println(chromNormal + "\t" + posNormal + "\t" + compareResult);
			    				}

			    				if(!params.containsKey("validation") && (compareResult.contains("Reference") || compareResult.contains("SS=0")  || compareResult.contains("Filter")))
			    				{
			    					// Don't print reference/indelfilter positions unless doing validation //
			    				}
			    				else if(doStrandFilter && strandednessDiff > 0.10 && (strandedness2 < 0.10 || strandedness2 > 0.90))
			    				{
			    					// If filter is set, ignore variants that are supported largely by one strand //
			    					if(!params.containsKey("output-vcf"))
			    						compareResult = "StrandFilter";
			    				}
			    				else if(allele1.contains("-") || allele1.contains("+") || allele2.contains("-") || allele2.contains("+"))//if(compareResult.contains("INS") || compareResult.contains("DEL"))
			    				{
			    					outIndel.println(chromNormal + "\t" + posNormal + "\t" + compareResult);
			    				}
			    				else
			    				{
				    				outSnp.println(chromNormal + "\t" + posNormal + "\t" + compareResult);
			    				}
			    			}

----------------------------------------
		    		{
		    			//stats.put("sharedPositions", (stats.get("sharedPositions") + 1));
		    			sharedPositions++;
		    			if(params.containsKey("verbose"))
		    					System.err.println("Comparing calls at " + chromTumor + ":" + posTumor);

		    			refBase = tumorContents[2];
		    			String compareResult = comparePositions(lineNormal, lineTumor, minCoverage, minReads2, minVarFreq, minAvgQual, pValueThreshold, somaticPvalue, minFreqForHom, normalPurity, tumorPurity);

		    			if(compareResult.length() > 0)
		    			{
		    				// Get the alleles to determine type //
		    				String[] compareContents = compareResult.split("\t");
			    			String allele1 = compareContents[0];
			    			String allele2 = compareContents[1];

			    			double strandedness1 = 0.50;
			    			double strandedness2 = 0.50;
			    			double strandednessDiff = 0.00;

			    			if(compareContents.length >= 17)
			    			{
			    				try
			    				{
			    					int tumorReads1plus = Integer.parseInt(compareContents[13]);
			    					int tumorReads1minus = Integer.parseInt(compareContents[14]);
			    					int tumorReads2plus = Integer.parseInt(compareContents[15]);
			    					int tumorReads2minus = Integer.parseInt(compareContents[16]);

			    					if(tumorReads1plus > 0 || tumorReads1minus > 0)
			    					{
			    						strandedness1 = (double) tumorReads1plus / (double) (tumorReads1plus + tumorReads1minus);
			    					}

			    					if(tumorReads2plus > 0 || tumorReads2minus > 0)
			    					{
			    						strandedness2 = (double) tumorReads2plus / (double) (tumorReads2plus + tumorReads2minus);
			    						if(tumorReads1plus > 0 || tumorReads1minus > 0)
			    						{
			    							strandednessDiff = java.lang.Math.abs(strandedness1 - strandedness2);
			    						}
			    					}
			    				}
			    				catch(Exception e)
			    				{
			    					// Exception parsing info from compareResult //
			    				}
			    			}

		    				//stats.put("comparedPositions", (stats.get("comparedPositions") + 1));
			    			comparedPositions++;

		    				if(params.containsKey("verbose") && !compareResult.contains("Reference"))
		    					System.err.println(chromNormal + "\t" + posNormal + "\t" + compareResult);

		    				// If VCF format specified, supply it //

		    				if(params.containsKey("output-vcf"))
		    				{
		    					int normalReads1 = Integer.parseInt(compareContents[2]);
		    					int normalReads2 = Integer.parseInt(compareContents[3]);
		    					String normalFreq = compareContents[4];
		    					String normalCall = compareContents[5];
		    					int tumorReads1 = Integer.parseInt(compareContents[6]);
		    					int tumorReads2 = Integer.parseInt(compareContents[7]);
		    					String tumorFreq = compareContents[8];
		    					String tumorCall = compareContents[9];
		    					String somStatus = compareContents[10];
		    					Double germlineP = Double.parseDouble(compareContents[11]);
		    					Double somaticP = Double.parseDouble(compareContents[12]);

		    					String[] normalContents = lineNormal.split("\t");
		    					//tumorContents = lineTumor.split("\t");
		    					int pileupDepthNormal = Integer.parseInt(normalContents[3]);
		    					int pileupDepthTumor = Integer.parseInt(tumorContents[3]);

		    					int totalDepth = pileupDepthNormal + pileupDepthTumor;

		    					if(allele2.startsWith("+"))
		    					{
		    						// INSERTION //
		    						// Ref = ref base; Var = ref base followed by inserted bases //
		    						String varColumn = allele1 + allele2.replace("+", "");
		    						compareResult = "." + "\t" + allele1 + "\t" + varColumn + "\t" + ".";
		    					}
		    					else if(allele2.startsWith("-"))
		    					{
		    						// DELETION //
		    						// Ref = ref base followed by deleted bases; var = ref base //
		    						String refColumn = allele1 + allele2.replace("-", "");
		    						compareResult = "." + "\t" + refColumn + "\t" + allele1 + "\t" + ".";
		    					}
		    					else
		    					{
			    					compareResult = "." + "\t" + allele1 + "\t" + allele2 + "\t" + ".";
		    					}


		    					// Decide on filter field //
		    					if(params.containsKey("strand-filter") && strandednessDiff > 0.10 && (strandedness2 < 0.10 || strandedness2 > 0.90))
		    					{
		    						compareResult += "\t" + "str10";
		    					}
		    					else if(somStatus.equals("IndelFilter"))
		    					{
		    						compareResult += "\t" + "indelError";
		    					}
		    					else
		    					{
		    						compareResult += "\t" + "PASS";
		    					}

		    					// Determine somatic status id and score //
		    					int ssCode = 0;
		    					double somScore = 0;

		    					if(somStatus.equals("Reference"))
		    					{
		    						// Wildtype //
		    						ssCode = 0;
		    						calledReference++;
		    					}
		    					else if(somStatus.equals("Germline"))
		    					{
		    						// Germline //
		    						ssCode = 1;
		    						calledGermline++;
		    						if(somaticP == 0)
		    						{
		    							somScore = 0;
		    						}
		    						else
		    						{
		    							somScore = 0 - (10 * java.lang.Math.log10(somaticP));
		    						}
		    					}
		    					else if(somStatus.equals("Somatic"))
		    					{
		    						// Somatic //
		    						ssCode = 2;
		    						calledSomatic++;
		    						if(somaticP == 0)
		    						{
		    							somScore = 255;
		    						}
		    						else
		    						{
		    							somScore = 0 - (10 * java.lang.Math.log10(somaticP));
		    						}
		    					}
		    					else if(somStatus.equals("LOH"))
		    					{
		    						// LOH //
		    						ssCode = 3;
		    						calledLOH++;
		    						if(somaticP == 0)
		    						{
		    							somScore = 255;
		    						}
		    						else
		    						{
		    							somScore = 0 - (10 * java.lang.Math.log10(somaticP));
		    						}
		    					}
		    					else
		    					{
		    						// Unknown //
		    						calledUnknown++;
		    						ssCode = 5;
		    					}

		    					// Adjust somatic score //
		    					if(somScore > 255)
		    						somScore = 255;

		    					// Print the info field //

		    					compareResult += "\t" + "DP=" + totalDepth;
		    					if(somStatus.equals("Somatic"))
		    						compareResult += ";SOMATIC";
		    					compareResult += ";" + "SS=" + ssCode;
		    					compareResult += ";" + "SSC=" + (int) somScore;
		    					compareResult += ";" + "GPV=" + pvalueFormat.format(germlineP);
		    					compareResult += ";" + "SPV=" + pvalueFormat.format(somaticP);

		    					// Print the format field //

		    					String tumorDP4 = "";
		    					String normalDP4 = "";

				    			if(compareContents.length >= 17)
				    			{
				    				try
				    				{
				    					tumorDP4 = compareContents[13] + "," + compareContents[14] + "," + compareContents[15] + "," + compareContents[16];
				    					normalDP4 = compareContents[17] + "," + compareContents[18] + "," + compareContents[19] + "," + compareContents[20];
				    				}
				    				catch(Exception e)
				    				{
				    					// Exception parsing info from compareResult //
				    					tumorDP4 = "";
				    					normalDP4 = "";
				    				}
				    			}

				    			if(tumorDP4.length() > 0)
				    				compareResult += "\tGT:GQ:DP:RD:AD:FREQ:DP4";
				    			else
				    				compareResult += "\tGT:GQ:DP:RD:AD:FREQ";

		    					// Determine normal genotype //
		    					String normalGt = ".";
		    					String tumorGt = ".";
		    					if(normalCall.equals(refBase))
		    					{
		    						normalGt = "0/0";
		    					}
		    					else if(VarScan.isHeterozygous(normalCall))
		    					{
		    						normalGt = "0/1";
		    					}
		    					else
		    					{
		    						normalGt = "1/1";
		    					}

		    					if(tumorCall.equals(refBase))
		    					{
		    						tumorGt = "0/0";
		    					}
		    					else if(VarScan.isHeterozygous(tumorCall))
		    					{
		    						tumorGt = "0/1";
		    					}
		    					else
		    					{
		    						tumorGt = "1/1";
		    					}

		    					if(tumorDP4.length() > 0)
		    					{
			    					compareResult += "\t" + normalGt + ":.:" + pileupDepthNormal + ":" + normalReads1 + ":" + normalReads2 + ":" + normalFreq + ":" + normalDP4;
			    					compareResult += "\t" + tumorGt + ":.:" + pileupDepthTumor + ":" + tumorReads1 + ":" + tumorReads2 + ":" + tumorFreq + ":" + tumorDP4;
		    					}
		    					else
		    					{
			    					compareResult += "\t" + normalGt + ":.:" + pileupDepthNormal + ":" + normalReads1 + ":" + normalReads2 + ":" + normalFreq;
			    					compareResult += "\t" + tumorGt + ":.:" + pileupDepthTumor + ":" + tumorReads1 + ":" + tumorReads2 + ":" + tumorFreq;
		    					}
		    				}
		    				// Print to master file for validation //

		    				if(params.containsKey("validation"))
		    				{
		    					outValidation.println(chromNormal + "\t" + posNormal + "\t" + compareResult);
		    				}

		    				if(!params.containsKey("validation") && (compareResult.contains("Reference") || compareResult.contains("SS=0") || compareResult.contains("Filter")))
		    				{
		    					// Don't print reference/indelfilter positions unless doing validation //
		    				}
		    				else if(params.containsKey("strand-filter") && strandednessDiff > 0.10 && (strandedness2 < 0.10 || strandedness2 > 0.90))
		    				{
		    					// If filter is set, ignore variants that are supported largely by one strand //
		    					compareResult = "StrandFilter";
		    				}
		    				else if(allele1.contains("-") || allele1.contains("+") || allele2.contains("-") || allele2.contains("+"))//if(compareResult.contains("INS") || compareResult.contains("DEL"))
		    				{
		    					outIndel.println(chromNormal + "\t" + posNormal + "\t" + compareResult);
		    				}
		    				else
		    				{
			    				outSnp.println(chromNormal + "\t" + posNormal + "\t" + compareResult);
		    				}
		    			}
		    			else
		    			{
//		    				System.err.println("Uncalled" + chromNormal + "\t" + posNormal + "\t" + compareResult);
		    			}

		    			if(compareResult.contains("Reference"))
		    				calledReference++; //stats.put("calledReference", (stats.get("calledReference") + 1));
		    			else if(compareResult.contains("IndelFilter"))
		    				indelFilter++;	//stats.put("indelFilter", (stats.get("indelFilter") + 1));
		    			else if(compareResult.contains("StrandFilter"))
		    				strandFilter++;
		    			else if(compareResult.contains("Germline"))
		    				calledGermline++;	//stats.put("calledGermline", (stats.get("calledGermline") + 1));
		    			else if(compareResult.contains("Somatic"))
		    				calledSomatic++;	//stats.put("calledSomatic", (stats.get("calledSomatic") + 1));
		    			else if(compareResult.contains("LOH"))
		    				calledLOH++;	//stats.put("calledLOH", (stats.get("calledLOH") + 1));
		    			else if(compareResult.contains("Unknown"))
		    				calledUnknown++;	//stats.put("calledUnknown", (stats.get("calledUnknown") + 1));
		    			else if(compareResult.contains("Variant"))
		    				calledVariant++;	//stats.put("calledVariant", (stats.get("calledVariant") + 1));

				    	prevChromNormal = chromNormal;
				    	prevChromTumor = chromTumor;
		    		}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
96
22834651
net/sf/varscan/Somatic.java 337 666
net/sf/varscan/Somatic.java 1087 1386
----------------------------------------
	    			{
	    				String[] lineContents = line.split("\t", -1);

	    				// Verify expected pileup format //

	    				if(lineContents.length > 5 && lineContents[0].length() > 0 && lineContents[1].length() > 0 && lineContents[2].length() > 0 && lineContents[3].length() > 0)
	    				{
	    					sharedPositions++;

	    					// Parse common fields from line //
	    					String refName = lineContents[0];
	    					int position = Integer.parseInt(lineContents[1]);
	    					refBase = lineContents[2].toUpperCase();

	    					chromNormal = refName;
	    					chromTumor = refName;
	    					posNormal = position;
	    					posTumor = position;

	    					// Parse normal, which should be first sample //
	    					int normalOffset = 3;
	    					int pileupDepthNormal = Integer.parseInt(lineContents[normalOffset]);
		    	        	String normalBases = lineContents[normalOffset + 1];
		    	        	String normalQualities = lineContents[normalOffset + 2];

	    					// Parse tumor, which should be second sample //
	    					int tumorOffset = 6;
	    					int pileupDepthTumor = Integer.parseInt(lineContents[tumorOffset]);
		    	        	String tumorBases = lineContents[tumorOffset + 1];
		    	        	String tumorQualities = lineContents[tumorOffset + 2];

	    					lineNormal = refName + "\t" + position + "\t" + refBase + "\t" + pileupDepthNormal + "\t" + normalBases + "\t" + normalQualities;
	    					lineTumor = refName + "\t" + position + "\t" + refBase + "\t" + pileupDepthTumor + "\t" + tumorBases + "\t" + tumorQualities;

	    					String compareResult = comparePositions(lineNormal, lineTumor, minCoverage, minReads2, minVarFreq, minAvgQual, pValueThreshold, somaticPvalue, minFreqForHom, normalPurity, tumorPurity);

			    			if(compareResult.length() > 0)
			    			{
			    				// Get the alleles to determine type //
			    				String[] compareContents = compareResult.split("\t");
				    			String allele1 = compareContents[0];
				    			String allele2 = compareContents[1];

				    			double strandedness1 = 0.50;
				    			double strandedness2 = 0.50;
				    			double strandednessDiff = 0.00;

				    			if(compareContents.length >= 17)
				    			{
				    				try
				    				{
				    					int tumorReads1plus = Integer.parseInt(compareContents[13]);
				    					int tumorReads1minus = Integer.parseInt(compareContents[14]);
				    					int tumorReads2plus = Integer.parseInt(compareContents[15]);
				    					int tumorReads2minus = Integer.parseInt(compareContents[16]);

				    					if(tumorReads1plus > 0 || tumorReads1minus > 0)
				    					{
				    						strandedness1 = (double) tumorReads1plus / (double) (tumorReads1plus + tumorReads1minus);
				    					}

				    					if(tumorReads2plus > 0 || tumorReads2minus > 0)
				    					{
				    						strandedness2 = (double) tumorReads2plus / (double) (tumorReads2plus + tumorReads2minus);
				    						if(tumorReads1plus > 0 || tumorReads1minus > 0)
				    						{
				    							strandednessDiff = java.lang.Math.abs(strandedness1 - strandedness2);
				    						}
				    					}
				    				}
				    				catch(Exception e)
				    				{
				    					// Exception parsing info from compareResult //
				    				}
				    			}

			    				//stats.put("comparedPositions", (stats.get("comparedPositions") + 1));
				    			comparedPositions++;

			    				if(params.containsKey("verbose") && !compareResult.contains("Reference"))
			    					System.err.println(chromNormal + "\t" + posNormal + "\t" + compareResult);

			    				// If VCF format specified, supply it //

			    				if(params.containsKey("output-vcf"))
			    				{
			    					int normalReads1 = Integer.parseInt(compareContents[2]);
			    					int normalReads2 = Integer.parseInt(compareContents[3]);
			    					String normalFreq = compareContents[4];
			    					String normalCall = compareContents[5];
			    					int tumorReads1 = Integer.parseInt(compareContents[6]);
			    					int tumorReads2 = Integer.parseInt(compareContents[7]);
			    					String tumorFreq = compareContents[8];
			    					String tumorCall = compareContents[9];
			    					String somStatus = compareContents[10];
			    					Double germlineP = Double.parseDouble(compareContents[11]);
			    					Double somaticP = Double.parseDouble(compareContents[12]);

			    					int totalDepth = pileupDepthNormal + pileupDepthTumor;

			    					if(allele2.startsWith("+"))
			    					{
			    						// INSERTION //
			    						// Ref = ref base; Var = ref base followed by inserted bases //
			    						String varColumn = allele1 + allele2.replace("+", "");
			    						compareResult = "." + "\t" + allele1 + "\t" + varColumn + "\t" + ".";
			    					}
			    					else if(allele2.startsWith("-"))
			    					{
			    						// DELETION //
			    						// Ref = ref base followed by deleted bases; var = ref base //
			    						String refColumn = allele1 + allele2.replace("-", "");
			    						compareResult = "." + "\t" + refColumn + "\t" + allele1 + "\t" + ".";
			    					}
			    					else
			    					{
				    					compareResult = "." + "\t" + allele1 + "\t" + allele2 + "\t" + ".";
			    					}


			    					// Decide on filter field //
			    					if(doStrandFilter && strandednessDiff > 0.10 && (strandedness2 < 0.10 || strandedness2 > 0.90))
			    					{
			    						compareResult += "\t" + "str10";
			    					}
			    					else if(somStatus.equals("IndelFilter"))
			    					{
			    						compareResult += "\t" + "indelError";
			    					}
			    					else
			    					{
			    						compareResult += "\t" + "PASS";
			    					}

			    					// Determine somatic status id and score //
			    					int ssCode = 0;
			    					double somScore = 0;

			    					if(somStatus.equals("Reference"))
			    					{
			    						// Wildtype //
			    						ssCode = 0;
			    						calledReference++;
			    					}
			    					else if(somStatus.equals("Germline"))
			    					{
			    						// Germline //
			    						ssCode = 1;
			    						calledGermline++;
			    						if(somaticP == 0)
			    						{
			    							somScore = 0;
			    						}
			    						else
			    						{
			    							somScore = 0 - (10 * java.lang.Math.log10(somaticP));
			    						}
			    					}
			    					else if(somStatus.equals("Somatic"))
			    					{
			    						// Somatic //
			    						ssCode = 2;
			    						calledSomatic++;
			    						if(somaticP == 0)
			    						{
			    							somScore = 255;
			    						}
			    						else
			    						{
			    							somScore = 0 - (10 * java.lang.Math.log10(somaticP));
			    						}
			    					}
			    					else if(somStatus.equals("LOH"))
			    					{
			    						// LOH //
			    						ssCode = 3;
			    						calledLOH++;
			    						if(somaticP == 0)
			    						{
			    							somScore = 255;
			    						}
			    						else
			    						{
			    							somScore = 0 - (10 * java.lang.Math.log10(somaticP));
			    						}
			    					}
			    					else
			    					{
			    						// Unknown //
			    						calledUnknown++;
			    						ssCode = 5;
			    					}

			    					// Adjust somatic score //
			    					if(somScore > 255)
			    						somScore = 255;

			    					// Print the info field //

			    					compareResult += "\t" + "DP=" + totalDepth;
			    					if(somStatus.equals("Somatic"))
			    						compareResult += ";SOMATIC";
			    					compareResult += ";" + "SS=" + ssCode;
			    					compareResult += ";" + "SSC=" + (int) somScore;
			    					compareResult += ";" + "GPV=" + pvalueFormat.format(germlineP);
			    					compareResult += ";" + "SPV=" + pvalueFormat.format(somaticP);

			    					// Print the format field //

			    					String tumorDP4 = "";
			    					String normalDP4 = "";

					    			if(compareContents.length >= 17)
					    			{
					    				try
					    				{
					    					tumorDP4 = compareContents[13] + "," + compareContents[14] + "," + compareContents[15] + "," + compareContents[16];
					    					normalDP4 = compareContents[17] + "," + compareContents[18] + "," + compareContents[19] + "," + compareContents[20];
					    				}
					    				catch(Exception e)
					    				{
					    					// Exception parsing info from compareResult //
					    					tumorDP4 = "";
					    					normalDP4 = "";
					    				}
					    			}

					    			if(tumorDP4.length() > 0)
					    				compareResult += "\tGT:GQ:DP:RD:AD:FREQ:DP4";
					    			else
					    				compareResult += "\tGT:GQ:DP:RD:AD:FREQ";

			    					// Determine normal genotype //
			    					String normalGt = ".";
			    					String tumorGt = ".";
			    					if(normalCall.equals(refBase))
			    					{
			    						normalGt = "0/0";
			    					}
			    					else if(VarScan.isHeterozygous(normalCall))
			    					{
			    						normalGt = "0/1";
			    					}
			    					else
			    					{
			    						normalGt = "1/1";
			    					}

			    					if(tumorCall.equals(refBase))
			    					{
			    						tumorGt = "0/0";
			    					}
			    					else if(VarScan.isHeterozygous(tumorCall))
			    					{
			    						tumorGt = "0/1";
			    					}
			    					else
			    					{
			    						tumorGt = "1/1";
			    					}

			    					if(tumorDP4.length() > 0)
			    					{
				    					compareResult += "\t" + normalGt + ":.:" + pileupDepthNormal + ":" + normalReads1 + ":" + normalReads2 + ":" + normalFreq + ":" + normalDP4;
				    					compareResult += "\t" + tumorGt + ":.:" + pileupDepthTumor + ":" + tumorReads1 + ":" + tumorReads2 + ":" + tumorFreq + ":" + tumorDP4;
			    					}
			    					else
			    					{
				    					compareResult += "\t" + normalGt + ":.:" + pileupDepthNormal + ":" + normalReads1 + ":" + normalReads2 + ":" + normalFreq;
				    					compareResult += "\t" + tumorGt + ":.:" + pileupDepthTumor + ":" + tumorReads1 + ":" + tumorReads2 + ":" + tumorFreq;
			    					}
			    				}

			    				// Print to master file for validation //

			    				if(params.containsKey("validation"))
			    				{
			    					outValidation.println(chromNormal + "\t" + posNormal + "\t" + compareResult);
			    				}

			    				if(!params.containsKey("validation") && (compareResult.contains("Reference") || compareResult.contains("SS=0")  || compareResult.contains("Filter")))
			    				{
			    					// Don't print reference/indelfilter positions unless doing validation //
			    				}
			    				else if(doStrandFilter && strandednessDiff > 0.10 && (strandedness2 < 0.10 || strandedness2 > 0.90))
			    				{
			    					// If filter is set, ignore variants that are supported largely by one strand //
			    					if(!params.containsKey("output-vcf"))
			    						compareResult = "StrandFilter";
			    				}
			    				else if(allele1.contains("-") || allele1.contains("+") || allele2.contains("-") || allele2.contains("+"))//if(compareResult.contains("INS") || compareResult.contains("DEL"))
			    				{
			    					outIndel.println(chromNormal + "\t" + posNormal + "\t" + compareResult);
			    				}
			    				else
			    				{
				    				outSnp.println(chromNormal + "\t" + posNormal + "\t" + compareResult);
			    				}
			    			}
			    			else
			    			{
//			    				System.err.println("Uncalled" + chromNormal + "\t" + posNormal + "\t" + compareResult);
			    			}

			    			if(compareResult.contains("Reference"))
			    				calledReference++; //stats.put("calledReference", (stats.get("calledReference") + 1));
			    			else if(compareResult.contains("IndelFilter"))
			    				indelFilter++;	//stats.put("indelFilter", (stats.get("indelFilter") + 1));
			    			else if(compareResult.contains("StrandFilter"))
			    				strandFilter++;
			    			else if(compareResult.contains("Germline"))
			    				calledGermline++;	//stats.put("calledGermline", (stats.get("calledGermline") + 1));
			    			else if(compareResult.contains("Somatic"))
			    				calledSomatic++;	//stats.put("calledSomatic", (stats.get("calledSomatic") + 1));
			    			else if(compareResult.contains("LOH"))
			    				calledLOH++;	//stats.put("calledLOH", (stats.get("calledLOH") + 1));
			    			else if(compareResult.contains("Unknown"))
			    				calledUnknown++;	//stats.put("calledUnknown", (stats.get("calledUnknown") + 1));
			    			else if(compareResult.contains("Variant"))
			    				calledVariant++;	//stats.put("calledVariant", (stats.get("calledVariant") + 1));



	    				}
	    				else
	    				{
	    					System.err.println("Error: Invalid format or not enough samples in mpileup: " + line + "\n");
	    					return;
	    				}
	    			}

----------------------------------------
		    		{
		    			//stats.put("sharedPositions", (stats.get("sharedPositions") + 1));
		    			sharedPositions++;
		    			if(params.containsKey("verbose"))
		    					System.err.println("Comparing calls at " + chromTumor + ":" + posTumor);

		    			refBase = tumorContents[2];
		    			String compareResult = comparePositions(lineNormal, lineTumor, minCoverage, minReads2, minVarFreq, minAvgQual, pValueThreshold, somaticPvalue, minFreqForHom, normalPurity, tumorPurity);

		    			if(compareResult.length() > 0)
		    			{
		    				// Get the alleles to determine type //
		    				String[] compareContents = compareResult.split("\t");
			    			String allele1 = compareContents[0];
			    			String allele2 = compareContents[1];

			    			double strandedness1 = 0.50;
			    			double strandedness2 = 0.50;
			    			double strandednessDiff = 0.00;

			    			if(compareContents.length >= 17)
			    			{
			    				try
			    				{
			    					int tumorReads1plus = Integer.parseInt(compareContents[13]);
			    					int tumorReads1minus = Integer.parseInt(compareContents[14]);
			    					int tumorReads2plus = Integer.parseInt(compareContents[15]);
			    					int tumorReads2minus = Integer.parseInt(compareContents[16]);

			    					if(tumorReads1plus > 0 || tumorReads1minus > 0)
			    					{
			    						strandedness1 = (double) tumorReads1plus / (double) (tumorReads1plus + tumorReads1minus);
			    					}

			    					if(tumorReads2plus > 0 || tumorReads2minus > 0)
			    					{
			    						strandedness2 = (double) tumorReads2plus / (double) (tumorReads2plus + tumorReads2minus);
			    						if(tumorReads1plus > 0 || tumorReads1minus > 0)
			    						{
			    							strandednessDiff = java.lang.Math.abs(strandedness1 - strandedness2);
			    						}
			    					}
			    				}
			    				catch(Exception e)
			    				{
			    					// Exception parsing info from compareResult //
			    				}
			    			}

		    				//stats.put("comparedPositions", (stats.get("comparedPositions") + 1));
			    			comparedPositions++;

		    				if(params.containsKey("verbose") && !compareResult.contains("Reference"))
		    					System.err.println(chromNormal + "\t" + posNormal + "\t" + compareResult);

		    				// If VCF format specified, supply it //

		    				if(params.containsKey("output-vcf"))
		    				{
		    					int normalReads1 = Integer.parseInt(compareContents[2]);
		    					int normalReads2 = Integer.parseInt(compareContents[3]);
		    					String normalFreq = compareContents[4];
		    					String normalCall = compareContents[5];
		    					int tumorReads1 = Integer.parseInt(compareContents[6]);
		    					int tumorReads2 = Integer.parseInt(compareContents[7]);
		    					String tumorFreq = compareContents[8];
		    					String tumorCall = compareContents[9];
		    					String somStatus = compareContents[10];
		    					Double germlineP = Double.parseDouble(compareContents[11]);
		    					Double somaticP = Double.parseDouble(compareContents[12]);

		    					String[] normalContents = lineNormal.split("\t");
		    					//tumorContents = lineTumor.split("\t");
		    					int pileupDepthNormal = Integer.parseInt(normalContents[3]);
		    					int pileupDepthTumor = Integer.parseInt(tumorContents[3]);

		    					int totalDepth = pileupDepthNormal + pileupDepthTumor;

		    					if(allele2.startsWith("+"))
		    					{
		    						// INSERTION //
		    						// Ref = ref base; Var = ref base followed by inserted bases //
		    						String varColumn = allele1 + allele2.replace("+", "");
		    						compareResult = "." + "\t" + allele1 + "\t" + varColumn + "\t" + ".";
		    					}
		    					else if(allele2.startsWith("-"))
		    					{
		    						// DELETION //
		    						// Ref = ref base followed by deleted bases; var = ref base //
		    						String refColumn = allele1 + allele2.replace("-", "");
		    						compareResult = "." + "\t" + refColumn + "\t" + allele1 + "\t" + ".";
		    					}
		    					else
		    					{
			    					compareResult = "." + "\t" + allele1 + "\t" + allele2 + "\t" + ".";
		    					}


		    					// Decide on filter field //
		    					if(params.containsKey("strand-filter") && strandednessDiff > 0.10 && (strandedness2 < 0.10 || strandedness2 > 0.90))
		    					{
		    						compareResult += "\t" + "str10";
		    					}
		    					else if(somStatus.equals("IndelFilter"))
		    					{
		    						compareResult += "\t" + "indelError";
		    					}
		    					else
		    					{
		    						compareResult += "\t" + "PASS";
		    					}

		    					// Determine somatic status id and score //
		    					int ssCode = 0;
		    					double somScore = 0;

		    					if(somStatus.equals("Reference"))
		    					{
		    						// Wildtype //
		    						ssCode = 0;
		    						calledReference++;
		    					}
		    					else if(somStatus.equals("Germline"))
		    					{
		    						// Germline //
		    						ssCode = 1;
		    						calledGermline++;
		    						if(somaticP == 0)
		    						{
		    							somScore = 0;
		    						}
		    						else
		    						{
		    							somScore = 0 - (10 * java.lang.Math.log10(somaticP));
		    						}
		    					}
		    					else if(somStatus.equals("Somatic"))
		    					{
		    						// Somatic //
		    						ssCode = 2;
		    						calledSomatic++;
		    						if(somaticP == 0)
		    						{
		    							somScore = 255;
		    						}
		    						else
		    						{
		    							somScore = 0 - (10 * java.lang.Math.log10(somaticP));
		    						}
		    					}
		    					else if(somStatus.equals("LOH"))
		    					{
		    						// LOH //
		    						ssCode = 3;
		    						calledLOH++;
		    						if(somaticP == 0)
		    						{
		    							somScore = 255;
		    						}
		    						else
		    						{
		    							somScore = 0 - (10 * java.lang.Math.log10(somaticP));
		    						}
		    					}
		    					else
		    					{
		    						// Unknown //
		    						calledUnknown++;
		    						ssCode = 5;
		    					}

		    					// Adjust somatic score //
		    					if(somScore > 255)
		    						somScore = 255;

		    					// Print the info field //

		    					compareResult += "\t" + "DP=" + totalDepth;
		    					if(somStatus.equals("Somatic"))
		    						compareResult += ";SOMATIC";
		    					compareResult += ";" + "SS=" + ssCode;
		    					compareResult += ";" + "SSC=" + (int) somScore;
		    					compareResult += ";" + "GPV=" + pvalueFormat.format(germlineP);
		    					compareResult += ";" + "SPV=" + pvalueFormat.format(somaticP);

		    					// Print the format field //

		    					String tumorDP4 = "";
		    					String normalDP4 = "";

				    			if(compareContents.length >= 17)
				    			{
				    				try
				    				{
				    					tumorDP4 = compareContents[13] + "," + compareContents[14] + "," + compareContents[15] + "," + compareContents[16];
				    					normalDP4 = compareContents[17] + "," + compareContents[18] + "," + compareContents[19] + "," + compareContents[20];
				    				}
				    				catch(Exception e)
				    				{
				    					// Exception parsing info from compareResult //
				    					tumorDP4 = "";
				    					normalDP4 = "";
				    				}
				    			}

				    			if(tumorDP4.length() > 0)
				    				compareResult += "\tGT:GQ:DP:RD:AD:FREQ:DP4";
				    			else
				    				compareResult += "\tGT:GQ:DP:RD:AD:FREQ";

		    					// Determine normal genotype //
		    					String normalGt = ".";
		    					String tumorGt = ".";
		    					if(normalCall.equals(refBase))
		    					{
		    						normalGt = "0/0";
		    					}
		    					else if(VarScan.isHeterozygous(normalCall))
		    					{
		    						normalGt = "0/1";
		    					}
		    					else
		    					{
		    						normalGt = "1/1";
		    					}

		    					if(tumorCall.equals(refBase))
		    					{
		    						tumorGt = "0/0";
		    					}
		    					else if(VarScan.isHeterozygous(tumorCall))
		    					{
		    						tumorGt = "0/1";
		    					}
		    					else
		    					{
		    						tumorGt = "1/1";
		    					}

		    					if(tumorDP4.length() > 0)
		    					{
			    					compareResult += "\t" + normalGt + ":.:" + pileupDepthNormal + ":" + normalReads1 + ":" + normalReads2 + ":" + normalFreq + ":" + normalDP4;
			    					compareResult += "\t" + tumorGt + ":.:" + pileupDepthTumor + ":" + tumorReads1 + ":" + tumorReads2 + ":" + tumorFreq + ":" + tumorDP4;
		    					}
		    					else
		    					{
			    					compareResult += "\t" + normalGt + ":.:" + pileupDepthNormal + ":" + normalReads1 + ":" + normalReads2 + ":" + normalFreq;
			    					compareResult += "\t" + tumorGt + ":.:" + pileupDepthTumor + ":" + tumorReads1 + ":" + tumorReads2 + ":" + tumorFreq;
		    					}
		    				}
		    				// Print to master file for validation //

		    				if(params.containsKey("validation"))
		    				{
		    					outValidation.println(chromNormal + "\t" + posNormal + "\t" + compareResult);
		    				}

		    				if(!params.containsKey("validation") && (compareResult.contains("Reference") || compareResult.contains("SS=0") || compareResult.contains("Filter")))
		    				{
		    					// Don't print reference/indelfilter positions unless doing validation //
		    				}
		    				else if(params.containsKey("strand-filter") && strandednessDiff > 0.10 && (strandedness2 < 0.10 || strandedness2 > 0.90))
		    				{
		    					// If filter is set, ignore variants that are supported largely by one strand //
		    					compareResult = "StrandFilter";
		    				}
		    				else if(allele1.contains("-") || allele1.contains("+") || allele2.contains("-") || allele2.contains("+"))//if(compareResult.contains("INS") || compareResult.contains("DEL"))
		    				{
		    					outIndel.println(chromNormal + "\t" + posNormal + "\t" + compareResult);
		    				}
		    				else
		    				{
			    				outSnp.println(chromNormal + "\t" + posNormal + "\t" + compareResult);
		    				}
		    			}
		    			else
		    			{
//		    				System.err.println("Uncalled" + chromNormal + "\t" + posNormal + "\t" + compareResult);
		    			}

		    			if(compareResult.contains("Reference"))
		    				calledReference++; //stats.put("calledReference", (stats.get("calledReference") + 1));
		    			else if(compareResult.contains("IndelFilter"))
		    				indelFilter++;	//stats.put("indelFilter", (stats.get("indelFilter") + 1));
		    			else if(compareResult.contains("StrandFilter"))
		    				strandFilter++;
		    			else if(compareResult.contains("Germline"))
		    				calledGermline++;	//stats.put("calledGermline", (stats.get("calledGermline") + 1));
		    			else if(compareResult.contains("Somatic"))
		    				calledSomatic++;	//stats.put("calledSomatic", (stats.get("calledSomatic") + 1));
		    			else if(compareResult.contains("LOH"))
		    				calledLOH++;	//stats.put("calledLOH", (stats.get("calledLOH") + 1));
		    			else if(compareResult.contains("Unknown"))
		    				calledUnknown++;	//stats.put("calledUnknown", (stats.get("calledUnknown") + 1));
		    			else if(compareResult.contains("Variant"))
		    				calledVariant++;	//stats.put("calledVariant", (stats.get("calledVariant") + 1));

				    	prevChromNormal = chromNormal;
				    	prevChromTumor = chromTumor;
		    		}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
96
22834652
net/sf/varscan/Somatic.java 343 660
net/sf/varscan/Somatic.java 1087 1386
----------------------------------------
	    				{
	    					sharedPositions++;

	    					// Parse common fields from line //
	    					String refName = lineContents[0];
	    					int position = Integer.parseInt(lineContents[1]);
	    					refBase = lineContents[2].toUpperCase();

	    					chromNormal = refName;
	    					chromTumor = refName;
	    					posNormal = position;
	    					posTumor = position;

	    					// Parse normal, which should be first sample //
	    					int normalOffset = 3;
	    					int pileupDepthNormal = Integer.parseInt(lineContents[normalOffset]);
		    	        	String normalBases = lineContents[normalOffset + 1];
		    	        	String normalQualities = lineContents[normalOffset + 2];

	    					// Parse tumor, which should be second sample //
	    					int tumorOffset = 6;
	    					int pileupDepthTumor = Integer.parseInt(lineContents[tumorOffset]);
		    	        	String tumorBases = lineContents[tumorOffset + 1];
		    	        	String tumorQualities = lineContents[tumorOffset + 2];

	    					lineNormal = refName + "\t" + position + "\t" + refBase + "\t" + pileupDepthNormal + "\t" + normalBases + "\t" + normalQualities;
	    					lineTumor = refName + "\t" + position + "\t" + refBase + "\t" + pileupDepthTumor + "\t" + tumorBases + "\t" + tumorQualities;

	    					String compareResult = comparePositions(lineNormal, lineTumor, minCoverage, minReads2, minVarFreq, minAvgQual, pValueThreshold, somaticPvalue, minFreqForHom, normalPurity, tumorPurity);

			    			if(compareResult.length() > 0)
			    			{
			    				// Get the alleles to determine type //
			    				String[] compareContents = compareResult.split("\t");
				    			String allele1 = compareContents[0];
				    			String allele2 = compareContents[1];

				    			double strandedness1 = 0.50;
				    			double strandedness2 = 0.50;
				    			double strandednessDiff = 0.00;

				    			if(compareContents.length >= 17)
				    			{
				    				try
				    				{
				    					int tumorReads1plus = Integer.parseInt(compareContents[13]);
				    					int tumorReads1minus = Integer.parseInt(compareContents[14]);
				    					int tumorReads2plus = Integer.parseInt(compareContents[15]);
				    					int tumorReads2minus = Integer.parseInt(compareContents[16]);

				    					if(tumorReads1plus > 0 || tumorReads1minus > 0)
				    					{
				    						strandedness1 = (double) tumorReads1plus / (double) (tumorReads1plus + tumorReads1minus);
				    					}

				    					if(tumorReads2plus > 0 || tumorReads2minus > 0)
				    					{
				    						strandedness2 = (double) tumorReads2plus / (double) (tumorReads2plus + tumorReads2minus);
				    						if(tumorReads1plus > 0 || tumorReads1minus > 0)
				    						{
				    							strandednessDiff = java.lang.Math.abs(strandedness1 - strandedness2);
				    						}
				    					}
				    				}
				    				catch(Exception e)
				    				{
				    					// Exception parsing info from compareResult //
				    				}
				    			}

			    				//stats.put("comparedPositions", (stats.get("comparedPositions") + 1));
				    			comparedPositions++;

			    				if(params.containsKey("verbose") && !compareResult.contains("Reference"))
			    					System.err.println(chromNormal + "\t" + posNormal + "\t" + compareResult);

			    				// If VCF format specified, supply it //

			    				if(params.containsKey("output-vcf"))
			    				{
			    					int normalReads1 = Integer.parseInt(compareContents[2]);
			    					int normalReads2 = Integer.parseInt(compareContents[3]);
			    					String normalFreq = compareContents[4];
			    					String normalCall = compareContents[5];
			    					int tumorReads1 = Integer.parseInt(compareContents[6]);
			    					int tumorReads2 = Integer.parseInt(compareContents[7]);
			    					String tumorFreq = compareContents[8];
			    					String tumorCall = compareContents[9];
			    					String somStatus = compareContents[10];
			    					Double germlineP = Double.parseDouble(compareContents[11]);
			    					Double somaticP = Double.parseDouble(compareContents[12]);

			    					int totalDepth = pileupDepthNormal + pileupDepthTumor;

			    					if(allele2.startsWith("+"))
			    					{
			    						// INSERTION //
			    						// Ref = ref base; Var = ref base followed by inserted bases //
			    						String varColumn = allele1 + allele2.replace("+", "");
			    						compareResult = "." + "\t" + allele1 + "\t" + varColumn + "\t" + ".";
			    					}
			    					else if(allele2.startsWith("-"))
			    					{
			    						// DELETION //
			    						// Ref = ref base followed by deleted bases; var = ref base //
			    						String refColumn = allele1 + allele2.replace("-", "");
			    						compareResult = "." + "\t" + refColumn + "\t" + allele1 + "\t" + ".";
			    					}
			    					else
			    					{
				    					compareResult = "." + "\t" + allele1 + "\t" + allele2 + "\t" + ".";
			    					}


			    					// Decide on filter field //
			    					if(doStrandFilter && strandednessDiff > 0.10 && (strandedness2 < 0.10 || strandedness2 > 0.90))
			    					{
			    						compareResult += "\t" + "str10";
			    					}
			    					else if(somStatus.equals("IndelFilter"))
			    					{
			    						compareResult += "\t" + "indelError";
			    					}
			    					else
			    					{
			    						compareResult += "\t" + "PASS";
			    					}

			    					// Determine somatic status id and score //
			    					int ssCode = 0;
			    					double somScore = 0;

			    					if(somStatus.equals("Reference"))
			    					{
			    						// Wildtype //
			    						ssCode = 0;
			    						calledReference++;
			    					}
			    					else if(somStatus.equals("Germline"))
			    					{
			    						// Germline //
			    						ssCode = 1;
			    						calledGermline++;
			    						if(somaticP == 0)
			    						{
			    							somScore = 0;
			    						}
			    						else
			    						{
			    							somScore = 0 - (10 * java.lang.Math.log10(somaticP));
			    						}
			    					}
			    					else if(somStatus.equals("Somatic"))
			    					{
			    						// Somatic //
			    						ssCode = 2;
			    						calledSomatic++;
			    						if(somaticP == 0)
			    						{
			    							somScore = 255;
			    						}
			    						else
			    						{
			    							somScore = 0 - (10 * java.lang.Math.log10(somaticP));
			    						}
			    					}
			    					else if(somStatus.equals("LOH"))
			    					{
			    						// LOH //
			    						ssCode = 3;
			    						calledLOH++;
			    						if(somaticP == 0)
			    						{
			    							somScore = 255;
			    						}
			    						else
			    						{
			    							somScore = 0 - (10 * java.lang.Math.log10(somaticP));
			    						}
			    					}
			    					else
			    					{
			    						// Unknown //
			    						calledUnknown++;
			    						ssCode = 5;
			    					}

			    					// Adjust somatic score //
			    					if(somScore > 255)
			    						somScore = 255;

			    					// Print the info field //

			    					compareResult += "\t" + "DP=" + totalDepth;
			    					if(somStatus.equals("Somatic"))
			    						compareResult += ";SOMATIC";
			    					compareResult += ";" + "SS=" + ssCode;
			    					compareResult += ";" + "SSC=" + (int) somScore;
			    					compareResult += ";" + "GPV=" + pvalueFormat.format(germlineP);
			    					compareResult += ";" + "SPV=" + pvalueFormat.format(somaticP);

			    					// Print the format field //

			    					String tumorDP4 = "";
			    					String normalDP4 = "";

					    			if(compareContents.length >= 17)
					    			{
					    				try
					    				{
					    					tumorDP4 = compareContents[13] + "," + compareContents[14] + "," + compareContents[15] + "," + compareContents[16];
					    					normalDP4 = compareContents[17] + "," + compareContents[18] + "," + compareContents[19] + "," + compareContents[20];
					    				}
					    				catch(Exception e)
					    				{
					    					// Exception parsing info from compareResult //
					    					tumorDP4 = "";
					    					normalDP4 = "";
					    				}
					    			}

					    			if(tumorDP4.length() > 0)
					    				compareResult += "\tGT:GQ:DP:RD:AD:FREQ:DP4";
					    			else
					    				compareResult += "\tGT:GQ:DP:RD:AD:FREQ";

			    					// Determine normal genotype //
			    					String normalGt = ".";
			    					String tumorGt = ".";
			    					if(normalCall.equals(refBase))
			    					{
			    						normalGt = "0/0";
			    					}
			    					else if(VarScan.isHeterozygous(normalCall))
			    					{
			    						normalGt = "0/1";
			    					}
			    					else
			    					{
			    						normalGt = "1/1";
			    					}

			    					if(tumorCall.equals(refBase))
			    					{
			    						tumorGt = "0/0";
			    					}
			    					else if(VarScan.isHeterozygous(tumorCall))
			    					{
			    						tumorGt = "0/1";
			    					}
			    					else
			    					{
			    						tumorGt = "1/1";
			    					}

			    					if(tumorDP4.length() > 0)
			    					{
				    					compareResult += "\t" + normalGt + ":.:" + pileupDepthNormal + ":" + normalReads1 + ":" + normalReads2 + ":" + normalFreq + ":" + normalDP4;
				    					compareResult += "\t" + tumorGt + ":.:" + pileupDepthTumor + ":" + tumorReads1 + ":" + tumorReads2 + ":" + tumorFreq + ":" + tumorDP4;
			    					}
			    					else
			    					{
				    					compareResult += "\t" + normalGt + ":.:" + pileupDepthNormal + ":" + normalReads1 + ":" + normalReads2 + ":" + normalFreq;
				    					compareResult += "\t" + tumorGt + ":.:" + pileupDepthTumor + ":" + tumorReads1 + ":" + tumorReads2 + ":" + tumorFreq;
			    					}
			    				}

			    				// Print to master file for validation //

			    				if(params.containsKey("validation"))
			    				{
			    					outValidation.println(chromNormal + "\t" + posNormal + "\t" + compareResult);
			    				}

			    				if(!params.containsKey("validation") && (compareResult.contains("Reference") || compareResult.contains("SS=0")  || compareResult.contains("Filter")))
			    				{
			    					// Don't print reference/indelfilter positions unless doing validation //
			    				}
			    				else if(doStrandFilter && strandednessDiff > 0.10 && (strandedness2 < 0.10 || strandedness2 > 0.90))
			    				{
			    					// If filter is set, ignore variants that are supported largely by one strand //
			    					if(!params.containsKey("output-vcf"))
			    						compareResult = "StrandFilter";
			    				}
			    				else if(allele1.contains("-") || allele1.contains("+") || allele2.contains("-") || allele2.contains("+"))//if(compareResult.contains("INS") || compareResult.contains("DEL"))
			    				{
			    					outIndel.println(chromNormal + "\t" + posNormal + "\t" + compareResult);
			    				}
			    				else
			    				{
				    				outSnp.println(chromNormal + "\t" + posNormal + "\t" + compareResult);
			    				}
			    			}
			    			else
			    			{
//			    				System.err.println("Uncalled" + chromNormal + "\t" + posNormal + "\t" + compareResult);
			    			}

			    			if(compareResult.contains("Reference"))
			    				calledReference++; //stats.put("calledReference", (stats.get("calledReference") + 1));
			    			else if(compareResult.contains("IndelFilter"))
			    				indelFilter++;	//stats.put("indelFilter", (stats.get("indelFilter") + 1));
			    			else if(compareResult.contains("StrandFilter"))
			    				strandFilter++;
			    			else if(compareResult.contains("Germline"))
			    				calledGermline++;	//stats.put("calledGermline", (stats.get("calledGermline") + 1));
			    			else if(compareResult.contains("Somatic"))
			    				calledSomatic++;	//stats.put("calledSomatic", (stats.get("calledSomatic") + 1));
			    			else if(compareResult.contains("LOH"))
			    				calledLOH++;	//stats.put("calledLOH", (stats.get("calledLOH") + 1));
			    			else if(compareResult.contains("Unknown"))
			    				calledUnknown++;	//stats.put("calledUnknown", (stats.get("calledUnknown") + 1));
			    			else if(compareResult.contains("Variant"))
			    				calledVariant++;	//stats.put("calledVariant", (stats.get("calledVariant") + 1));



	    				}

----------------------------------------
		    		{
		    			//stats.put("sharedPositions", (stats.get("sharedPositions") + 1));
		    			sharedPositions++;
		    			if(params.containsKey("verbose"))
		    					System.err.println("Comparing calls at " + chromTumor + ":" + posTumor);

		    			refBase = tumorContents[2];
		    			String compareResult = comparePositions(lineNormal, lineTumor, minCoverage, minReads2, minVarFreq, minAvgQual, pValueThreshold, somaticPvalue, minFreqForHom, normalPurity, tumorPurity);

		    			if(compareResult.length() > 0)
		    			{
		    				// Get the alleles to determine type //
		    				String[] compareContents = compareResult.split("\t");
			    			String allele1 = compareContents[0];
			    			String allele2 = compareContents[1];

			    			double strandedness1 = 0.50;
			    			double strandedness2 = 0.50;
			    			double strandednessDiff = 0.00;

			    			if(compareContents.length >= 17)
			    			{
			    				try
			    				{
			    					int tumorReads1plus = Integer.parseInt(compareContents[13]);
			    					int tumorReads1minus = Integer.parseInt(compareContents[14]);
			    					int tumorReads2plus = Integer.parseInt(compareContents[15]);
			    					int tumorReads2minus = Integer.parseInt(compareContents[16]);

			    					if(tumorReads1plus > 0 || tumorReads1minus > 0)
			    					{
			    						strandedness1 = (double) tumorReads1plus / (double) (tumorReads1plus + tumorReads1minus);
			    					}

			    					if(tumorReads2plus > 0 || tumorReads2minus > 0)
			    					{
			    						strandedness2 = (double) tumorReads2plus / (double) (tumorReads2plus + tumorReads2minus);
			    						if(tumorReads1plus > 0 || tumorReads1minus > 0)
			    						{
			    							strandednessDiff = java.lang.Math.abs(strandedness1 - strandedness2);
			    						}
			    					}
			    				}
			    				catch(Exception e)
			    				{
			    					// Exception parsing info from compareResult //
			    				}
			    			}

		    				//stats.put("comparedPositions", (stats.get("comparedPositions") + 1));
			    			comparedPositions++;

		    				if(params.containsKey("verbose") && !compareResult.contains("Reference"))
		    					System.err.println(chromNormal + "\t" + posNormal + "\t" + compareResult);

		    				// If VCF format specified, supply it //

		    				if(params.containsKey("output-vcf"))
		    				{
		    					int normalReads1 = Integer.parseInt(compareContents[2]);
		    					int normalReads2 = Integer.parseInt(compareContents[3]);
		    					String normalFreq = compareContents[4];
		    					String normalCall = compareContents[5];
		    					int tumorReads1 = Integer.parseInt(compareContents[6]);
		    					int tumorReads2 = Integer.parseInt(compareContents[7]);
		    					String tumorFreq = compareContents[8];
		    					String tumorCall = compareContents[9];
		    					String somStatus = compareContents[10];
		    					Double germlineP = Double.parseDouble(compareContents[11]);
		    					Double somaticP = Double.parseDouble(compareContents[12]);

		    					String[] normalContents = lineNormal.split("\t");
		    					//tumorContents = lineTumor.split("\t");
		    					int pileupDepthNormal = Integer.parseInt(normalContents[3]);
		    					int pileupDepthTumor = Integer.parseInt(tumorContents[3]);

		    					int totalDepth = pileupDepthNormal + pileupDepthTumor;

		    					if(allele2.startsWith("+"))
		    					{
		    						// INSERTION //
		    						// Ref = ref base; Var = ref base followed by inserted bases //
		    						String varColumn = allele1 + allele2.replace("+", "");
		    						compareResult = "." + "\t" + allele1 + "\t" + varColumn + "\t" + ".";
		    					}
		    					else if(allele2.startsWith("-"))
		    					{
		    						// DELETION //
		    						// Ref = ref base followed by deleted bases; var = ref base //
		    						String refColumn = allele1 + allele2.replace("-", "");
		    						compareResult = "." + "\t" + refColumn + "\t" + allele1 + "\t" + ".";
		    					}
		    					else
		    					{
			    					compareResult = "." + "\t" + allele1 + "\t" + allele2 + "\t" + ".";
		    					}


		    					// Decide on filter field //
		    					if(params.containsKey("strand-filter") && strandednessDiff > 0.10 && (strandedness2 < 0.10 || strandedness2 > 0.90))
		    					{
		    						compareResult += "\t" + "str10";
		    					}
		    					else if(somStatus.equals("IndelFilter"))
		    					{
		    						compareResult += "\t" + "indelError";
		    					}
		    					else
		    					{
		    						compareResult += "\t" + "PASS";
		    					}

		    					// Determine somatic status id and score //
		    					int ssCode = 0;
		    					double somScore = 0;

		    					if(somStatus.equals("Reference"))
		    					{
		    						// Wildtype //
		    						ssCode = 0;
		    						calledReference++;
		    					}
		    					else if(somStatus.equals("Germline"))
		    					{
		    						// Germline //
		    						ssCode = 1;
		    						calledGermline++;
		    						if(somaticP == 0)
		    						{
		    							somScore = 0;
		    						}
		    						else
		    						{
		    							somScore = 0 - (10 * java.lang.Math.log10(somaticP));
		    						}
		    					}
		    					else if(somStatus.equals("Somatic"))
		    					{
		    						// Somatic //
		    						ssCode = 2;
		    						calledSomatic++;
		    						if(somaticP == 0)
		    						{
		    							somScore = 255;
		    						}
		    						else
		    						{
		    							somScore = 0 - (10 * java.lang.Math.log10(somaticP));
		    						}
		    					}
		    					else if(somStatus.equals("LOH"))
		    					{
		    						// LOH //
		    						ssCode = 3;
		    						calledLOH++;
		    						if(somaticP == 0)
		    						{
		    							somScore = 255;
		    						}
		    						else
		    						{
		    							somScore = 0 - (10 * java.lang.Math.log10(somaticP));
		    						}
		    					}
		    					else
		    					{
		    						// Unknown //
		    						calledUnknown++;
		    						ssCode = 5;
		    					}

		    					// Adjust somatic score //
		    					if(somScore > 255)
		    						somScore = 255;

		    					// Print the info field //

		    					compareResult += "\t" + "DP=" + totalDepth;
		    					if(somStatus.equals("Somatic"))
		    						compareResult += ";SOMATIC";
		    					compareResult += ";" + "SS=" + ssCode;
		    					compareResult += ";" + "SSC=" + (int) somScore;
		    					compareResult += ";" + "GPV=" + pvalueFormat.format(germlineP);
		    					compareResult += ";" + "SPV=" + pvalueFormat.format(somaticP);

		    					// Print the format field //

		    					String tumorDP4 = "";
		    					String normalDP4 = "";

				    			if(compareContents.length >= 17)
				    			{
				    				try
				    				{
				    					tumorDP4 = compareContents[13] + "," + compareContents[14] + "," + compareContents[15] + "," + compareContents[16];
				    					normalDP4 = compareContents[17] + "," + compareContents[18] + "," + compareContents[19] + "," + compareContents[20];
				    				}
				    				catch(Exception e)
				    				{
				    					// Exception parsing info from compareResult //
				    					tumorDP4 = "";
				    					normalDP4 = "";
				    				}
				    			}

				    			if(tumorDP4.length() > 0)
				    				compareResult += "\tGT:GQ:DP:RD:AD:FREQ:DP4";
				    			else
				    				compareResult += "\tGT:GQ:DP:RD:AD:FREQ";

		    					// Determine normal genotype //
		    					String normalGt = ".";
		    					String tumorGt = ".";
		    					if(normalCall.equals(refBase))
		    					{
		    						normalGt = "0/0";
		    					}
		    					else if(VarScan.isHeterozygous(normalCall))
		    					{
		    						normalGt = "0/1";
		    					}
		    					else
		    					{
		    						normalGt = "1/1";
		    					}

		    					if(tumorCall.equals(refBase))
		    					{
		    						tumorGt = "0/0";
		    					}
		    					else if(VarScan.isHeterozygous(tumorCall))
		    					{
		    						tumorGt = "0/1";
		    					}
		    					else
		    					{
		    						tumorGt = "1/1";
		    					}

		    					if(tumorDP4.length() > 0)
		    					{
			    					compareResult += "\t" + normalGt + ":.:" + pileupDepthNormal + ":" + normalReads1 + ":" + normalReads2 + ":" + normalFreq + ":" + normalDP4;
			    					compareResult += "\t" + tumorGt + ":.:" + pileupDepthTumor + ":" + tumorReads1 + ":" + tumorReads2 + ":" + tumorFreq + ":" + tumorDP4;
		    					}
		    					else
		    					{
			    					compareResult += "\t" + normalGt + ":.:" + pileupDepthNormal + ":" + normalReads1 + ":" + normalReads2 + ":" + normalFreq;
			    					compareResult += "\t" + tumorGt + ":.:" + pileupDepthTumor + ":" + tumorReads1 + ":" + tumorReads2 + ":" + tumorFreq;
		    					}
		    				}
		    				// Print to master file for validation //

		    				if(params.containsKey("validation"))
		    				{
		    					outValidation.println(chromNormal + "\t" + posNormal + "\t" + compareResult);
		    				}

		    				if(!params.containsKey("validation") && (compareResult.contains("Reference") || compareResult.contains("SS=0") || compareResult.contains("Filter")))
		    				{
		    					// Don't print reference/indelfilter positions unless doing validation //
		    				}
		    				else if(params.containsKey("strand-filter") && strandednessDiff > 0.10 && (strandedness2 < 0.10 || strandedness2 > 0.90))
		    				{
		    					// If filter is set, ignore variants that are supported largely by one strand //
		    					compareResult = "StrandFilter";
		    				}
		    				else if(allele1.contains("-") || allele1.contains("+") || allele2.contains("-") || allele2.contains("+"))//if(compareResult.contains("INS") || compareResult.contains("DEL"))
		    				{
		    					outIndel.println(chromNormal + "\t" + posNormal + "\t" + compareResult);
		    				}
		    				else
		    				{
			    				outSnp.println(chromNormal + "\t" + posNormal + "\t" + compareResult);
		    				}
		    			}
		    			else
		    			{
//		    				System.err.println("Uncalled" + chromNormal + "\t" + posNormal + "\t" + compareResult);
		    			}

		    			if(compareResult.contains("Reference"))
		    				calledReference++; //stats.put("calledReference", (stats.get("calledReference") + 1));
		    			else if(compareResult.contains("IndelFilter"))
		    				indelFilter++;	//stats.put("indelFilter", (stats.get("indelFilter") + 1));
		    			else if(compareResult.contains("StrandFilter"))
		    				strandFilter++;
		    			else if(compareResult.contains("Germline"))
		    				calledGermline++;	//stats.put("calledGermline", (stats.get("calledGermline") + 1));
		    			else if(compareResult.contains("Somatic"))
		    				calledSomatic++;	//stats.put("calledSomatic", (stats.get("calledSomatic") + 1));
		    			else if(compareResult.contains("LOH"))
		    				calledLOH++;	//stats.put("calledLOH", (stats.get("calledLOH") + 1));
		    			else if(compareResult.contains("Unknown"))
		    				calledUnknown++;	//stats.put("calledUnknown", (stats.get("calledUnknown") + 1));
		    			else if(compareResult.contains("Variant"))
		    				calledVariant++;	//stats.put("calledVariant", (stats.get("calledVariant") + 1));

				    	prevChromNormal = chromNormal;
				    	prevChromTumor = chromTumor;
		    		}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
96
22834654
net/sf/varscan/Somatic.java 332 678
net/sf/varscan/Somatic.java 1087 1386
----------------------------------------
	    		{

	    			// Begin try-catch for line parsing //

	    			try
	    			{
	    				String[] lineContents = line.split("\t", -1);

	    				// Verify expected pileup format //

	    				if(lineContents.length > 5 && lineContents[0].length() > 0 && lineContents[1].length() > 0 && lineContents[2].length() > 0 && lineContents[3].length() > 0)
	    				{
	    					sharedPositions++;

	    					// Parse common fields from line //
	    					String refName = lineContents[0];
	    					int position = Integer.parseInt(lineContents[1]);
	    					refBase = lineContents[2].toUpperCase();

	    					chromNormal = refName;
	    					chromTumor = refName;
	    					posNormal = position;
	    					posTumor = position;

	    					// Parse normal, which should be first sample //
	    					int normalOffset = 3;
	    					int pileupDepthNormal = Integer.parseInt(lineContents[normalOffset]);
		    	        	String normalBases = lineContents[normalOffset + 1];
		    	        	String normalQualities = lineContents[normalOffset + 2];

	    					// Parse tumor, which should be second sample //
	    					int tumorOffset = 6;
	    					int pileupDepthTumor = Integer.parseInt(lineContents[tumorOffset]);
		    	        	String tumorBases = lineContents[tumorOffset + 1];
		    	        	String tumorQualities = lineContents[tumorOffset + 2];

	    					lineNormal = refName + "\t" + position + "\t" + refBase + "\t" + pileupDepthNormal + "\t" + normalBases + "\t" + normalQualities;
	    					lineTumor = refName + "\t" + position + "\t" + refBase + "\t" + pileupDepthTumor + "\t" + tumorBases + "\t" + tumorQualities;

	    					String compareResult = comparePositions(lineNormal, lineTumor, minCoverage, minReads2, minVarFreq, minAvgQual, pValueThreshold, somaticPvalue, minFreqForHom, normalPurity, tumorPurity);

			    			if(compareResult.length() > 0)
			    			{
			    				// Get the alleles to determine type //
			    				String[] compareContents = compareResult.split("\t");
				    			String allele1 = compareContents[0];
				    			String allele2 = compareContents[1];

				    			double strandedness1 = 0.50;
				    			double strandedness2 = 0.50;
				    			double strandednessDiff = 0.00;

				    			if(compareContents.length >= 17)
				    			{
				    				try
				    				{
				    					int tumorReads1plus = Integer.parseInt(compareContents[13]);
				    					int tumorReads1minus = Integer.parseInt(compareContents[14]);
				    					int tumorReads2plus = Integer.parseInt(compareContents[15]);
				    					int tumorReads2minus = Integer.parseInt(compareContents[16]);

				    					if(tumorReads1plus > 0 || tumorReads1minus > 0)
				    					{
				    						strandedness1 = (double) tumorReads1plus / (double) (tumorReads1plus + tumorReads1minus);
				    					}

				    					if(tumorReads2plus > 0 || tumorReads2minus > 0)
				    					{
				    						strandedness2 = (double) tumorReads2plus / (double) (tumorReads2plus + tumorReads2minus);
				    						if(tumorReads1plus > 0 || tumorReads1minus > 0)
				    						{
				    							strandednessDiff = java.lang.Math.abs(strandedness1 - strandedness2);
				    						}
				    					}
				    				}
				    				catch(Exception e)
				    				{
				    					// Exception parsing info from compareResult //
				    				}
				    			}

			    				//stats.put("comparedPositions", (stats.get("comparedPositions") + 1));
				    			comparedPositions++;

			    				if(params.containsKey("verbose") && !compareResult.contains("Reference"))
			    					System.err.println(chromNormal + "\t" + posNormal + "\t" + compareResult);

			    				// If VCF format specified, supply it //

			    				if(params.containsKey("output-vcf"))
			    				{
			    					int normalReads1 = Integer.parseInt(compareContents[2]);
			    					int normalReads2 = Integer.parseInt(compareContents[3]);
			    					String normalFreq = compareContents[4];
			    					String normalCall = compareContents[5];
			    					int tumorReads1 = Integer.parseInt(compareContents[6]);
			    					int tumorReads2 = Integer.parseInt(compareContents[7]);
			    					String tumorFreq = compareContents[8];
			    					String tumorCall = compareContents[9];
			    					String somStatus = compareContents[10];
			    					Double germlineP = Double.parseDouble(compareContents[11]);
			    					Double somaticP = Double.parseDouble(compareContents[12]);

			    					int totalDepth = pileupDepthNormal + pileupDepthTumor;

			    					if(allele2.startsWith("+"))
			    					{
			    						// INSERTION //
			    						// Ref = ref base; Var = ref base followed by inserted bases //
			    						String varColumn = allele1 + allele2.replace("+", "");
			    						compareResult = "." + "\t" + allele1 + "\t" + varColumn + "\t" + ".";
			    					}
			    					else if(allele2.startsWith("-"))
			    					{
			    						// DELETION //
			    						// Ref = ref base followed by deleted bases; var = ref base //
			    						String refColumn = allele1 + allele2.replace("-", "");
			    						compareResult = "." + "\t" + refColumn + "\t" + allele1 + "\t" + ".";
			    					}
			    					else
			    					{
				    					compareResult = "." + "\t" + allele1 + "\t" + allele2 + "\t" + ".";
			    					}


			    					// Decide on filter field //
			    					if(doStrandFilter && strandednessDiff > 0.10 && (strandedness2 < 0.10 || strandedness2 > 0.90))
			    					{
			    						compareResult += "\t" + "str10";
			    					}
			    					else if(somStatus.equals("IndelFilter"))
			    					{
			    						compareResult += "\t" + "indelError";
			    					}
			    					else
			    					{
			    						compareResult += "\t" + "PASS";
			    					}

			    					// Determine somatic status id and score //
			    					int ssCode = 0;
			    					double somScore = 0;

			    					if(somStatus.equals("Reference"))
			    					{
			    						// Wildtype //
			    						ssCode = 0;
			    						calledReference++;
			    					}
			    					else if(somStatus.equals("Germline"))
			    					{
			    						// Germline //
			    						ssCode = 1;
			    						calledGermline++;
			    						if(somaticP == 0)
			    						{
			    							somScore = 0;
			    						}
			    						else
			    						{
			    							somScore = 0 - (10 * java.lang.Math.log10(somaticP));
			    						}
			    					}
			    					else if(somStatus.equals("Somatic"))
			    					{
			    						// Somatic //
			    						ssCode = 2;
			    						calledSomatic++;
			    						if(somaticP == 0)
			    						{
			    							somScore = 255;
			    						}
			    						else
			    						{
			    							somScore = 0 - (10 * java.lang.Math.log10(somaticP));
			    						}
			    					}
			    					else if(somStatus.equals("LOH"))
			    					{
			    						// LOH //
			    						ssCode = 3;
			    						calledLOH++;
			    						if(somaticP == 0)
			    						{
			    							somScore = 255;
			    						}
			    						else
			    						{
			    							somScore = 0 - (10 * java.lang.Math.log10(somaticP));
			    						}
			    					}
			    					else
			    					{
			    						// Unknown //
			    						calledUnknown++;
			    						ssCode = 5;
			    					}

			    					// Adjust somatic score //
			    					if(somScore > 255)
			    						somScore = 255;

			    					// Print the info field //

			    					compareResult += "\t" + "DP=" + totalDepth;
			    					if(somStatus.equals("Somatic"))
			    						compareResult += ";SOMATIC";
			    					compareResult += ";" + "SS=" + ssCode;
			    					compareResult += ";" + "SSC=" + (int) somScore;
			    					compareResult += ";" + "GPV=" + pvalueFormat.format(germlineP);
			    					compareResult += ";" + "SPV=" + pvalueFormat.format(somaticP);

			    					// Print the format field //

			    					String tumorDP4 = "";
			    					String normalDP4 = "";

					    			if(compareContents.length >= 17)
					    			{
					    				try
					    				{
					    					tumorDP4 = compareContents[13] + "," + compareContents[14] + "," + compareContents[15] + "," + compareContents[16];
					    					normalDP4 = compareContents[17] + "," + compareContents[18] + "," + compareContents[19] + "," + compareContents[20];
					    				}
					    				catch(Exception e)
					    				{
					    					// Exception parsing info from compareResult //
					    					tumorDP4 = "";
					    					normalDP4 = "";
					    				}
					    			}

					    			if(tumorDP4.length() > 0)
					    				compareResult += "\tGT:GQ:DP:RD:AD:FREQ:DP4";
					    			else
					    				compareResult += "\tGT:GQ:DP:RD:AD:FREQ";

			    					// Determine normal genotype //
			    					String normalGt = ".";
			    					String tumorGt = ".";
			    					if(normalCall.equals(refBase))
			    					{
			    						normalGt = "0/0";
			    					}
			    					else if(VarScan.isHeterozygous(normalCall))
			    					{
			    						normalGt = "0/1";
			    					}
			    					else
			    					{
			    						normalGt = "1/1";
			    					}

			    					if(tumorCall.equals(refBase))
			    					{
			    						tumorGt = "0/0";
			    					}
			    					else if(VarScan.isHeterozygous(tumorCall))
			    					{
			    						tumorGt = "0/1";
			    					}
			    					else
			    					{
			    						tumorGt = "1/1";
			    					}

			    					if(tumorDP4.length() > 0)
			    					{
				    					compareResult += "\t" + normalGt + ":.:" + pileupDepthNormal + ":" + normalReads1 + ":" + normalReads2 + ":" + normalFreq + ":" + normalDP4;
				    					compareResult += "\t" + tumorGt + ":.:" + pileupDepthTumor + ":" + tumorReads1 + ":" + tumorReads2 + ":" + tumorFreq + ":" + tumorDP4;
			    					}
			    					else
			    					{
				    					compareResult += "\t" + normalGt + ":.:" + pileupDepthNormal + ":" + normalReads1 + ":" + normalReads2 + ":" + normalFreq;
				    					compareResult += "\t" + tumorGt + ":.:" + pileupDepthTumor + ":" + tumorReads1 + ":" + tumorReads2 + ":" + tumorFreq;
			    					}
			    				}

			    				// Print to master file for validation //

			    				if(params.containsKey("validation"))
			    				{
			    					outValidation.println(chromNormal + "\t" + posNormal + "\t" + compareResult);
			    				}

			    				if(!params.containsKey("validation") && (compareResult.contains("Reference") || compareResult.contains("SS=0")  || compareResult.contains("Filter")))
			    				{
			    					// Don't print reference/indelfilter positions unless doing validation //
			    				}
			    				else if(doStrandFilter && strandednessDiff > 0.10 && (strandedness2 < 0.10 || strandedness2 > 0.90))
			    				{
			    					// If filter is set, ignore variants that are supported largely by one strand //
			    					if(!params.containsKey("output-vcf"))
			    						compareResult = "StrandFilter";
			    				}
			    				else if(allele1.contains("-") || allele1.contains("+") || allele2.contains("-") || allele2.contains("+"))//if(compareResult.contains("INS") || compareResult.contains("DEL"))
			    				{
			    					outIndel.println(chromNormal + "\t" + posNormal + "\t" + compareResult);
			    				}
			    				else
			    				{
				    				outSnp.println(chromNormal + "\t" + posNormal + "\t" + compareResult);
			    				}
			    			}
			    			else
			    			{
//			    				System.err.println("Uncalled" + chromNormal + "\t" + posNormal + "\t" + compareResult);
			    			}

			    			if(compareResult.contains("Reference"))
			    				calledReference++; //stats.put("calledReference", (stats.get("calledReference") + 1));
			    			else if(compareResult.contains("IndelFilter"))
			    				indelFilter++;	//stats.put("indelFilter", (stats.get("indelFilter") + 1));
			    			else if(compareResult.contains("StrandFilter"))
			    				strandFilter++;
			    			else if(compareResult.contains("Germline"))
			    				calledGermline++;	//stats.put("calledGermline", (stats.get("calledGermline") + 1));
			    			else if(compareResult.contains("Somatic"))
			    				calledSomatic++;	//stats.put("calledSomatic", (stats.get("calledSomatic") + 1));
			    			else if(compareResult.contains("LOH"))
			    				calledLOH++;	//stats.put("calledLOH", (stats.get("calledLOH") + 1));
			    			else if(compareResult.contains("Unknown"))
			    				calledUnknown++;	//stats.put("calledUnknown", (stats.get("calledUnknown") + 1));
			    			else if(compareResult.contains("Variant"))
			    				calledVariant++;	//stats.put("calledVariant", (stats.get("calledVariant") + 1));



	    				}
	    				else
	    				{
	    					System.err.println("Error: Invalid format or not enough samples in mpileup: " + line + "\n");
	    					return;
	    				}
	    			}
	    			catch(Exception e)
	    		    {
	    		    	System.err.println("Parsing Exception on line:\n" + line + "\n" + e.getLocalizedMessage());
	    				numParsingExceptions++;
	    				if(numParsingExceptions >= 5)
	    				{
	    					System.err.println("Too many parsing exceptions encountered; exiting");
	    					return;
	    				}
	    		    	return;
	    		    }
	    		}

----------------------------------------
		    		{
		    			//stats.put("sharedPositions", (stats.get("sharedPositions") + 1));
		    			sharedPositions++;
		    			if(params.containsKey("verbose"))
		    					System.err.println("Comparing calls at " + chromTumor + ":" + posTumor);

		    			refBase = tumorContents[2];
		    			String compareResult = comparePositions(lineNormal, lineTumor, minCoverage, minReads2, minVarFreq, minAvgQual, pValueThreshold, somaticPvalue, minFreqForHom, normalPurity, tumorPurity);

		    			if(compareResult.length() > 0)
		    			{
		    				// Get the alleles to determine type //
		    				String[] compareContents = compareResult.split("\t");
			    			String allele1 = compareContents[0];
			    			String allele2 = compareContents[1];

			    			double strandedness1 = 0.50;
			    			double strandedness2 = 0.50;
			    			double strandednessDiff = 0.00;

			    			if(compareContents.length >= 17)
			    			{
			    				try
			    				{
			    					int tumorReads1plus = Integer.parseInt(compareContents[13]);
			    					int tumorReads1minus = Integer.parseInt(compareContents[14]);
			    					int tumorReads2plus = Integer.parseInt(compareContents[15]);
			    					int tumorReads2minus = Integer.parseInt(compareContents[16]);

			    					if(tumorReads1plus > 0 || tumorReads1minus > 0)
			    					{
			    						strandedness1 = (double) tumorReads1plus / (double) (tumorReads1plus + tumorReads1minus);
			    					}

			    					if(tumorReads2plus > 0 || tumorReads2minus > 0)
			    					{
			    						strandedness2 = (double) tumorReads2plus / (double) (tumorReads2plus + tumorReads2minus);
			    						if(tumorReads1plus > 0 || tumorReads1minus > 0)
			    						{
			    							strandednessDiff = java.lang.Math.abs(strandedness1 - strandedness2);
			    						}
			    					}
			    				}
			    				catch(Exception e)
			    				{
			    					// Exception parsing info from compareResult //
			    				}
			    			}

		    				//stats.put("comparedPositions", (stats.get("comparedPositions") + 1));
			    			comparedPositions++;

		    				if(params.containsKey("verbose") && !compareResult.contains("Reference"))
		    					System.err.println(chromNormal + "\t" + posNormal + "\t" + compareResult);

		    				// If VCF format specified, supply it //

		    				if(params.containsKey("output-vcf"))
		    				{
		    					int normalReads1 = Integer.parseInt(compareContents[2]);
		    					int normalReads2 = Integer.parseInt(compareContents[3]);
		    					String normalFreq = compareContents[4];
		    					String normalCall = compareContents[5];
		    					int tumorReads1 = Integer.parseInt(compareContents[6]);
		    					int tumorReads2 = Integer.parseInt(compareContents[7]);
		    					String tumorFreq = compareContents[8];
		    					String tumorCall = compareContents[9];
		    					String somStatus = compareContents[10];
		    					Double germlineP = Double.parseDouble(compareContents[11]);
		    					Double somaticP = Double.parseDouble(compareContents[12]);

		    					String[] normalContents = lineNormal.split("\t");
		    					//tumorContents = lineTumor.split("\t");
		    					int pileupDepthNormal = Integer.parseInt(normalContents[3]);
		    					int pileupDepthTumor = Integer.parseInt(tumorContents[3]);

		    					int totalDepth = pileupDepthNormal + pileupDepthTumor;

		    					if(allele2.startsWith("+"))
		    					{
		    						// INSERTION //
		    						// Ref = ref base; Var = ref base followed by inserted bases //
		    						String varColumn = allele1 + allele2.replace("+", "");
		    						compareResult = "." + "\t" + allele1 + "\t" + varColumn + "\t" + ".";
		    					}
		    					else if(allele2.startsWith("-"))
		    					{
		    						// DELETION //
		    						// Ref = ref base followed by deleted bases; var = ref base //
		    						String refColumn = allele1 + allele2.replace("-", "");
		    						compareResult = "." + "\t" + refColumn + "\t" + allele1 + "\t" + ".";
		    					}
		    					else
		    					{
			    					compareResult = "." + "\t" + allele1 + "\t" + allele2 + "\t" + ".";
		    					}


		    					// Decide on filter field //
		    					if(params.containsKey("strand-filter") && strandednessDiff > 0.10 && (strandedness2 < 0.10 || strandedness2 > 0.90))
		    					{
		    						compareResult += "\t" + "str10";
		    					}
		    					else if(somStatus.equals("IndelFilter"))
		    					{
		    						compareResult += "\t" + "indelError";
		    					}
		    					else
		    					{
		    						compareResult += "\t" + "PASS";
		    					}

		    					// Determine somatic status id and score //
		    					int ssCode = 0;
		    					double somScore = 0;

		    					if(somStatus.equals("Reference"))
		    					{
		    						// Wildtype //
		    						ssCode = 0;
		    						calledReference++;
		    					}
		    					else if(somStatus.equals("Germline"))
		    					{
		    						// Germline //
		    						ssCode = 1;
		    						calledGermline++;
		    						if(somaticP == 0)
		    						{
		    							somScore = 0;
		    						}
		    						else
		    						{
		    							somScore = 0 - (10 * java.lang.Math.log10(somaticP));
		    						}
		    					}
		    					else if(somStatus.equals("Somatic"))
		    					{
		    						// Somatic //
		    						ssCode = 2;
		    						calledSomatic++;
		    						if(somaticP == 0)
		    						{
		    							somScore = 255;
		    						}
		    						else
		    						{
		    							somScore = 0 - (10 * java.lang.Math.log10(somaticP));
		    						}
		    					}
		    					else if(somStatus.equals("LOH"))
		    					{
		    						// LOH //
		    						ssCode = 3;
		    						calledLOH++;
		    						if(somaticP == 0)
		    						{
		    							somScore = 255;
		    						}
		    						else
		    						{
		    							somScore = 0 - (10 * java.lang.Math.log10(somaticP));
		    						}
		    					}
		    					else
		    					{
		    						// Unknown //
		    						calledUnknown++;
		    						ssCode = 5;
		    					}

		    					// Adjust somatic score //
		    					if(somScore > 255)
		    						somScore = 255;

		    					// Print the info field //

		    					compareResult += "\t" + "DP=" + totalDepth;
		    					if(somStatus.equals("Somatic"))
		    						compareResult += ";SOMATIC";
		    					compareResult += ";" + "SS=" + ssCode;
		    					compareResult += ";" + "SSC=" + (int) somScore;
		    					compareResult += ";" + "GPV=" + pvalueFormat.format(germlineP);
		    					compareResult += ";" + "SPV=" + pvalueFormat.format(somaticP);

		    					// Print the format field //

		    					String tumorDP4 = "";
		    					String normalDP4 = "";

				    			if(compareContents.length >= 17)
				    			{
				    				try
				    				{
				    					tumorDP4 = compareContents[13] + "," + compareContents[14] + "," + compareContents[15] + "," + compareContents[16];
				    					normalDP4 = compareContents[17] + "," + compareContents[18] + "," + compareContents[19] + "," + compareContents[20];
				    				}
				    				catch(Exception e)
				    				{
				    					// Exception parsing info from compareResult //
				    					tumorDP4 = "";
				    					normalDP4 = "";
				    				}
				    			}

				    			if(tumorDP4.length() > 0)
				    				compareResult += "\tGT:GQ:DP:RD:AD:FREQ:DP4";
				    			else
				    				compareResult += "\tGT:GQ:DP:RD:AD:FREQ";

		    					// Determine normal genotype //
		    					String normalGt = ".";
		    					String tumorGt = ".";
		    					if(normalCall.equals(refBase))
		    					{
		    						normalGt = "0/0";
		    					}
		    					else if(VarScan.isHeterozygous(normalCall))
		    					{
		    						normalGt = "0/1";
		    					}
		    					else
		    					{
		    						normalGt = "1/1";
		    					}

		    					if(tumorCall.equals(refBase))
		    					{
		    						tumorGt = "0/0";
		    					}
		    					else if(VarScan.isHeterozygous(tumorCall))
		    					{
		    						tumorGt = "0/1";
		    					}
		    					else
		    					{
		    						tumorGt = "1/1";
		    					}

		    					if(tumorDP4.length() > 0)
		    					{
			    					compareResult += "\t" + normalGt + ":.:" + pileupDepthNormal + ":" + normalReads1 + ":" + normalReads2 + ":" + normalFreq + ":" + normalDP4;
			    					compareResult += "\t" + tumorGt + ":.:" + pileupDepthTumor + ":" + tumorReads1 + ":" + tumorReads2 + ":" + tumorFreq + ":" + tumorDP4;
		    					}
		    					else
		    					{
			    					compareResult += "\t" + normalGt + ":.:" + pileupDepthNormal + ":" + normalReads1 + ":" + normalReads2 + ":" + normalFreq;
			    					compareResult += "\t" + tumorGt + ":.:" + pileupDepthTumor + ":" + tumorReads1 + ":" + tumorReads2 + ":" + tumorFreq;
		    					}
		    				}
		    				// Print to master file for validation //

		    				if(params.containsKey("validation"))
		    				{
		    					outValidation.println(chromNormal + "\t" + posNormal + "\t" + compareResult);
		    				}

		    				if(!params.containsKey("validation") && (compareResult.contains("Reference") || compareResult.contains("SS=0") || compareResult.contains("Filter")))
		    				{
		    					// Don't print reference/indelfilter positions unless doing validation //
		    				}
		    				else if(params.containsKey("strand-filter") && strandednessDiff > 0.10 && (strandedness2 < 0.10 || strandedness2 > 0.90))
		    				{
		    					// If filter is set, ignore variants that are supported largely by one strand //
		    					compareResult = "StrandFilter";
		    				}
		    				else if(allele1.contains("-") || allele1.contains("+") || allele2.contains("-") || allele2.contains("+"))//if(compareResult.contains("INS") || compareResult.contains("DEL"))
		    				{
		    					outIndel.println(chromNormal + "\t" + posNormal + "\t" + compareResult);
		    				}
		    				else
		    				{
			    				outSnp.println(chromNormal + "\t" + posNormal + "\t" + compareResult);
		    				}
		    			}
		    			else
		    			{
//		    				System.err.println("Uncalled" + chromNormal + "\t" + posNormal + "\t" + compareResult);
		    			}

		    			if(compareResult.contains("Reference"))
		    				calledReference++; //stats.put("calledReference", (stats.get("calledReference") + 1));
		    			else if(compareResult.contains("IndelFilter"))
		    				indelFilter++;	//stats.put("indelFilter", (stats.get("indelFilter") + 1));
		    			else if(compareResult.contains("StrandFilter"))
		    				strandFilter++;
		    			else if(compareResult.contains("Germline"))
		    				calledGermline++;	//stats.put("calledGermline", (stats.get("calledGermline") + 1));
		    			else if(compareResult.contains("Somatic"))
		    				calledSomatic++;	//stats.put("calledSomatic", (stats.get("calledSomatic") + 1));
		    			else if(compareResult.contains("LOH"))
		    				calledLOH++;	//stats.put("calledLOH", (stats.get("calledLOH") + 1));
		    			else if(compareResult.contains("Unknown"))
		    				calledUnknown++;	//stats.put("calledUnknown", (stats.get("calledUnknown") + 1));
		    			else if(compareResult.contains("Variant"))
		    				calledVariant++;	//stats.put("calledVariant", (stats.get("calledVariant") + 1));

				    	prevChromNormal = chromNormal;
				    	prevChromTumor = chromTumor;
		    		}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
96
22834655
net/sf/varscan/Somatic.java 422 608
net/sf/varscan/Somatic.java 1097 1361
----------------------------------------
			    				{
			    					int normalReads1 = Integer.parseInt(compareContents[2]);
			    					int normalReads2 = Integer.parseInt(compareContents[3]);
			    					String normalFreq = compareContents[4];
			    					String normalCall = compareContents[5];
			    					int tumorReads1 = Integer.parseInt(compareContents[6]);
			    					int tumorReads2 = Integer.parseInt(compareContents[7]);
			    					String tumorFreq = compareContents[8];
			    					String tumorCall = compareContents[9];
			    					String somStatus = compareContents[10];
			    					Double germlineP = Double.parseDouble(compareContents[11]);
			    					Double somaticP = Double.parseDouble(compareContents[12]);

			    					int totalDepth = pileupDepthNormal + pileupDepthTumor;

			    					if(allele2.startsWith("+"))
			    					{
			    						// INSERTION //
			    						// Ref = ref base; Var = ref base followed by inserted bases //
			    						String varColumn = allele1 + allele2.replace("+", "");
			    						compareResult = "." + "\t" + allele1 + "\t" + varColumn + "\t" + ".";
			    					}
			    					else if(allele2.startsWith("-"))
			    					{
			    						// DELETION //
			    						// Ref = ref base followed by deleted bases; var = ref base //
			    						String refColumn = allele1 + allele2.replace("-", "");
			    						compareResult = "." + "\t" + refColumn + "\t" + allele1 + "\t" + ".";
			    					}
			    					else
			    					{
				    					compareResult = "." + "\t" + allele1 + "\t" + allele2 + "\t" + ".";
			    					}


			    					// Decide on filter field //
			    					if(doStrandFilter && strandednessDiff > 0.10 && (strandedness2 < 0.10 || strandedness2 > 0.90))
			    					{
			    						compareResult += "\t" + "str10";
			    					}
			    					else if(somStatus.equals("IndelFilter"))
			    					{
			    						compareResult += "\t" + "indelError";
			    					}
			    					else
			    					{
			    						compareResult += "\t" + "PASS";
			    					}

			    					// Determine somatic status id and score //
			    					int ssCode = 0;
			    					double somScore = 0;

			    					if(somStatus.equals("Reference"))
			    					{
			    						// Wildtype //
			    						ssCode = 0;
			    						calledReference++;
			    					}
			    					else if(somStatus.equals("Germline"))
			    					{
			    						// Germline //
			    						ssCode = 1;
			    						calledGermline++;
			    						if(somaticP == 0)
			    						{
			    							somScore = 0;
			    						}
			    						else
			    						{
			    							somScore = 0 - (10 * java.lang.Math.log10(somaticP));
			    						}
			    					}
			    					else if(somStatus.equals("Somatic"))
			    					{
			    						// Somatic //
			    						ssCode = 2;
			    						calledSomatic++;
			    						if(somaticP == 0)
			    						{
			    							somScore = 255;
			    						}
			    						else
			    						{
			    							somScore = 0 - (10 * java.lang.Math.log10(somaticP));
			    						}
			    					}
			    					else if(somStatus.equals("LOH"))
			    					{
			    						// LOH //
			    						ssCode = 3;
			    						calledLOH++;
			    						if(somaticP == 0)
			    						{
			    							somScore = 255;
			    						}
			    						else
			    						{
			    							somScore = 0 - (10 * java.lang.Math.log10(somaticP));
			    						}
			    					}
			    					else
			    					{
			    						// Unknown //
			    						calledUnknown++;
			    						ssCode = 5;
			    					}

			    					// Adjust somatic score //
			    					if(somScore > 255)
			    						somScore = 255;

			    					// Print the info field //

			    					compareResult += "\t" + "DP=" + totalDepth;
			    					if(somStatus.equals("Somatic"))
			    						compareResult += ";SOMATIC";
			    					compareResult += ";" + "SS=" + ssCode;
			    					compareResult += ";" + "SSC=" + (int) somScore;
			    					compareResult += ";" + "GPV=" + pvalueFormat.format(germlineP);
			    					compareResult += ";" + "SPV=" + pvalueFormat.format(somaticP);

			    					// Print the format field //

			    					String tumorDP4 = "";
			    					String normalDP4 = "";

					    			if(compareContents.length >= 17)
					    			{
					    				try
					    				{
					    					tumorDP4 = compareContents[13] + "," + compareContents[14] + "," + compareContents[15] + "," + compareContents[16];
					    					normalDP4 = compareContents[17] + "," + compareContents[18] + "," + compareContents[19] + "," + compareContents[20];
					    				}
					    				catch(Exception e)
					    				{
					    					// Exception parsing info from compareResult //
					    					tumorDP4 = "";
					    					normalDP4 = "";
					    				}
					    			}

					    			if(tumorDP4.length() > 0)
					    				compareResult += "\tGT:GQ:DP:RD:AD:FREQ:DP4";
					    			else
					    				compareResult += "\tGT:GQ:DP:RD:AD:FREQ";

			    					// Determine normal genotype //
			    					String normalGt = ".";
			    					String tumorGt = ".";
			    					if(normalCall.equals(refBase))
			    					{
			    						normalGt = "0/0";
			    					}
			    					else if(VarScan.isHeterozygous(normalCall))
			    					{
			    						normalGt = "0/1";
			    					}
			    					else
			    					{
			    						normalGt = "1/1";
			    					}

			    					if(tumorCall.equals(refBase))
			    					{
			    						tumorGt = "0/0";
			    					}
			    					else if(VarScan.isHeterozygous(tumorCall))
			    					{
			    						tumorGt = "0/1";
			    					}
			    					else
			    					{
			    						tumorGt = "1/1";
			    					}

			    					if(tumorDP4.length() > 0)
			    					{
				    					compareResult += "\t" + normalGt + ":.:" + pileupDepthNormal + ":" + normalReads1 + ":" + normalReads2 + ":" + normalFreq + ":" + normalDP4;
				    					compareResult += "\t" + tumorGt + ":.:" + pileupDepthTumor + ":" + tumorReads1 + ":" + tumorReads2 + ":" + tumorFreq + ":" + tumorDP4;
			    					}
			    					else
			    					{
				    					compareResult += "\t" + normalGt + ":.:" + pileupDepthNormal + ":" + normalReads1 + ":" + normalReads2 + ":" + normalFreq;
				    					compareResult += "\t" + tumorGt + ":.:" + pileupDepthTumor + ":" + tumorReads1 + ":" + tumorReads2 + ":" + tumorFreq;
			    					}
			    				}

----------------------------------------
		    			{
		    				// Get the alleles to determine type //
		    				String[] compareContents = compareResult.split("\t");
			    			String allele1 = compareContents[0];
			    			String allele2 = compareContents[1];

			    			double strandedness1 = 0.50;
			    			double strandedness2 = 0.50;
			    			double strandednessDiff = 0.00;

			    			if(compareContents.length >= 17)
			    			{
			    				try
			    				{
			    					int tumorReads1plus = Integer.parseInt(compareContents[13]);
			    					int tumorReads1minus = Integer.parseInt(compareContents[14]);
			    					int tumorReads2plus = Integer.parseInt(compareContents[15]);
			    					int tumorReads2minus = Integer.parseInt(compareContents[16]);

			    					if(tumorReads1plus > 0 || tumorReads1minus > 0)
			    					{
			    						strandedness1 = (double) tumorReads1plus / (double) (tumorReads1plus + tumorReads1minus);
			    					}

			    					if(tumorReads2plus > 0 || tumorReads2minus > 0)
			    					{
			    						strandedness2 = (double) tumorReads2plus / (double) (tumorReads2plus + tumorReads2minus);
			    						if(tumorReads1plus > 0 || tumorReads1minus > 0)
			    						{
			    							strandednessDiff = java.lang.Math.abs(strandedness1 - strandedness2);
			    						}
			    					}
			    				}
			    				catch(Exception e)
			    				{
			    					// Exception parsing info from compareResult //
			    				}
			    			}

		    				//stats.put("comparedPositions", (stats.get("comparedPositions") + 1));
			    			comparedPositions++;

		    				if(params.containsKey("verbose") && !compareResult.contains("Reference"))
		    					System.err.println(chromNormal + "\t" + posNormal + "\t" + compareResult);

		    				// If VCF format specified, supply it //

		    				if(params.containsKey("output-vcf"))
		    				{
		    					int normalReads1 = Integer.parseInt(compareContents[2]);
		    					int normalReads2 = Integer.parseInt(compareContents[3]);
		    					String normalFreq = compareContents[4];
		    					String normalCall = compareContents[5];
		    					int tumorReads1 = Integer.parseInt(compareContents[6]);
		    					int tumorReads2 = Integer.parseInt(compareContents[7]);
		    					String tumorFreq = compareContents[8];
		    					String tumorCall = compareContents[9];
		    					String somStatus = compareContents[10];
		    					Double germlineP = Double.parseDouble(compareContents[11]);
		    					Double somaticP = Double.parseDouble(compareContents[12]);

		    					String[] normalContents = lineNormal.split("\t");
		    					//tumorContents = lineTumor.split("\t");
		    					int pileupDepthNormal = Integer.parseInt(normalContents[3]);
		    					int pileupDepthTumor = Integer.parseInt(tumorContents[3]);

		    					int totalDepth = pileupDepthNormal + pileupDepthTumor;

		    					if(allele2.startsWith("+"))
		    					{
		    						// INSERTION //
		    						// Ref = ref base; Var = ref base followed by inserted bases //
		    						String varColumn = allele1 + allele2.replace("+", "");
		    						compareResult = "." + "\t" + allele1 + "\t" + varColumn + "\t" + ".";
		    					}
		    					else if(allele2.startsWith("-"))
		    					{
		    						// DELETION //
		    						// Ref = ref base followed by deleted bases; var = ref base //
		    						String refColumn = allele1 + allele2.replace("-", "");
		    						compareResult = "." + "\t" + refColumn + "\t" + allele1 + "\t" + ".";
		    					}
		    					else
		    					{
			    					compareResult = "." + "\t" + allele1 + "\t" + allele2 + "\t" + ".";
		    					}


		    					// Decide on filter field //
		    					if(params.containsKey("strand-filter") && strandednessDiff > 0.10 && (strandedness2 < 0.10 || strandedness2 > 0.90))
		    					{
		    						compareResult += "\t" + "str10";
		    					}
		    					else if(somStatus.equals("IndelFilter"))
		    					{
		    						compareResult += "\t" + "indelError";
		    					}
		    					else
		    					{
		    						compareResult += "\t" + "PASS";
		    					}

		    					// Determine somatic status id and score //
		    					int ssCode = 0;
		    					double somScore = 0;

		    					if(somStatus.equals("Reference"))
		    					{
		    						// Wildtype //
		    						ssCode = 0;
		    						calledReference++;
		    					}
		    					else if(somStatus.equals("Germline"))
		    					{
		    						// Germline //
		    						ssCode = 1;
		    						calledGermline++;
		    						if(somaticP == 0)
		    						{
		    							somScore = 0;
		    						}
		    						else
		    						{
		    							somScore = 0 - (10 * java.lang.Math.log10(somaticP));
		    						}
		    					}
		    					else if(somStatus.equals("Somatic"))
		    					{
		    						// Somatic //
		    						ssCode = 2;
		    						calledSomatic++;
		    						if(somaticP == 0)
		    						{
		    							somScore = 255;
		    						}
		    						else
		    						{
		    							somScore = 0 - (10 * java.lang.Math.log10(somaticP));
		    						}
		    					}
		    					else if(somStatus.equals("LOH"))
		    					{
		    						// LOH //
		    						ssCode = 3;
		    						calledLOH++;
		    						if(somaticP == 0)
		    						{
		    							somScore = 255;
		    						}
		    						else
		    						{
		    							somScore = 0 - (10 * java.lang.Math.log10(somaticP));
		    						}
		    					}
		    					else
		    					{
		    						// Unknown //
		    						calledUnknown++;
		    						ssCode = 5;
		    					}

		    					// Adjust somatic score //
		    					if(somScore > 255)
		    						somScore = 255;

		    					// Print the info field //

		    					compareResult += "\t" + "DP=" + totalDepth;
		    					if(somStatus.equals("Somatic"))
		    						compareResult += ";SOMATIC";
		    					compareResult += ";" + "SS=" + ssCode;
		    					compareResult += ";" + "SSC=" + (int) somScore;
		    					compareResult += ";" + "GPV=" + pvalueFormat.format(germlineP);
		    					compareResult += ";" + "SPV=" + pvalueFormat.format(somaticP);

		    					// Print the format field //

		    					String tumorDP4 = "";
		    					String normalDP4 = "";

				    			if(compareContents.length >= 17)
				    			{
				    				try
				    				{
				    					tumorDP4 = compareContents[13] + "," + compareContents[14] + "," + compareContents[15] + "," + compareContents[16];
				    					normalDP4 = compareContents[17] + "," + compareContents[18] + "," + compareContents[19] + "," + compareContents[20];
				    				}
				    				catch(Exception e)
				    				{
				    					// Exception parsing info from compareResult //
				    					tumorDP4 = "";
				    					normalDP4 = "";
				    				}
				    			}

				    			if(tumorDP4.length() > 0)
				    				compareResult += "\tGT:GQ:DP:RD:AD:FREQ:DP4";
				    			else
				    				compareResult += "\tGT:GQ:DP:RD:AD:FREQ";

		    					// Determine normal genotype //
		    					String normalGt = ".";
		    					String tumorGt = ".";
		    					if(normalCall.equals(refBase))
		    					{
		    						normalGt = "0/0";
		    					}
		    					else if(VarScan.isHeterozygous(normalCall))
		    					{
		    						normalGt = "0/1";
		    					}
		    					else
		    					{
		    						normalGt = "1/1";
		    					}

		    					if(tumorCall.equals(refBase))
		    					{
		    						tumorGt = "0/0";
		    					}
		    					else if(VarScan.isHeterozygous(tumorCall))
		    					{
		    						tumorGt = "0/1";
		    					}
		    					else
		    					{
		    						tumorGt = "1/1";
		    					}

		    					if(tumorDP4.length() > 0)
		    					{
			    					compareResult += "\t" + normalGt + ":.:" + pileupDepthNormal + ":" + normalReads1 + ":" + normalReads2 + ":" + normalFreq + ":" + normalDP4;
			    					compareResult += "\t" + tumorGt + ":.:" + pileupDepthTumor + ":" + tumorReads1 + ":" + tumorReads2 + ":" + tumorFreq + ":" + tumorDP4;
		    					}
		    					else
		    					{
			    					compareResult += "\t" + normalGt + ":.:" + pileupDepthNormal + ":" + normalReads1 + ":" + normalReads2 + ":" + normalFreq;
			    					compareResult += "\t" + tumorGt + ":.:" + pileupDepthTumor + ":" + tumorReads1 + ":" + tumorReads2 + ":" + tumorFreq;
		    					}
		    				}
		    				// Print to master file for validation //

		    				if(params.containsKey("validation"))
		    				{
		    					outValidation.println(chromNormal + "\t" + posNormal + "\t" + compareResult);
		    				}

		    				if(!params.containsKey("validation") && (compareResult.contains("Reference") || compareResult.contains("SS=0") || compareResult.contains("Filter")))
		    				{
		    					// Don't print reference/indelfilter positions unless doing validation //
		    				}
		    				else if(params.containsKey("strand-filter") && strandednessDiff > 0.10 && (strandedness2 < 0.10 || strandedness2 > 0.90))
		    				{
		    					// If filter is set, ignore variants that are supported largely by one strand //
		    					compareResult = "StrandFilter";
		    				}
		    				else if(allele1.contains("-") || allele1.contains("+") || allele2.contains("-") || allele2.contains("+"))//if(compareResult.contains("INS") || compareResult.contains("DEL"))
		    				{
		    					outIndel.println(chromNormal + "\t" + posNormal + "\t" + compareResult);
		    				}
		    				else
		    				{
			    				outSnp.println(chromNormal + "\t" + posNormal + "\t" + compareResult);
		    				}
		    			}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
96
22834659
net/sf/varscan/Somatic.java 332 678
net/sf/varscan/Somatic.java 1097 1361
----------------------------------------
	    		{

	    			// Begin try-catch for line parsing //

	    			try
	    			{
	    				String[] lineContents = line.split("\t", -1);

	    				// Verify expected pileup format //

	    				if(lineContents.length > 5 && lineContents[0].length() > 0 && lineContents[1].length() > 0 && lineContents[2].length() > 0 && lineContents[3].length() > 0)
	    				{
	    					sharedPositions++;

	    					// Parse common fields from line //
	    					String refName = lineContents[0];
	    					int position = Integer.parseInt(lineContents[1]);
	    					refBase = lineContents[2].toUpperCase();

	    					chromNormal = refName;
	    					chromTumor = refName;
	    					posNormal = position;
	    					posTumor = position;

	    					// Parse normal, which should be first sample //
	    					int normalOffset = 3;
	    					int pileupDepthNormal = Integer.parseInt(lineContents[normalOffset]);
		    	        	String normalBases = lineContents[normalOffset + 1];
		    	        	String normalQualities = lineContents[normalOffset + 2];

	    					// Parse tumor, which should be second sample //
	    					int tumorOffset = 6;
	    					int pileupDepthTumor = Integer.parseInt(lineContents[tumorOffset]);
		    	        	String tumorBases = lineContents[tumorOffset + 1];
		    	        	String tumorQualities = lineContents[tumorOffset + 2];

	    					lineNormal = refName + "\t" + position + "\t" + refBase + "\t" + pileupDepthNormal + "\t" + normalBases + "\t" + normalQualities;
	    					lineTumor = refName + "\t" + position + "\t" + refBase + "\t" + pileupDepthTumor + "\t" + tumorBases + "\t" + tumorQualities;

	    					String compareResult = comparePositions(lineNormal, lineTumor, minCoverage, minReads2, minVarFreq, minAvgQual, pValueThreshold, somaticPvalue, minFreqForHom, normalPurity, tumorPurity);

			    			if(compareResult.length() > 0)
			    			{
			    				// Get the alleles to determine type //
			    				String[] compareContents = compareResult.split("\t");
				    			String allele1 = compareContents[0];
				    			String allele2 = compareContents[1];

				    			double strandedness1 = 0.50;
				    			double strandedness2 = 0.50;
				    			double strandednessDiff = 0.00;

				    			if(compareContents.length >= 17)
				    			{
				    				try
				    				{
				    					int tumorReads1plus = Integer.parseInt(compareContents[13]);
				    					int tumorReads1minus = Integer.parseInt(compareContents[14]);
				    					int tumorReads2plus = Integer.parseInt(compareContents[15]);
				    					int tumorReads2minus = Integer.parseInt(compareContents[16]);

				    					if(tumorReads1plus > 0 || tumorReads1minus > 0)
				    					{
				    						strandedness1 = (double) tumorReads1plus / (double) (tumorReads1plus + tumorReads1minus);
				    					}

				    					if(tumorReads2plus > 0 || tumorReads2minus > 0)
				    					{
				    						strandedness2 = (double) tumorReads2plus / (double) (tumorReads2plus + tumorReads2minus);
				    						if(tumorReads1plus > 0 || tumorReads1minus > 0)
				    						{
				    							strandednessDiff = java.lang.Math.abs(strandedness1 - strandedness2);
				    						}
				    					}
				    				}
				    				catch(Exception e)
				    				{
				    					// Exception parsing info from compareResult //
				    				}
				    			}

			    				//stats.put("comparedPositions", (stats.get("comparedPositions") + 1));
				    			comparedPositions++;

			    				if(params.containsKey("verbose") && !compareResult.contains("Reference"))
			    					System.err.println(chromNormal + "\t" + posNormal + "\t" + compareResult);

			    				// If VCF format specified, supply it //

			    				if(params.containsKey("output-vcf"))
			    				{
			    					int normalReads1 = Integer.parseInt(compareContents[2]);
			    					int normalReads2 = Integer.parseInt(compareContents[3]);
			    					String normalFreq = compareContents[4];
			    					String normalCall = compareContents[5];
			    					int tumorReads1 = Integer.parseInt(compareContents[6]);
			    					int tumorReads2 = Integer.parseInt(compareContents[7]);
			    					String tumorFreq = compareContents[8];
			    					String tumorCall = compareContents[9];
			    					String somStatus = compareContents[10];
			    					Double germlineP = Double.parseDouble(compareContents[11]);
			    					Double somaticP = Double.parseDouble(compareContents[12]);

			    					int totalDepth = pileupDepthNormal + pileupDepthTumor;

			    					if(allele2.startsWith("+"))
			    					{
			    						// INSERTION //
			    						// Ref = ref base; Var = ref base followed by inserted bases //
			    						String varColumn = allele1 + allele2.replace("+", "");
			    						compareResult = "." + "\t" + allele1 + "\t" + varColumn + "\t" + ".";
			    					}
			    					else if(allele2.startsWith("-"))
			    					{
			    						// DELETION //
			    						// Ref = ref base followed by deleted bases; var = ref base //
			    						String refColumn = allele1 + allele2.replace("-", "");
			    						compareResult = "." + "\t" + refColumn + "\t" + allele1 + "\t" + ".";
			    					}
			    					else
			    					{
				    					compareResult = "." + "\t" + allele1 + "\t" + allele2 + "\t" + ".";
			    					}


			    					// Decide on filter field //
			    					if(doStrandFilter && strandednessDiff > 0.10 && (strandedness2 < 0.10 || strandedness2 > 0.90))
			    					{
			    						compareResult += "\t" + "str10";
			    					}
			    					else if(somStatus.equals("IndelFilter"))
			    					{
			    						compareResult += "\t" + "indelError";
			    					}
			    					else
			    					{
			    						compareResult += "\t" + "PASS";
			    					}

			    					// Determine somatic status id and score //
			    					int ssCode = 0;
			    					double somScore = 0;

			    					if(somStatus.equals("Reference"))
			    					{
			    						// Wildtype //
			    						ssCode = 0;
			    						calledReference++;
			    					}
			    					else if(somStatus.equals("Germline"))
			    					{
			    						// Germline //
			    						ssCode = 1;
			    						calledGermline++;
			    						if(somaticP == 0)
			    						{
			    							somScore = 0;
			    						}
			    						else
			    						{
			    							somScore = 0 - (10 * java.lang.Math.log10(somaticP));
			    						}
			    					}
			    					else if(somStatus.equals("Somatic"))
			    					{
			    						// Somatic //
			    						ssCode = 2;
			    						calledSomatic++;
			    						if(somaticP == 0)
			    						{
			    							somScore = 255;
			    						}
			    						else
			    						{
			    							somScore = 0 - (10 * java.lang.Math.log10(somaticP));
			    						}
			    					}
			    					else if(somStatus.equals("LOH"))
			    					{
			    						// LOH //
			    						ssCode = 3;
			    						calledLOH++;
			    						if(somaticP == 0)
			    						{
			    							somScore = 255;
			    						}
			    						else
			    						{
			    							somScore = 0 - (10 * java.lang.Math.log10(somaticP));
			    						}
			    					}
			    					else
			    					{
			    						// Unknown //
			    						calledUnknown++;
			    						ssCode = 5;
			    					}

			    					// Adjust somatic score //
			    					if(somScore > 255)
			    						somScore = 255;

			    					// Print the info field //

			    					compareResult += "\t" + "DP=" + totalDepth;
			    					if(somStatus.equals("Somatic"))
			    						compareResult += ";SOMATIC";
			    					compareResult += ";" + "SS=" + ssCode;
			    					compareResult += ";" + "SSC=" + (int) somScore;
			    					compareResult += ";" + "GPV=" + pvalueFormat.format(germlineP);
			    					compareResult += ";" + "SPV=" + pvalueFormat.format(somaticP);

			    					// Print the format field //

			    					String tumorDP4 = "";
			    					String normalDP4 = "";

					    			if(compareContents.length >= 17)
					    			{
					    				try
					    				{
					    					tumorDP4 = compareContents[13] + "," + compareContents[14] + "," + compareContents[15] + "," + compareContents[16];
					    					normalDP4 = compareContents[17] + "," + compareContents[18] + "," + compareContents[19] + "," + compareContents[20];
					    				}
					    				catch(Exception e)
					    				{
					    					// Exception parsing info from compareResult //
					    					tumorDP4 = "";
					    					normalDP4 = "";
					    				}
					    			}

					    			if(tumorDP4.length() > 0)
					    				compareResult += "\tGT:GQ:DP:RD:AD:FREQ:DP4";
					    			else
					    				compareResult += "\tGT:GQ:DP:RD:AD:FREQ";

			    					// Determine normal genotype //
			    					String normalGt = ".";
			    					String tumorGt = ".";
			    					if(normalCall.equals(refBase))
			    					{
			    						normalGt = "0/0";
			    					}
			    					else if(VarScan.isHeterozygous(normalCall))
			    					{
			    						normalGt = "0/1";
			    					}
			    					else
			    					{
			    						normalGt = "1/1";
			    					}

			    					if(tumorCall.equals(refBase))
			    					{
			    						tumorGt = "0/0";
			    					}
			    					else if(VarScan.isHeterozygous(tumorCall))
			    					{
			    						tumorGt = "0/1";
			    					}
			    					else
			    					{
			    						tumorGt = "1/1";
			    					}

			    					if(tumorDP4.length() > 0)
			    					{
				    					compareResult += "\t" + normalGt + ":.:" + pileupDepthNormal + ":" + normalReads1 + ":" + normalReads2 + ":" + normalFreq + ":" + normalDP4;
				    					compareResult += "\t" + tumorGt + ":.:" + pileupDepthTumor + ":" + tumorReads1 + ":" + tumorReads2 + ":" + tumorFreq + ":" + tumorDP4;
			    					}
			    					else
			    					{
				    					compareResult += "\t" + normalGt + ":.:" + pileupDepthNormal + ":" + normalReads1 + ":" + normalReads2 + ":" + normalFreq;
				    					compareResult += "\t" + tumorGt + ":.:" + pileupDepthTumor + ":" + tumorReads1 + ":" + tumorReads2 + ":" + tumorFreq;
			    					}
			    				}

			    				// Print to master file for validation //

			    				if(params.containsKey("validation"))
			    				{
			    					outValidation.println(chromNormal + "\t" + posNormal + "\t" + compareResult);
			    				}

			    				if(!params.containsKey("validation") && (compareResult.contains("Reference") || compareResult.contains("SS=0")  || compareResult.contains("Filter")))
			    				{
			    					// Don't print reference/indelfilter positions unless doing validation //
			    				}
			    				else if(doStrandFilter && strandednessDiff > 0.10 && (strandedness2 < 0.10 || strandedness2 > 0.90))
			    				{
			    					// If filter is set, ignore variants that are supported largely by one strand //
			    					if(!params.containsKey("output-vcf"))
			    						compareResult = "StrandFilter";
			    				}
			    				else if(allele1.contains("-") || allele1.contains("+") || allele2.contains("-") || allele2.contains("+"))//if(compareResult.contains("INS") || compareResult.contains("DEL"))
			    				{
			    					outIndel.println(chromNormal + "\t" + posNormal + "\t" + compareResult);
			    				}
			    				else
			    				{
				    				outSnp.println(chromNormal + "\t" + posNormal + "\t" + compareResult);
			    				}
			    			}
			    			else
			    			{
//			    				System.err.println("Uncalled" + chromNormal + "\t" + posNormal + "\t" + compareResult);
			    			}

			    			if(compareResult.contains("Reference"))
			    				calledReference++; //stats.put("calledReference", (stats.get("calledReference") + 1));
			    			else if(compareResult.contains("IndelFilter"))
			    				indelFilter++;	//stats.put("indelFilter", (stats.get("indelFilter") + 1));
			    			else if(compareResult.contains("StrandFilter"))
			    				strandFilter++;
			    			else if(compareResult.contains("Germline"))
			    				calledGermline++;	//stats.put("calledGermline", (stats.get("calledGermline") + 1));
			    			else if(compareResult.contains("Somatic"))
			    				calledSomatic++;	//stats.put("calledSomatic", (stats.get("calledSomatic") + 1));
			    			else if(compareResult.contains("LOH"))
			    				calledLOH++;	//stats.put("calledLOH", (stats.get("calledLOH") + 1));
			    			else if(compareResult.contains("Unknown"))
			    				calledUnknown++;	//stats.put("calledUnknown", (stats.get("calledUnknown") + 1));
			    			else if(compareResult.contains("Variant"))
			    				calledVariant++;	//stats.put("calledVariant", (stats.get("calledVariant") + 1));



	    				}
	    				else
	    				{
	    					System.err.println("Error: Invalid format or not enough samples in mpileup: " + line + "\n");
	    					return;
	    				}
	    			}
	    			catch(Exception e)
	    		    {
	    		    	System.err.println("Parsing Exception on line:\n" + line + "\n" + e.getLocalizedMessage());
	    				numParsingExceptions++;
	    				if(numParsingExceptions >= 5)
	    				{
	    					System.err.println("Too many parsing exceptions encountered; exiting");
	    					return;
	    				}
	    		    	return;
	    		    }
	    		}

----------------------------------------
		    			{
		    				// Get the alleles to determine type //
		    				String[] compareContents = compareResult.split("\t");
			    			String allele1 = compareContents[0];
			    			String allele2 = compareContents[1];

			    			double strandedness1 = 0.50;
			    			double strandedness2 = 0.50;
			    			double strandednessDiff = 0.00;

			    			if(compareContents.length >= 17)
			    			{
			    				try
			    				{
			    					int tumorReads1plus = Integer.parseInt(compareContents[13]);
			    					int tumorReads1minus = Integer.parseInt(compareContents[14]);
			    					int tumorReads2plus = Integer.parseInt(compareContents[15]);
			    					int tumorReads2minus = Integer.parseInt(compareContents[16]);

			    					if(tumorReads1plus > 0 || tumorReads1minus > 0)
			    					{
			    						strandedness1 = (double) tumorReads1plus / (double) (tumorReads1plus + tumorReads1minus);
			    					}

			    					if(tumorReads2plus > 0 || tumorReads2minus > 0)
			    					{
			    						strandedness2 = (double) tumorReads2plus / (double) (tumorReads2plus + tumorReads2minus);
			    						if(tumorReads1plus > 0 || tumorReads1minus > 0)
			    						{
			    							strandednessDiff = java.lang.Math.abs(strandedness1 - strandedness2);
			    						}
			    					}
			    				}
			    				catch(Exception e)
			    				{
			    					// Exception parsing info from compareResult //
			    				}
			    			}

		    				//stats.put("comparedPositions", (stats.get("comparedPositions") + 1));
			    			comparedPositions++;

		    				if(params.containsKey("verbose") && !compareResult.contains("Reference"))
		    					System.err.println(chromNormal + "\t" + posNormal + "\t" + compareResult);

		    				// If VCF format specified, supply it //

		    				if(params.containsKey("output-vcf"))
		    				{
		    					int normalReads1 = Integer.parseInt(compareContents[2]);
		    					int normalReads2 = Integer.parseInt(compareContents[3]);
		    					String normalFreq = compareContents[4];
		    					String normalCall = compareContents[5];
		    					int tumorReads1 = Integer.parseInt(compareContents[6]);
		    					int tumorReads2 = Integer.parseInt(compareContents[7]);
		    					String tumorFreq = compareContents[8];
		    					String tumorCall = compareContents[9];
		    					String somStatus = compareContents[10];
		    					Double germlineP = Double.parseDouble(compareContents[11]);
		    					Double somaticP = Double.parseDouble(compareContents[12]);

		    					String[] normalContents = lineNormal.split("\t");
		    					//tumorContents = lineTumor.split("\t");
		    					int pileupDepthNormal = Integer.parseInt(normalContents[3]);
		    					int pileupDepthTumor = Integer.parseInt(tumorContents[3]);

		    					int totalDepth = pileupDepthNormal + pileupDepthTumor;

		    					if(allele2.startsWith("+"))
		    					{
		    						// INSERTION //
		    						// Ref = ref base; Var = ref base followed by inserted bases //
		    						String varColumn = allele1 + allele2.replace("+", "");
		    						compareResult = "." + "\t" + allele1 + "\t" + varColumn + "\t" + ".";
		    					}
		    					else if(allele2.startsWith("-"))
		    					{
		    						// DELETION //
		    						// Ref = ref base followed by deleted bases; var = ref base //
		    						String refColumn = allele1 + allele2.replace("-", "");
		    						compareResult = "." + "\t" + refColumn + "\t" + allele1 + "\t" + ".";
		    					}
		    					else
		    					{
			    					compareResult = "." + "\t" + allele1 + "\t" + allele2 + "\t" + ".";
		    					}


		    					// Decide on filter field //
		    					if(params.containsKey("strand-filter") && strandednessDiff > 0.10 && (strandedness2 < 0.10 || strandedness2 > 0.90))
		    					{
		    						compareResult += "\t" + "str10";
		    					}
		    					else if(somStatus.equals("IndelFilter"))
		    					{
		    						compareResult += "\t" + "indelError";
		    					}
		    					else
		    					{
		    						compareResult += "\t" + "PASS";
		    					}

		    					// Determine somatic status id and score //
		    					int ssCode = 0;
		    					double somScore = 0;

		    					if(somStatus.equals("Reference"))
		    					{
		    						// Wildtype //
		    						ssCode = 0;
		    						calledReference++;
		    					}
		    					else if(somStatus.equals("Germline"))
		    					{
		    						// Germline //
		    						ssCode = 1;
		    						calledGermline++;
		    						if(somaticP == 0)
		    						{
		    							somScore = 0;
		    						}
		    						else
		    						{
		    							somScore = 0 - (10 * java.lang.Math.log10(somaticP));
		    						}
		    					}
		    					else if(somStatus.equals("Somatic"))
		    					{
		    						// Somatic //
		    						ssCode = 2;
		    						calledSomatic++;
		    						if(somaticP == 0)
		    						{
		    							somScore = 255;
		    						}
		    						else
		    						{
		    							somScore = 0 - (10 * java.lang.Math.log10(somaticP));
		    						}
		    					}
		    					else if(somStatus.equals("LOH"))
		    					{
		    						// LOH //
		    						ssCode = 3;
		    						calledLOH++;
		    						if(somaticP == 0)
		    						{
		    							somScore = 255;
		    						}
		    						else
		    						{
		    							somScore = 0 - (10 * java.lang.Math.log10(somaticP));
		    						}
		    					}
		    					else
		    					{
		    						// Unknown //
		    						calledUnknown++;
		    						ssCode = 5;
		    					}

		    					// Adjust somatic score //
		    					if(somScore > 255)
		    						somScore = 255;

		    					// Print the info field //

		    					compareResult += "\t" + "DP=" + totalDepth;
		    					if(somStatus.equals("Somatic"))
		    						compareResult += ";SOMATIC";
		    					compareResult += ";" + "SS=" + ssCode;
		    					compareResult += ";" + "SSC=" + (int) somScore;
		    					compareResult += ";" + "GPV=" + pvalueFormat.format(germlineP);
		    					compareResult += ";" + "SPV=" + pvalueFormat.format(somaticP);

		    					// Print the format field //

		    					String tumorDP4 = "";
		    					String normalDP4 = "";

				    			if(compareContents.length >= 17)
				    			{
				    				try
				    				{
				    					tumorDP4 = compareContents[13] + "," + compareContents[14] + "," + compareContents[15] + "," + compareContents[16];
				    					normalDP4 = compareContents[17] + "," + compareContents[18] + "," + compareContents[19] + "," + compareContents[20];
				    				}
				    				catch(Exception e)
				    				{
				    					// Exception parsing info from compareResult //
				    					tumorDP4 = "";
				    					normalDP4 = "";
				    				}
				    			}

				    			if(tumorDP4.length() > 0)
				    				compareResult += "\tGT:GQ:DP:RD:AD:FREQ:DP4";
				    			else
				    				compareResult += "\tGT:GQ:DP:RD:AD:FREQ";

		    					// Determine normal genotype //
		    					String normalGt = ".";
		    					String tumorGt = ".";
		    					if(normalCall.equals(refBase))
		    					{
		    						normalGt = "0/0";
		    					}
		    					else if(VarScan.isHeterozygous(normalCall))
		    					{
		    						normalGt = "0/1";
		    					}
		    					else
		    					{
		    						normalGt = "1/1";
		    					}

		    					if(tumorCall.equals(refBase))
		    					{
		    						tumorGt = "0/0";
		    					}
		    					else if(VarScan.isHeterozygous(tumorCall))
		    					{
		    						tumorGt = "0/1";
		    					}
		    					else
		    					{
		    						tumorGt = "1/1";
		    					}

		    					if(tumorDP4.length() > 0)
		    					{
			    					compareResult += "\t" + normalGt + ":.:" + pileupDepthNormal + ":" + normalReads1 + ":" + normalReads2 + ":" + normalFreq + ":" + normalDP4;
			    					compareResult += "\t" + tumorGt + ":.:" + pileupDepthTumor + ":" + tumorReads1 + ":" + tumorReads2 + ":" + tumorFreq + ":" + tumorDP4;
		    					}
		    					else
		    					{
			    					compareResult += "\t" + normalGt + ":.:" + pileupDepthNormal + ":" + normalReads1 + ":" + normalReads2 + ":" + normalFreq;
			    					compareResult += "\t" + tumorGt + ":.:" + pileupDepthTumor + ":" + tumorReads1 + ":" + tumorReads2 + ":" + tumorFreq;
		    					}
		    				}
		    				// Print to master file for validation //

		    				if(params.containsKey("validation"))
		    				{
		    					outValidation.println(chromNormal + "\t" + posNormal + "\t" + compareResult);
		    				}

		    				if(!params.containsKey("validation") && (compareResult.contains("Reference") || compareResult.contains("SS=0") || compareResult.contains("Filter")))
		    				{
		    					// Don't print reference/indelfilter positions unless doing validation //
		    				}
		    				else if(params.containsKey("strand-filter") && strandednessDiff > 0.10 && (strandedness2 < 0.10 || strandedness2 > 0.90))
		    				{
		    					// If filter is set, ignore variants that are supported largely by one strand //
		    					compareResult = "StrandFilter";
		    				}
		    				else if(allele1.contains("-") || allele1.contains("+") || allele2.contains("-") || allele2.contains("+"))//if(compareResult.contains("INS") || compareResult.contains("DEL"))
		    				{
		    					outIndel.println(chromNormal + "\t" + posNormal + "\t" + compareResult);
		    				}
		    				else
		    				{
			    				outSnp.println(chromNormal + "\t" + posNormal + "\t" + compareResult);
		    				}
		    			}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
96
22834658
net/sf/varscan/Somatic.java 374 635
net/sf/varscan/Somatic.java 1097 1361
----------------------------------------
			    			{
			    				// Get the alleles to determine type //
			    				String[] compareContents = compareResult.split("\t");
				    			String allele1 = compareContents[0];
				    			String allele2 = compareContents[1];

				    			double strandedness1 = 0.50;
				    			double strandedness2 = 0.50;
				    			double strandednessDiff = 0.00;

				    			if(compareContents.length >= 17)
				    			{
				    				try
				    				{
				    					int tumorReads1plus = Integer.parseInt(compareContents[13]);
				    					int tumorReads1minus = Integer.parseInt(compareContents[14]);
				    					int tumorReads2plus = Integer.parseInt(compareContents[15]);
				    					int tumorReads2minus = Integer.parseInt(compareContents[16]);

				    					if(tumorReads1plus > 0 || tumorReads1minus > 0)
				    					{
				    						strandedness1 = (double) tumorReads1plus / (double) (tumorReads1plus + tumorReads1minus);
				    					}

				    					if(tumorReads2plus > 0 || tumorReads2minus > 0)
				    					{
				    						strandedness2 = (double) tumorReads2plus / (double) (tumorReads2plus + tumorReads2minus);
				    						if(tumorReads1plus > 0 || tumorReads1minus > 0)
				    						{
				    							strandednessDiff = java.lang.Math.abs(strandedness1 - strandedness2);
				    						}
				    					}
				    				}
				    				catch(Exception e)
				    				{
				    					// Exception parsing info from compareResult //
				    				}
				    			}

			    				//stats.put("comparedPositions", (stats.get("comparedPositions") + 1));
				    			comparedPositions++;

			    				if(params.containsKey("verbose") && !compareResult.contains("Reference"))
			    					System.err.println(chromNormal + "\t" + posNormal + "\t" + compareResult);

			    				// If VCF format specified, supply it //

			    				if(params.containsKey("output-vcf"))
			    				{
			    					int normalReads1 = Integer.parseInt(compareContents[2]);
			    					int normalReads2 = Integer.parseInt(compareContents[3]);
			    					String normalFreq = compareContents[4];
			    					String normalCall = compareContents[5];
			    					int tumorReads1 = Integer.parseInt(compareContents[6]);
			    					int tumorReads2 = Integer.parseInt(compareContents[7]);
			    					String tumorFreq = compareContents[8];
			    					String tumorCall = compareContents[9];
			    					String somStatus = compareContents[10];
			    					Double germlineP = Double.parseDouble(compareContents[11]);
			    					Double somaticP = Double.parseDouble(compareContents[12]);

			    					int totalDepth = pileupDepthNormal + pileupDepthTumor;

			    					if(allele2.startsWith("+"))
			    					{
			    						// INSERTION //
			    						// Ref = ref base; Var = ref base followed by inserted bases //
			    						String varColumn = allele1 + allele2.replace("+", "");
			    						compareResult = "." + "\t" + allele1 + "\t" + varColumn + "\t" + ".";
			    					}
			    					else if(allele2.startsWith("-"))
			    					{
			    						// DELETION //
			    						// Ref = ref base followed by deleted bases; var = ref base //
			    						String refColumn = allele1 + allele2.replace("-", "");
			    						compareResult = "." + "\t" + refColumn + "\t" + allele1 + "\t" + ".";
			    					}
			    					else
			    					{
				    					compareResult = "." + "\t" + allele1 + "\t" + allele2 + "\t" + ".";
			    					}


			    					// Decide on filter field //
			    					if(doStrandFilter && strandednessDiff > 0.10 && (strandedness2 < 0.10 || strandedness2 > 0.90))
			    					{
			    						compareResult += "\t" + "str10";
			    					}
			    					else if(somStatus.equals("IndelFilter"))
			    					{
			    						compareResult += "\t" + "indelError";
			    					}
			    					else
			    					{
			    						compareResult += "\t" + "PASS";
			    					}

			    					// Determine somatic status id and score //
			    					int ssCode = 0;
			    					double somScore = 0;

			    					if(somStatus.equals("Reference"))
			    					{
			    						// Wildtype //
			    						ssCode = 0;
			    						calledReference++;
			    					}
			    					else if(somStatus.equals("Germline"))
			    					{
			    						// Germline //
			    						ssCode = 1;
			    						calledGermline++;
			    						if(somaticP == 0)
			    						{
			    							somScore = 0;
			    						}
			    						else
			    						{
			    							somScore = 0 - (10 * java.lang.Math.log10(somaticP));
			    						}
			    					}
			    					else if(somStatus.equals("Somatic"))
			    					{
			    						// Somatic //
			    						ssCode = 2;
			    						calledSomatic++;
			    						if(somaticP == 0)
			    						{
			    							somScore = 255;
			    						}
			    						else
			    						{
			    							somScore = 0 - (10 * java.lang.Math.log10(somaticP));
			    						}
			    					}
			    					else if(somStatus.equals("LOH"))
			    					{
			    						// LOH //
			    						ssCode = 3;
			    						calledLOH++;
			    						if(somaticP == 0)
			    						{
			    							somScore = 255;
			    						}
			    						else
			    						{
			    							somScore = 0 - (10 * java.lang.Math.log10(somaticP));
			    						}
			    					}
			    					else
			    					{
			    						// Unknown //
			    						calledUnknown++;
			    						ssCode = 5;
			    					}

			    					// Adjust somatic score //
			    					if(somScore > 255)
			    						somScore = 255;

			    					// Print the info field //

			    					compareResult += "\t" + "DP=" + totalDepth;
			    					if(somStatus.equals("Somatic"))
			    						compareResult += ";SOMATIC";
			    					compareResult += ";" + "SS=" + ssCode;
			    					compareResult += ";" + "SSC=" + (int) somScore;
			    					compareResult += ";" + "GPV=" + pvalueFormat.format(germlineP);
			    					compareResult += ";" + "SPV=" + pvalueFormat.format(somaticP);

			    					// Print the format field //

			    					String tumorDP4 = "";
			    					String normalDP4 = "";

					    			if(compareContents.length >= 17)
					    			{
					    				try
					    				{
					    					tumorDP4 = compareContents[13] + "," + compareContents[14] + "," + compareContents[15] + "," + compareContents[16];
					    					normalDP4 = compareContents[17] + "," + compareContents[18] + "," + compareContents[19] + "," + compareContents[20];
					    				}
					    				catch(Exception e)
					    				{
					    					// Exception parsing info from compareResult //
					    					tumorDP4 = "";
					    					normalDP4 = "";
					    				}
					    			}

					    			if(tumorDP4.length() > 0)
					    				compareResult += "\tGT:GQ:DP:RD:AD:FREQ:DP4";
					    			else
					    				compareResult += "\tGT:GQ:DP:RD:AD:FREQ";

			    					// Determine normal genotype //
			    					String normalGt = ".";
			    					String tumorGt = ".";
			    					if(normalCall.equals(refBase))
			    					{
			    						normalGt = "0/0";
			    					}
			    					else if(VarScan.isHeterozygous(normalCall))
			    					{
			    						normalGt = "0/1";
			    					}
			    					else
			    					{
			    						normalGt = "1/1";
			    					}

			    					if(tumorCall.equals(refBase))
			    					{
			    						tumorGt = "0/0";
			    					}
			    					else if(VarScan.isHeterozygous(tumorCall))
			    					{
			    						tumorGt = "0/1";
			    					}
			    					else
			    					{
			    						tumorGt = "1/1";
			    					}

			    					if(tumorDP4.length() > 0)
			    					{
				    					compareResult += "\t" + normalGt + ":.:" + pileupDepthNormal + ":" + normalReads1 + ":" + normalReads2 + ":" + normalFreq + ":" + normalDP4;
				    					compareResult += "\t" + tumorGt + ":.:" + pileupDepthTumor + ":" + tumorReads1 + ":" + tumorReads2 + ":" + tumorFreq + ":" + tumorDP4;
			    					}
			    					else
			    					{
				    					compareResult += "\t" + normalGt + ":.:" + pileupDepthNormal + ":" + normalReads1 + ":" + normalReads2 + ":" + normalFreq;
				    					compareResult += "\t" + tumorGt + ":.:" + pileupDepthTumor + ":" + tumorReads1 + ":" + tumorReads2 + ":" + tumorFreq;
			    					}
			    				}

			    				// Print to master file for validation //

			    				if(params.containsKey("validation"))
			    				{
			    					outValidation.println(chromNormal + "\t" + posNormal + "\t" + compareResult);
			    				}

			    				if(!params.containsKey("validation") && (compareResult.contains("Reference") || compareResult.contains("SS=0")  || compareResult.contains("Filter")))
			    				{
			    					// Don't print reference/indelfilter positions unless doing validation //
			    				}
			    				else if(doStrandFilter && strandednessDiff > 0.10 && (strandedness2 < 0.10 || strandedness2 > 0.90))
			    				{
			    					// If filter is set, ignore variants that are supported largely by one strand //
			    					if(!params.containsKey("output-vcf"))
			    						compareResult = "StrandFilter";
			    				}
			    				else if(allele1.contains("-") || allele1.contains("+") || allele2.contains("-") || allele2.contains("+"))//if(compareResult.contains("INS") || compareResult.contains("DEL"))
			    				{
			    					outIndel.println(chromNormal + "\t" + posNormal + "\t" + compareResult);
			    				}
			    				else
			    				{
				    				outSnp.println(chromNormal + "\t" + posNormal + "\t" + compareResult);
			    				}
			    			}

----------------------------------------
		    			{
		    				// Get the alleles to determine type //
		    				String[] compareContents = compareResult.split("\t");
			    			String allele1 = compareContents[0];
			    			String allele2 = compareContents[1];

			    			double strandedness1 = 0.50;
			    			double strandedness2 = 0.50;
			    			double strandednessDiff = 0.00;

			    			if(compareContents.length >= 17)
			    			{
			    				try
			    				{
			    					int tumorReads1plus = Integer.parseInt(compareContents[13]);
			    					int tumorReads1minus = Integer.parseInt(compareContents[14]);
			    					int tumorReads2plus = Integer.parseInt(compareContents[15]);
			    					int tumorReads2minus = Integer.parseInt(compareContents[16]);

			    					if(tumorReads1plus > 0 || tumorReads1minus > 0)
			    					{
			    						strandedness1 = (double) tumorReads1plus / (double) (tumorReads1plus + tumorReads1minus);
			    					}

			    					if(tumorReads2plus > 0 || tumorReads2minus > 0)
			    					{
			    						strandedness2 = (double) tumorReads2plus / (double) (tumorReads2plus + tumorReads2minus);
			    						if(tumorReads1plus > 0 || tumorReads1minus > 0)
			    						{
			    							strandednessDiff = java.lang.Math.abs(strandedness1 - strandedness2);
			    						}
			    					}
			    				}
			    				catch(Exception e)
			    				{
			    					// Exception parsing info from compareResult //
			    				}
			    			}

		    				//stats.put("comparedPositions", (stats.get("comparedPositions") + 1));
			    			comparedPositions++;

		    				if(params.containsKey("verbose") && !compareResult.contains("Reference"))
		    					System.err.println(chromNormal + "\t" + posNormal + "\t" + compareResult);

		    				// If VCF format specified, supply it //

		    				if(params.containsKey("output-vcf"))
		    				{
		    					int normalReads1 = Integer.parseInt(compareContents[2]);
		    					int normalReads2 = Integer.parseInt(compareContents[3]);
		    					String normalFreq = compareContents[4];
		    					String normalCall = compareContents[5];
		    					int tumorReads1 = Integer.parseInt(compareContents[6]);
		    					int tumorReads2 = Integer.parseInt(compareContents[7]);
		    					String tumorFreq = compareContents[8];
		    					String tumorCall = compareContents[9];
		    					String somStatus = compareContents[10];
		    					Double germlineP = Double.parseDouble(compareContents[11]);
		    					Double somaticP = Double.parseDouble(compareContents[12]);

		    					String[] normalContents = lineNormal.split("\t");
		    					//tumorContents = lineTumor.split("\t");
		    					int pileupDepthNormal = Integer.parseInt(normalContents[3]);
		    					int pileupDepthTumor = Integer.parseInt(tumorContents[3]);

		    					int totalDepth = pileupDepthNormal + pileupDepthTumor;

		    					if(allele2.startsWith("+"))
		    					{
		    						// INSERTION //
		    						// Ref = ref base; Var = ref base followed by inserted bases //
		    						String varColumn = allele1 + allele2.replace("+", "");
		    						compareResult = "." + "\t" + allele1 + "\t" + varColumn + "\t" + ".";
		    					}
		    					else if(allele2.startsWith("-"))
		    					{
		    						// DELETION //
		    						// Ref = ref base followed by deleted bases; var = ref base //
		    						String refColumn = allele1 + allele2.replace("-", "");
		    						compareResult = "." + "\t" + refColumn + "\t" + allele1 + "\t" + ".";
		    					}
		    					else
		    					{
			    					compareResult = "." + "\t" + allele1 + "\t" + allele2 + "\t" + ".";
		    					}


		    					// Decide on filter field //
		    					if(params.containsKey("strand-filter") && strandednessDiff > 0.10 && (strandedness2 < 0.10 || strandedness2 > 0.90))
		    					{
		    						compareResult += "\t" + "str10";
		    					}
		    					else if(somStatus.equals("IndelFilter"))
		    					{
		    						compareResult += "\t" + "indelError";
		    					}
		    					else
		    					{
		    						compareResult += "\t" + "PASS";
		    					}

		    					// Determine somatic status id and score //
		    					int ssCode = 0;
		    					double somScore = 0;

		    					if(somStatus.equals("Reference"))
		    					{
		    						// Wildtype //
		    						ssCode = 0;
		    						calledReference++;
		    					}
		    					else if(somStatus.equals("Germline"))
		    					{
		    						// Germline //
		    						ssCode = 1;
		    						calledGermline++;
		    						if(somaticP == 0)
		    						{
		    							somScore = 0;
		    						}
		    						else
		    						{
		    							somScore = 0 - (10 * java.lang.Math.log10(somaticP));
		    						}
		    					}
		    					else if(somStatus.equals("Somatic"))
		    					{
		    						// Somatic //
		    						ssCode = 2;
		    						calledSomatic++;
		    						if(somaticP == 0)
		    						{
		    							somScore = 255;
		    						}
		    						else
		    						{
		    							somScore = 0 - (10 * java.lang.Math.log10(somaticP));
		    						}
		    					}
		    					else if(somStatus.equals("LOH"))
		    					{
		    						// LOH //
		    						ssCode = 3;
		    						calledLOH++;
		    						if(somaticP == 0)
		    						{
		    							somScore = 255;
		    						}
		    						else
		    						{
		    							somScore = 0 - (10 * java.lang.Math.log10(somaticP));
		    						}
		    					}
		    					else
		    					{
		    						// Unknown //
		    						calledUnknown++;
		    						ssCode = 5;
		    					}

		    					// Adjust somatic score //
		    					if(somScore > 255)
		    						somScore = 255;

		    					// Print the info field //

		    					compareResult += "\t" + "DP=" + totalDepth;
		    					if(somStatus.equals("Somatic"))
		    						compareResult += ";SOMATIC";
		    					compareResult += ";" + "SS=" + ssCode;
		    					compareResult += ";" + "SSC=" + (int) somScore;
		    					compareResult += ";" + "GPV=" + pvalueFormat.format(germlineP);
		    					compareResult += ";" + "SPV=" + pvalueFormat.format(somaticP);

		    					// Print the format field //

		    					String tumorDP4 = "";
		    					String normalDP4 = "";

				    			if(compareContents.length >= 17)
				    			{
				    				try
				    				{
				    					tumorDP4 = compareContents[13] + "," + compareContents[14] + "," + compareContents[15] + "," + compareContents[16];
				    					normalDP4 = compareContents[17] + "," + compareContents[18] + "," + compareContents[19] + "," + compareContents[20];
				    				}
				    				catch(Exception e)
				    				{
				    					// Exception parsing info from compareResult //
				    					tumorDP4 = "";
				    					normalDP4 = "";
				    				}
				    			}

				    			if(tumorDP4.length() > 0)
				    				compareResult += "\tGT:GQ:DP:RD:AD:FREQ:DP4";
				    			else
				    				compareResult += "\tGT:GQ:DP:RD:AD:FREQ";

		    					// Determine normal genotype //
		    					String normalGt = ".";
		    					String tumorGt = ".";
		    					if(normalCall.equals(refBase))
		    					{
		    						normalGt = "0/0";
		    					}
		    					else if(VarScan.isHeterozygous(normalCall))
		    					{
		    						normalGt = "0/1";
		    					}
		    					else
		    					{
		    						normalGt = "1/1";
		    					}

		    					if(tumorCall.equals(refBase))
		    					{
		    						tumorGt = "0/0";
		    					}
		    					else if(VarScan.isHeterozygous(tumorCall))
		    					{
		    						tumorGt = "0/1";
		    					}
		    					else
		    					{
		    						tumorGt = "1/1";
		    					}

		    					if(tumorDP4.length() > 0)
		    					{
			    					compareResult += "\t" + normalGt + ":.:" + pileupDepthNormal + ":" + normalReads1 + ":" + normalReads2 + ":" + normalFreq + ":" + normalDP4;
			    					compareResult += "\t" + tumorGt + ":.:" + pileupDepthTumor + ":" + tumorReads1 + ":" + tumorReads2 + ":" + tumorFreq + ":" + tumorDP4;
		    					}
		    					else
		    					{
			    					compareResult += "\t" + normalGt + ":.:" + pileupDepthNormal + ":" + normalReads1 + ":" + normalReads2 + ":" + normalFreq;
			    					compareResult += "\t" + tumorGt + ":.:" + pileupDepthTumor + ":" + tumorReads1 + ":" + tumorReads2 + ":" + tumorFreq;
		    					}
		    				}
		    				// Print to master file for validation //

		    				if(params.containsKey("validation"))
		    				{
		    					outValidation.println(chromNormal + "\t" + posNormal + "\t" + compareResult);
		    				}

		    				if(!params.containsKey("validation") && (compareResult.contains("Reference") || compareResult.contains("SS=0") || compareResult.contains("Filter")))
		    				{
		    					// Don't print reference/indelfilter positions unless doing validation //
		    				}
		    				else if(params.containsKey("strand-filter") && strandednessDiff > 0.10 && (strandedness2 < 0.10 || strandedness2 > 0.90))
		    				{
		    					// If filter is set, ignore variants that are supported largely by one strand //
		    					compareResult = "StrandFilter";
		    				}
		    				else if(allele1.contains("-") || allele1.contains("+") || allele2.contains("-") || allele2.contains("+"))//if(compareResult.contains("INS") || compareResult.contains("DEL"))
		    				{
		    					outIndel.println(chromNormal + "\t" + posNormal + "\t" + compareResult);
		    				}
		    				else
		    				{
			    				outSnp.println(chromNormal + "\t" + posNormal + "\t" + compareResult);
		    				}
		    			}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
96
22834657
net/sf/varscan/Somatic.java 343 660
net/sf/varscan/Somatic.java 1097 1361
----------------------------------------
	    				{
	    					sharedPositions++;

	    					// Parse common fields from line //
	    					String refName = lineContents[0];
	    					int position = Integer.parseInt(lineContents[1]);
	    					refBase = lineContents[2].toUpperCase();

	    					chromNormal = refName;
	    					chromTumor = refName;
	    					posNormal = position;
	    					posTumor = position;

	    					// Parse normal, which should be first sample //
	    					int normalOffset = 3;
	    					int pileupDepthNormal = Integer.parseInt(lineContents[normalOffset]);
		    	        	String normalBases = lineContents[normalOffset + 1];
		    	        	String normalQualities = lineContents[normalOffset + 2];

	    					// Parse tumor, which should be second sample //
	    					int tumorOffset = 6;
	    					int pileupDepthTumor = Integer.parseInt(lineContents[tumorOffset]);
		    	        	String tumorBases = lineContents[tumorOffset + 1];
		    	        	String tumorQualities = lineContents[tumorOffset + 2];

	    					lineNormal = refName + "\t" + position + "\t" + refBase + "\t" + pileupDepthNormal + "\t" + normalBases + "\t" + normalQualities;
	    					lineTumor = refName + "\t" + position + "\t" + refBase + "\t" + pileupDepthTumor + "\t" + tumorBases + "\t" + tumorQualities;

	    					String compareResult = comparePositions(lineNormal, lineTumor, minCoverage, minReads2, minVarFreq, minAvgQual, pValueThreshold, somaticPvalue, minFreqForHom, normalPurity, tumorPurity);

			    			if(compareResult.length() > 0)
			    			{
			    				// Get the alleles to determine type //
			    				String[] compareContents = compareResult.split("\t");
				    			String allele1 = compareContents[0];
				    			String allele2 = compareContents[1];

				    			double strandedness1 = 0.50;
				    			double strandedness2 = 0.50;
				    			double strandednessDiff = 0.00;

				    			if(compareContents.length >= 17)
				    			{
				    				try
				    				{
				    					int tumorReads1plus = Integer.parseInt(compareContents[13]);
				    					int tumorReads1minus = Integer.parseInt(compareContents[14]);
				    					int tumorReads2plus = Integer.parseInt(compareContents[15]);
				    					int tumorReads2minus = Integer.parseInt(compareContents[16]);

				    					if(tumorReads1plus > 0 || tumorReads1minus > 0)
				    					{
				    						strandedness1 = (double) tumorReads1plus / (double) (tumorReads1plus + tumorReads1minus);
				    					}

				    					if(tumorReads2plus > 0 || tumorReads2minus > 0)
				    					{
				    						strandedness2 = (double) tumorReads2plus / (double) (tumorReads2plus + tumorReads2minus);
				    						if(tumorReads1plus > 0 || tumorReads1minus > 0)
				    						{
				    							strandednessDiff = java.lang.Math.abs(strandedness1 - strandedness2);
				    						}
				    					}
				    				}
				    				catch(Exception e)
				    				{
				    					// Exception parsing info from compareResult //
				    				}
				    			}

			    				//stats.put("comparedPositions", (stats.get("comparedPositions") + 1));
				    			comparedPositions++;

			    				if(params.containsKey("verbose") && !compareResult.contains("Reference"))
			    					System.err.println(chromNormal + "\t" + posNormal + "\t" + compareResult);

			    				// If VCF format specified, supply it //

			    				if(params.containsKey("output-vcf"))
			    				{
			    					int normalReads1 = Integer.parseInt(compareContents[2]);
			    					int normalReads2 = Integer.parseInt(compareContents[3]);
			    					String normalFreq = compareContents[4];
			    					String normalCall = compareContents[5];
			    					int tumorReads1 = Integer.parseInt(compareContents[6]);
			    					int tumorReads2 = Integer.parseInt(compareContents[7]);
			    					String tumorFreq = compareContents[8];
			    					String tumorCall = compareContents[9];
			    					String somStatus = compareContents[10];
			    					Double germlineP = Double.parseDouble(compareContents[11]);
			    					Double somaticP = Double.parseDouble(compareContents[12]);

			    					int totalDepth = pileupDepthNormal + pileupDepthTumor;

			    					if(allele2.startsWith("+"))
			    					{
			    						// INSERTION //
			    						// Ref = ref base; Var = ref base followed by inserted bases //
			    						String varColumn = allele1 + allele2.replace("+", "");
			    						compareResult = "." + "\t" + allele1 + "\t" + varColumn + "\t" + ".";
			    					}
			    					else if(allele2.startsWith("-"))
			    					{
			    						// DELETION //
			    						// Ref = ref base followed by deleted bases; var = ref base //
			    						String refColumn = allele1 + allele2.replace("-", "");
			    						compareResult = "." + "\t" + refColumn + "\t" + allele1 + "\t" + ".";
			    					}
			    					else
			    					{
				    					compareResult = "." + "\t" + allele1 + "\t" + allele2 + "\t" + ".";
			    					}


			    					// Decide on filter field //
			    					if(doStrandFilter && strandednessDiff > 0.10 && (strandedness2 < 0.10 || strandedness2 > 0.90))
			    					{
			    						compareResult += "\t" + "str10";
			    					}
			    					else if(somStatus.equals("IndelFilter"))
			    					{
			    						compareResult += "\t" + "indelError";
			    					}
			    					else
			    					{
			    						compareResult += "\t" + "PASS";
			    					}

			    					// Determine somatic status id and score //
			    					int ssCode = 0;
			    					double somScore = 0;

			    					if(somStatus.equals("Reference"))
			    					{
			    						// Wildtype //
			    						ssCode = 0;
			    						calledReference++;
			    					}
			    					else if(somStatus.equals("Germline"))
			    					{
			    						// Germline //
			    						ssCode = 1;
			    						calledGermline++;
			    						if(somaticP == 0)
			    						{
			    							somScore = 0;
			    						}
			    						else
			    						{
			    							somScore = 0 - (10 * java.lang.Math.log10(somaticP));
			    						}
			    					}
			    					else if(somStatus.equals("Somatic"))
			    					{
			    						// Somatic //
			    						ssCode = 2;
			    						calledSomatic++;
			    						if(somaticP == 0)
			    						{
			    							somScore = 255;
			    						}
			    						else
			    						{
			    							somScore = 0 - (10 * java.lang.Math.log10(somaticP));
			    						}
			    					}
			    					else if(somStatus.equals("LOH"))
			    					{
			    						// LOH //
			    						ssCode = 3;
			    						calledLOH++;
			    						if(somaticP == 0)
			    						{
			    							somScore = 255;
			    						}
			    						else
			    						{
			    							somScore = 0 - (10 * java.lang.Math.log10(somaticP));
			    						}
			    					}
			    					else
			    					{
			    						// Unknown //
			    						calledUnknown++;
			    						ssCode = 5;
			    					}

			    					// Adjust somatic score //
			    					if(somScore > 255)
			    						somScore = 255;

			    					// Print the info field //

			    					compareResult += "\t" + "DP=" + totalDepth;
			    					if(somStatus.equals("Somatic"))
			    						compareResult += ";SOMATIC";
			    					compareResult += ";" + "SS=" + ssCode;
			    					compareResult += ";" + "SSC=" + (int) somScore;
			    					compareResult += ";" + "GPV=" + pvalueFormat.format(germlineP);
			    					compareResult += ";" + "SPV=" + pvalueFormat.format(somaticP);

			    					// Print the format field //

			    					String tumorDP4 = "";
			    					String normalDP4 = "";

					    			if(compareContents.length >= 17)
					    			{
					    				try
					    				{
					    					tumorDP4 = compareContents[13] + "," + compareContents[14] + "," + compareContents[15] + "," + compareContents[16];
					    					normalDP4 = compareContents[17] + "," + compareContents[18] + "," + compareContents[19] + "," + compareContents[20];
					    				}
					    				catch(Exception e)
					    				{
					    					// Exception parsing info from compareResult //
					    					tumorDP4 = "";
					    					normalDP4 = "";
					    				}
					    			}

					    			if(tumorDP4.length() > 0)
					    				compareResult += "\tGT:GQ:DP:RD:AD:FREQ:DP4";
					    			else
					    				compareResult += "\tGT:GQ:DP:RD:AD:FREQ";

			    					// Determine normal genotype //
			    					String normalGt = ".";
			    					String tumorGt = ".";
			    					if(normalCall.equals(refBase))
			    					{
			    						normalGt = "0/0";
			    					}
			    					else if(VarScan.isHeterozygous(normalCall))
			    					{
			    						normalGt = "0/1";
			    					}
			    					else
			    					{
			    						normalGt = "1/1";
			    					}

			    					if(tumorCall.equals(refBase))
			    					{
			    						tumorGt = "0/0";
			    					}
			    					else if(VarScan.isHeterozygous(tumorCall))
			    					{
			    						tumorGt = "0/1";
			    					}
			    					else
			    					{
			    						tumorGt = "1/1";
			    					}

			    					if(tumorDP4.length() > 0)
			    					{
				    					compareResult += "\t" + normalGt + ":.:" + pileupDepthNormal + ":" + normalReads1 + ":" + normalReads2 + ":" + normalFreq + ":" + normalDP4;
				    					compareResult += "\t" + tumorGt + ":.:" + pileupDepthTumor + ":" + tumorReads1 + ":" + tumorReads2 + ":" + tumorFreq + ":" + tumorDP4;
			    					}
			    					else
			    					{
				    					compareResult += "\t" + normalGt + ":.:" + pileupDepthNormal + ":" + normalReads1 + ":" + normalReads2 + ":" + normalFreq;
				    					compareResult += "\t" + tumorGt + ":.:" + pileupDepthTumor + ":" + tumorReads1 + ":" + tumorReads2 + ":" + tumorFreq;
			    					}
			    				}

			    				// Print to master file for validation //

			    				if(params.containsKey("validation"))
			    				{
			    					outValidation.println(chromNormal + "\t" + posNormal + "\t" + compareResult);
			    				}

			    				if(!params.containsKey("validation") && (compareResult.contains("Reference") || compareResult.contains("SS=0")  || compareResult.contains("Filter")))
			    				{
			    					// Don't print reference/indelfilter positions unless doing validation //
			    				}
			    				else if(doStrandFilter && strandednessDiff > 0.10 && (strandedness2 < 0.10 || strandedness2 > 0.90))
			    				{
			    					// If filter is set, ignore variants that are supported largely by one strand //
			    					if(!params.containsKey("output-vcf"))
			    						compareResult = "StrandFilter";
			    				}
			    				else if(allele1.contains("-") || allele1.contains("+") || allele2.contains("-") || allele2.contains("+"))//if(compareResult.contains("INS") || compareResult.contains("DEL"))
			    				{
			    					outIndel.println(chromNormal + "\t" + posNormal + "\t" + compareResult);
			    				}
			    				else
			    				{
				    				outSnp.println(chromNormal + "\t" + posNormal + "\t" + compareResult);
			    				}
			    			}
			    			else
			    			{
//			    				System.err.println("Uncalled" + chromNormal + "\t" + posNormal + "\t" + compareResult);
			    			}

			    			if(compareResult.contains("Reference"))
			    				calledReference++; //stats.put("calledReference", (stats.get("calledReference") + 1));
			    			else if(compareResult.contains("IndelFilter"))
			    				indelFilter++;	//stats.put("indelFilter", (stats.get("indelFilter") + 1));
			    			else if(compareResult.contains("StrandFilter"))
			    				strandFilter++;
			    			else if(compareResult.contains("Germline"))
			    				calledGermline++;	//stats.put("calledGermline", (stats.get("calledGermline") + 1));
			    			else if(compareResult.contains("Somatic"))
			    				calledSomatic++;	//stats.put("calledSomatic", (stats.get("calledSomatic") + 1));
			    			else if(compareResult.contains("LOH"))
			    				calledLOH++;	//stats.put("calledLOH", (stats.get("calledLOH") + 1));
			    			else if(compareResult.contains("Unknown"))
			    				calledUnknown++;	//stats.put("calledUnknown", (stats.get("calledUnknown") + 1));
			    			else if(compareResult.contains("Variant"))
			    				calledVariant++;	//stats.put("calledVariant", (stats.get("calledVariant") + 1));



	    				}

----------------------------------------
		    			{
		    				// Get the alleles to determine type //
		    				String[] compareContents = compareResult.split("\t");
			    			String allele1 = compareContents[0];
			    			String allele2 = compareContents[1];

			    			double strandedness1 = 0.50;
			    			double strandedness2 = 0.50;
			    			double strandednessDiff = 0.00;

			    			if(compareContents.length >= 17)
			    			{
			    				try
			    				{
			    					int tumorReads1plus = Integer.parseInt(compareContents[13]);
			    					int tumorReads1minus = Integer.parseInt(compareContents[14]);
			    					int tumorReads2plus = Integer.parseInt(compareContents[15]);
			    					int tumorReads2minus = Integer.parseInt(compareContents[16]);

			    					if(tumorReads1plus > 0 || tumorReads1minus > 0)
			    					{
			    						strandedness1 = (double) tumorReads1plus / (double) (tumorReads1plus + tumorReads1minus);
			    					}

			    					if(tumorReads2plus > 0 || tumorReads2minus > 0)
			    					{
			    						strandedness2 = (double) tumorReads2plus / (double) (tumorReads2plus + tumorReads2minus);
			    						if(tumorReads1plus > 0 || tumorReads1minus > 0)
			    						{
			    							strandednessDiff = java.lang.Math.abs(strandedness1 - strandedness2);
			    						}
			    					}
			    				}
			    				catch(Exception e)
			    				{
			    					// Exception parsing info from compareResult //
			    				}
			    			}

		    				//stats.put("comparedPositions", (stats.get("comparedPositions") + 1));
			    			comparedPositions++;

		    				if(params.containsKey("verbose") && !compareResult.contains("Reference"))
		    					System.err.println(chromNormal + "\t" + posNormal + "\t" + compareResult);

		    				// If VCF format specified, supply it //

		    				if(params.containsKey("output-vcf"))
		    				{
		    					int normalReads1 = Integer.parseInt(compareContents[2]);
		    					int normalReads2 = Integer.parseInt(compareContents[3]);
		    					String normalFreq = compareContents[4];
		    					String normalCall = compareContents[5];
		    					int tumorReads1 = Integer.parseInt(compareContents[6]);
		    					int tumorReads2 = Integer.parseInt(compareContents[7]);
		    					String tumorFreq = compareContents[8];
		    					String tumorCall = compareContents[9];
		    					String somStatus = compareContents[10];
		    					Double germlineP = Double.parseDouble(compareContents[11]);
		    					Double somaticP = Double.parseDouble(compareContents[12]);

		    					String[] normalContents = lineNormal.split("\t");
		    					//tumorContents = lineTumor.split("\t");
		    					int pileupDepthNormal = Integer.parseInt(normalContents[3]);
		    					int pileupDepthTumor = Integer.parseInt(tumorContents[3]);

		    					int totalDepth = pileupDepthNormal + pileupDepthTumor;

		    					if(allele2.startsWith("+"))
		    					{
		    						// INSERTION //
		    						// Ref = ref base; Var = ref base followed by inserted bases //
		    						String varColumn = allele1 + allele2.replace("+", "");
		    						compareResult = "." + "\t" + allele1 + "\t" + varColumn + "\t" + ".";
		    					}
		    					else if(allele2.startsWith("-"))
		    					{
		    						// DELETION //
		    						// Ref = ref base followed by deleted bases; var = ref base //
		    						String refColumn = allele1 + allele2.replace("-", "");
		    						compareResult = "." + "\t" + refColumn + "\t" + allele1 + "\t" + ".";
		    					}
		    					else
		    					{
			    					compareResult = "." + "\t" + allele1 + "\t" + allele2 + "\t" + ".";
		    					}


		    					// Decide on filter field //
		    					if(params.containsKey("strand-filter") && strandednessDiff > 0.10 && (strandedness2 < 0.10 || strandedness2 > 0.90))
		    					{
		    						compareResult += "\t" + "str10";
		    					}
		    					else if(somStatus.equals("IndelFilter"))
		    					{
		    						compareResult += "\t" + "indelError";
		    					}
		    					else
		    					{
		    						compareResult += "\t" + "PASS";
		    					}

		    					// Determine somatic status id and score //
		    					int ssCode = 0;
		    					double somScore = 0;

		    					if(somStatus.equals("Reference"))
		    					{
		    						// Wildtype //
		    						ssCode = 0;
		    						calledReference++;
		    					}
		    					else if(somStatus.equals("Germline"))
		    					{
		    						// Germline //
		    						ssCode = 1;
		    						calledGermline++;
		    						if(somaticP == 0)
		    						{
		    							somScore = 0;
		    						}
		    						else
		    						{
		    							somScore = 0 - (10 * java.lang.Math.log10(somaticP));
		    						}
		    					}
		    					else if(somStatus.equals("Somatic"))
		    					{
		    						// Somatic //
		    						ssCode = 2;
		    						calledSomatic++;
		    						if(somaticP == 0)
		    						{
		    							somScore = 255;
		    						}
		    						else
		    						{
		    							somScore = 0 - (10 * java.lang.Math.log10(somaticP));
		    						}
		    					}
		    					else if(somStatus.equals("LOH"))
		    					{
		    						// LOH //
		    						ssCode = 3;
		    						calledLOH++;
		    						if(somaticP == 0)
		    						{
		    							somScore = 255;
		    						}
		    						else
		    						{
		    							somScore = 0 - (10 * java.lang.Math.log10(somaticP));
		    						}
		    					}
		    					else
		    					{
		    						// Unknown //
		    						calledUnknown++;
		    						ssCode = 5;
		    					}

		    					// Adjust somatic score //
		    					if(somScore > 255)
		    						somScore = 255;

		    					// Print the info field //

		    					compareResult += "\t" + "DP=" + totalDepth;
		    					if(somStatus.equals("Somatic"))
		    						compareResult += ";SOMATIC";
		    					compareResult += ";" + "SS=" + ssCode;
		    					compareResult += ";" + "SSC=" + (int) somScore;
		    					compareResult += ";" + "GPV=" + pvalueFormat.format(germlineP);
		    					compareResult += ";" + "SPV=" + pvalueFormat.format(somaticP);

		    					// Print the format field //

		    					String tumorDP4 = "";
		    					String normalDP4 = "";

				    			if(compareContents.length >= 17)
				    			{
				    				try
				    				{
				    					tumorDP4 = compareContents[13] + "," + compareContents[14] + "," + compareContents[15] + "," + compareContents[16];
				    					normalDP4 = compareContents[17] + "," + compareContents[18] + "," + compareContents[19] + "," + compareContents[20];
				    				}
				    				catch(Exception e)
				    				{
				    					// Exception parsing info from compareResult //
				    					tumorDP4 = "";
				    					normalDP4 = "";
				    				}
				    			}

				    			if(tumorDP4.length() > 0)
				    				compareResult += "\tGT:GQ:DP:RD:AD:FREQ:DP4";
				    			else
				    				compareResult += "\tGT:GQ:DP:RD:AD:FREQ";

		    					// Determine normal genotype //
		    					String normalGt = ".";
		    					String tumorGt = ".";
		    					if(normalCall.equals(refBase))
		    					{
		    						normalGt = "0/0";
		    					}
		    					else if(VarScan.isHeterozygous(normalCall))
		    					{
		    						normalGt = "0/1";
		    					}
		    					else
		    					{
		    						normalGt = "1/1";
		    					}

		    					if(tumorCall.equals(refBase))
		    					{
		    						tumorGt = "0/0";
		    					}
		    					else if(VarScan.isHeterozygous(tumorCall))
		    					{
		    						tumorGt = "0/1";
		    					}
		    					else
		    					{
		    						tumorGt = "1/1";
		    					}

		    					if(tumorDP4.length() > 0)
		    					{
			    					compareResult += "\t" + normalGt + ":.:" + pileupDepthNormal + ":" + normalReads1 + ":" + normalReads2 + ":" + normalFreq + ":" + normalDP4;
			    					compareResult += "\t" + tumorGt + ":.:" + pileupDepthTumor + ":" + tumorReads1 + ":" + tumorReads2 + ":" + tumorFreq + ":" + tumorDP4;
		    					}
		    					else
		    					{
			    					compareResult += "\t" + normalGt + ":.:" + pileupDepthNormal + ":" + normalReads1 + ":" + normalReads2 + ":" + normalFreq;
			    					compareResult += "\t" + tumorGt + ":.:" + pileupDepthTumor + ":" + tumorReads1 + ":" + tumorReads2 + ":" + tumorFreq;
		    					}
		    				}
		    				// Print to master file for validation //

		    				if(params.containsKey("validation"))
		    				{
		    					outValidation.println(chromNormal + "\t" + posNormal + "\t" + compareResult);
		    				}

		    				if(!params.containsKey("validation") && (compareResult.contains("Reference") || compareResult.contains("SS=0") || compareResult.contains("Filter")))
		    				{
		    					// Don't print reference/indelfilter positions unless doing validation //
		    				}
		    				else if(params.containsKey("strand-filter") && strandednessDiff > 0.10 && (strandedness2 < 0.10 || strandedness2 > 0.90))
		    				{
		    					// If filter is set, ignore variants that are supported largely by one strand //
		    					compareResult = "StrandFilter";
		    				}
		    				else if(allele1.contains("-") || allele1.contains("+") || allele2.contains("-") || allele2.contains("+"))//if(compareResult.contains("INS") || compareResult.contains("DEL"))
		    				{
		    					outIndel.println(chromNormal + "\t" + posNormal + "\t" + compareResult);
		    				}
		    				else
		    				{
			    				outSnp.println(chromNormal + "\t" + posNormal + "\t" + compareResult);
		    				}
		    			}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
96
22834656
net/sf/varscan/Somatic.java 337 666
net/sf/varscan/Somatic.java 1097 1361
----------------------------------------
	    			{
	    				String[] lineContents = line.split("\t", -1);

	    				// Verify expected pileup format //

	    				if(lineContents.length > 5 && lineContents[0].length() > 0 && lineContents[1].length() > 0 && lineContents[2].length() > 0 && lineContents[3].length() > 0)
	    				{
	    					sharedPositions++;

	    					// Parse common fields from line //
	    					String refName = lineContents[0];
	    					int position = Integer.parseInt(lineContents[1]);
	    					refBase = lineContents[2].toUpperCase();

	    					chromNormal = refName;
	    					chromTumor = refName;
	    					posNormal = position;
	    					posTumor = position;

	    					// Parse normal, which should be first sample //
	    					int normalOffset = 3;
	    					int pileupDepthNormal = Integer.parseInt(lineContents[normalOffset]);
		    	        	String normalBases = lineContents[normalOffset + 1];
		    	        	String normalQualities = lineContents[normalOffset + 2];

	    					// Parse tumor, which should be second sample //
	    					int tumorOffset = 6;
	    					int pileupDepthTumor = Integer.parseInt(lineContents[tumorOffset]);
		    	        	String tumorBases = lineContents[tumorOffset + 1];
		    	        	String tumorQualities = lineContents[tumorOffset + 2];

	    					lineNormal = refName + "\t" + position + "\t" + refBase + "\t" + pileupDepthNormal + "\t" + normalBases + "\t" + normalQualities;
	    					lineTumor = refName + "\t" + position + "\t" + refBase + "\t" + pileupDepthTumor + "\t" + tumorBases + "\t" + tumorQualities;

	    					String compareResult = comparePositions(lineNormal, lineTumor, minCoverage, minReads2, minVarFreq, minAvgQual, pValueThreshold, somaticPvalue, minFreqForHom, normalPurity, tumorPurity);

			    			if(compareResult.length() > 0)
			    			{
			    				// Get the alleles to determine type //
			    				String[] compareContents = compareResult.split("\t");
				    			String allele1 = compareContents[0];
				    			String allele2 = compareContents[1];

				    			double strandedness1 = 0.50;
				    			double strandedness2 = 0.50;
				    			double strandednessDiff = 0.00;

				    			if(compareContents.length >= 17)
				    			{
				    				try
				    				{
				    					int tumorReads1plus = Integer.parseInt(compareContents[13]);
				    					int tumorReads1minus = Integer.parseInt(compareContents[14]);
				    					int tumorReads2plus = Integer.parseInt(compareContents[15]);
				    					int tumorReads2minus = Integer.parseInt(compareContents[16]);

				    					if(tumorReads1plus > 0 || tumorReads1minus > 0)
				    					{
				    						strandedness1 = (double) tumorReads1plus / (double) (tumorReads1plus + tumorReads1minus);
				    					}

				    					if(tumorReads2plus > 0 || tumorReads2minus > 0)
				    					{
				    						strandedness2 = (double) tumorReads2plus / (double) (tumorReads2plus + tumorReads2minus);
				    						if(tumorReads1plus > 0 || tumorReads1minus > 0)
				    						{
				    							strandednessDiff = java.lang.Math.abs(strandedness1 - strandedness2);
				    						}
				    					}
				    				}
				    				catch(Exception e)
				    				{
				    					// Exception parsing info from compareResult //
				    				}
				    			}

			    				//stats.put("comparedPositions", (stats.get("comparedPositions") + 1));
				    			comparedPositions++;

			    				if(params.containsKey("verbose") && !compareResult.contains("Reference"))
			    					System.err.println(chromNormal + "\t" + posNormal + "\t" + compareResult);

			    				// If VCF format specified, supply it //

			    				if(params.containsKey("output-vcf"))
			    				{
			    					int normalReads1 = Integer.parseInt(compareContents[2]);
			    					int normalReads2 = Integer.parseInt(compareContents[3]);
			    					String normalFreq = compareContents[4];
			    					String normalCall = compareContents[5];
			    					int tumorReads1 = Integer.parseInt(compareContents[6]);
			    					int tumorReads2 = Integer.parseInt(compareContents[7]);
			    					String tumorFreq = compareContents[8];
			    					String tumorCall = compareContents[9];
			    					String somStatus = compareContents[10];
			    					Double germlineP = Double.parseDouble(compareContents[11]);
			    					Double somaticP = Double.parseDouble(compareContents[12]);

			    					int totalDepth = pileupDepthNormal + pileupDepthTumor;

			    					if(allele2.startsWith("+"))
			    					{
			    						// INSERTION //
			    						// Ref = ref base; Var = ref base followed by inserted bases //
			    						String varColumn = allele1 + allele2.replace("+", "");
			    						compareResult = "." + "\t" + allele1 + "\t" + varColumn + "\t" + ".";
			    					}
			    					else if(allele2.startsWith("-"))
			    					{
			    						// DELETION //
			    						// Ref = ref base followed by deleted bases; var = ref base //
			    						String refColumn = allele1 + allele2.replace("-", "");
			    						compareResult = "." + "\t" + refColumn + "\t" + allele1 + "\t" + ".";
			    					}
			    					else
			    					{
				    					compareResult = "." + "\t" + allele1 + "\t" + allele2 + "\t" + ".";
			    					}


			    					// Decide on filter field //
			    					if(doStrandFilter && strandednessDiff > 0.10 && (strandedness2 < 0.10 || strandedness2 > 0.90))
			    					{
			    						compareResult += "\t" + "str10";
			    					}
			    					else if(somStatus.equals("IndelFilter"))
			    					{
			    						compareResult += "\t" + "indelError";
			    					}
			    					else
			    					{
			    						compareResult += "\t" + "PASS";
			    					}

			    					// Determine somatic status id and score //
			    					int ssCode = 0;
			    					double somScore = 0;

			    					if(somStatus.equals("Reference"))
			    					{
			    						// Wildtype //
			    						ssCode = 0;
			    						calledReference++;
			    					}
			    					else if(somStatus.equals("Germline"))
			    					{
			    						// Germline //
			    						ssCode = 1;
			    						calledGermline++;
			    						if(somaticP == 0)
			    						{
			    							somScore = 0;
			    						}
			    						else
			    						{
			    							somScore = 0 - (10 * java.lang.Math.log10(somaticP));
			    						}
			    					}
			    					else if(somStatus.equals("Somatic"))
			    					{
			    						// Somatic //
			    						ssCode = 2;
			    						calledSomatic++;
			    						if(somaticP == 0)
			    						{
			    							somScore = 255;
			    						}
			    						else
			    						{
			    							somScore = 0 - (10 * java.lang.Math.log10(somaticP));
			    						}
			    					}
			    					else if(somStatus.equals("LOH"))
			    					{
			    						// LOH //
			    						ssCode = 3;
			    						calledLOH++;
			    						if(somaticP == 0)
			    						{
			    							somScore = 255;
			    						}
			    						else
			    						{
			    							somScore = 0 - (10 * java.lang.Math.log10(somaticP));
			    						}
			    					}
			    					else
			    					{
			    						// Unknown //
			    						calledUnknown++;
			    						ssCode = 5;
			    					}

			    					// Adjust somatic score //
			    					if(somScore > 255)
			    						somScore = 255;

			    					// Print the info field //

			    					compareResult += "\t" + "DP=" + totalDepth;
			    					if(somStatus.equals("Somatic"))
			    						compareResult += ";SOMATIC";
			    					compareResult += ";" + "SS=" + ssCode;
			    					compareResult += ";" + "SSC=" + (int) somScore;
			    					compareResult += ";" + "GPV=" + pvalueFormat.format(germlineP);
			    					compareResult += ";" + "SPV=" + pvalueFormat.format(somaticP);

			    					// Print the format field //

			    					String tumorDP4 = "";
			    					String normalDP4 = "";

					    			if(compareContents.length >= 17)
					    			{
					    				try
					    				{
					    					tumorDP4 = compareContents[13] + "," + compareContents[14] + "," + compareContents[15] + "," + compareContents[16];
					    					normalDP4 = compareContents[17] + "," + compareContents[18] + "," + compareContents[19] + "," + compareContents[20];
					    				}
					    				catch(Exception e)
					    				{
					    					// Exception parsing info from compareResult //
					    					tumorDP4 = "";
					    					normalDP4 = "";
					    				}
					    			}

					    			if(tumorDP4.length() > 0)
					    				compareResult += "\tGT:GQ:DP:RD:AD:FREQ:DP4";
					    			else
					    				compareResult += "\tGT:GQ:DP:RD:AD:FREQ";

			    					// Determine normal genotype //
			    					String normalGt = ".";
			    					String tumorGt = ".";
			    					if(normalCall.equals(refBase))
			    					{
			    						normalGt = "0/0";
			    					}
			    					else if(VarScan.isHeterozygous(normalCall))
			    					{
			    						normalGt = "0/1";
			    					}
			    					else
			    					{
			    						normalGt = "1/1";
			    					}

			    					if(tumorCall.equals(refBase))
			    					{
			    						tumorGt = "0/0";
			    					}
			    					else if(VarScan.isHeterozygous(tumorCall))
			    					{
			    						tumorGt = "0/1";
			    					}
			    					else
			    					{
			    						tumorGt = "1/1";
			    					}

			    					if(tumorDP4.length() > 0)
			    					{
				    					compareResult += "\t" + normalGt + ":.:" + pileupDepthNormal + ":" + normalReads1 + ":" + normalReads2 + ":" + normalFreq + ":" + normalDP4;
				    					compareResult += "\t" + tumorGt + ":.:" + pileupDepthTumor + ":" + tumorReads1 + ":" + tumorReads2 + ":" + tumorFreq + ":" + tumorDP4;
			    					}
			    					else
			    					{
				    					compareResult += "\t" + normalGt + ":.:" + pileupDepthNormal + ":" + normalReads1 + ":" + normalReads2 + ":" + normalFreq;
				    					compareResult += "\t" + tumorGt + ":.:" + pileupDepthTumor + ":" + tumorReads1 + ":" + tumorReads2 + ":" + tumorFreq;
			    					}
			    				}

			    				// Print to master file for validation //

			    				if(params.containsKey("validation"))
			    				{
			    					outValidation.println(chromNormal + "\t" + posNormal + "\t" + compareResult);
			    				}

			    				if(!params.containsKey("validation") && (compareResult.contains("Reference") || compareResult.contains("SS=0")  || compareResult.contains("Filter")))
			    				{
			    					// Don't print reference/indelfilter positions unless doing validation //
			    				}
			    				else if(doStrandFilter && strandednessDiff > 0.10 && (strandedness2 < 0.10 || strandedness2 > 0.90))
			    				{
			    					// If filter is set, ignore variants that are supported largely by one strand //
			    					if(!params.containsKey("output-vcf"))
			    						compareResult = "StrandFilter";
			    				}
			    				else if(allele1.contains("-") || allele1.contains("+") || allele2.contains("-") || allele2.contains("+"))//if(compareResult.contains("INS") || compareResult.contains("DEL"))
			    				{
			    					outIndel.println(chromNormal + "\t" + posNormal + "\t" + compareResult);
			    				}
			    				else
			    				{
				    				outSnp.println(chromNormal + "\t" + posNormal + "\t" + compareResult);
			    				}
			    			}
			    			else
			    			{
//			    				System.err.println("Uncalled" + chromNormal + "\t" + posNormal + "\t" + compareResult);
			    			}

			    			if(compareResult.contains("Reference"))
			    				calledReference++; //stats.put("calledReference", (stats.get("calledReference") + 1));
			    			else if(compareResult.contains("IndelFilter"))
			    				indelFilter++;	//stats.put("indelFilter", (stats.get("indelFilter") + 1));
			    			else if(compareResult.contains("StrandFilter"))
			    				strandFilter++;
			    			else if(compareResult.contains("Germline"))
			    				calledGermline++;	//stats.put("calledGermline", (stats.get("calledGermline") + 1));
			    			else if(compareResult.contains("Somatic"))
			    				calledSomatic++;	//stats.put("calledSomatic", (stats.get("calledSomatic") + 1));
			    			else if(compareResult.contains("LOH"))
			    				calledLOH++;	//stats.put("calledLOH", (stats.get("calledLOH") + 1));
			    			else if(compareResult.contains("Unknown"))
			    				calledUnknown++;	//stats.put("calledUnknown", (stats.get("calledUnknown") + 1));
			    			else if(compareResult.contains("Variant"))
			    				calledVariant++;	//stats.put("calledVariant", (stats.get("calledVariant") + 1));



	    				}
	    				else
	    				{
	    					System.err.println("Error: Invalid format or not enough samples in mpileup: " + line + "\n");
	    					return;
	    				}
	    			}

----------------------------------------
		    			{
		    				// Get the alleles to determine type //
		    				String[] compareContents = compareResult.split("\t");
			    			String allele1 = compareContents[0];
			    			String allele2 = compareContents[1];

			    			double strandedness1 = 0.50;
			    			double strandedness2 = 0.50;
			    			double strandednessDiff = 0.00;

			    			if(compareContents.length >= 17)
			    			{
			    				try
			    				{
			    					int tumorReads1plus = Integer.parseInt(compareContents[13]);
			    					int tumorReads1minus = Integer.parseInt(compareContents[14]);
			    					int tumorReads2plus = Integer.parseInt(compareContents[15]);
			    					int tumorReads2minus = Integer.parseInt(compareContents[16]);

			    					if(tumorReads1plus > 0 || tumorReads1minus > 0)
			    					{
			    						strandedness1 = (double) tumorReads1plus / (double) (tumorReads1plus + tumorReads1minus);
			    					}

			    					if(tumorReads2plus > 0 || tumorReads2minus > 0)
			    					{
			    						strandedness2 = (double) tumorReads2plus / (double) (tumorReads2plus + tumorReads2minus);
			    						if(tumorReads1plus > 0 || tumorReads1minus > 0)
			    						{
			    							strandednessDiff = java.lang.Math.abs(strandedness1 - strandedness2);
			    						}
			    					}
			    				}
			    				catch(Exception e)
			    				{
			    					// Exception parsing info from compareResult //
			    				}
			    			}

		    				//stats.put("comparedPositions", (stats.get("comparedPositions") + 1));
			    			comparedPositions++;

		    				if(params.containsKey("verbose") && !compareResult.contains("Reference"))
		    					System.err.println(chromNormal + "\t" + posNormal + "\t" + compareResult);

		    				// If VCF format specified, supply it //

		    				if(params.containsKey("output-vcf"))
		    				{
		    					int normalReads1 = Integer.parseInt(compareContents[2]);
		    					int normalReads2 = Integer.parseInt(compareContents[3]);
		    					String normalFreq = compareContents[4];
		    					String normalCall = compareContents[5];
		    					int tumorReads1 = Integer.parseInt(compareContents[6]);
		    					int tumorReads2 = Integer.parseInt(compareContents[7]);
		    					String tumorFreq = compareContents[8];
		    					String tumorCall = compareContents[9];
		    					String somStatus = compareContents[10];
		    					Double germlineP = Double.parseDouble(compareContents[11]);
		    					Double somaticP = Double.parseDouble(compareContents[12]);

		    					String[] normalContents = lineNormal.split("\t");
		    					//tumorContents = lineTumor.split("\t");
		    					int pileupDepthNormal = Integer.parseInt(normalContents[3]);
		    					int pileupDepthTumor = Integer.parseInt(tumorContents[3]);

		    					int totalDepth = pileupDepthNormal + pileupDepthTumor;

		    					if(allele2.startsWith("+"))
		    					{
		    						// INSERTION //
		    						// Ref = ref base; Var = ref base followed by inserted bases //
		    						String varColumn = allele1 + allele2.replace("+", "");
		    						compareResult = "." + "\t" + allele1 + "\t" + varColumn + "\t" + ".";
		    					}
		    					else if(allele2.startsWith("-"))
		    					{
		    						// DELETION //
		    						// Ref = ref base followed by deleted bases; var = ref base //
		    						String refColumn = allele1 + allele2.replace("-", "");
		    						compareResult = "." + "\t" + refColumn + "\t" + allele1 + "\t" + ".";
		    					}
		    					else
		    					{
			    					compareResult = "." + "\t" + allele1 + "\t" + allele2 + "\t" + ".";
		    					}


		    					// Decide on filter field //
		    					if(params.containsKey("strand-filter") && strandednessDiff > 0.10 && (strandedness2 < 0.10 || strandedness2 > 0.90))
		    					{
		    						compareResult += "\t" + "str10";
		    					}
		    					else if(somStatus.equals("IndelFilter"))
		    					{
		    						compareResult += "\t" + "indelError";
		    					}
		    					else
		    					{
		    						compareResult += "\t" + "PASS";
		    					}

		    					// Determine somatic status id and score //
		    					int ssCode = 0;
		    					double somScore = 0;

		    					if(somStatus.equals("Reference"))
		    					{
		    						// Wildtype //
		    						ssCode = 0;
		    						calledReference++;
		    					}
		    					else if(somStatus.equals("Germline"))
		    					{
		    						// Germline //
		    						ssCode = 1;
		    						calledGermline++;
		    						if(somaticP == 0)
		    						{
		    							somScore = 0;
		    						}
		    						else
		    						{
		    							somScore = 0 - (10 * java.lang.Math.log10(somaticP));
		    						}
		    					}
		    					else if(somStatus.equals("Somatic"))
		    					{
		    						// Somatic //
		    						ssCode = 2;
		    						calledSomatic++;
		    						if(somaticP == 0)
		    						{
		    							somScore = 255;
		    						}
		    						else
		    						{
		    							somScore = 0 - (10 * java.lang.Math.log10(somaticP));
		    						}
		    					}
		    					else if(somStatus.equals("LOH"))
		    					{
		    						// LOH //
		    						ssCode = 3;
		    						calledLOH++;
		    						if(somaticP == 0)
		    						{
		    							somScore = 255;
		    						}
		    						else
		    						{
		    							somScore = 0 - (10 * java.lang.Math.log10(somaticP));
		    						}
		    					}
		    					else
		    					{
		    						// Unknown //
		    						calledUnknown++;
		    						ssCode = 5;
		    					}

		    					// Adjust somatic score //
		    					if(somScore > 255)
		    						somScore = 255;

		    					// Print the info field //

		    					compareResult += "\t" + "DP=" + totalDepth;
		    					if(somStatus.equals("Somatic"))
		    						compareResult += ";SOMATIC";
		    					compareResult += ";" + "SS=" + ssCode;
		    					compareResult += ";" + "SSC=" + (int) somScore;
		    					compareResult += ";" + "GPV=" + pvalueFormat.format(germlineP);
		    					compareResult += ";" + "SPV=" + pvalueFormat.format(somaticP);

		    					// Print the format field //

		    					String tumorDP4 = "";
		    					String normalDP4 = "";

				    			if(compareContents.length >= 17)
				    			{
				    				try
				    				{
				    					tumorDP4 = compareContents[13] + "," + compareContents[14] + "," + compareContents[15] + "," + compareContents[16];
				    					normalDP4 = compareContents[17] + "," + compareContents[18] + "," + compareContents[19] + "," + compareContents[20];
				    				}
				    				catch(Exception e)
				    				{
				    					// Exception parsing info from compareResult //
				    					tumorDP4 = "";
				    					normalDP4 = "";
				    				}
				    			}

				    			if(tumorDP4.length() > 0)
				    				compareResult += "\tGT:GQ:DP:RD:AD:FREQ:DP4";
				    			else
				    				compareResult += "\tGT:GQ:DP:RD:AD:FREQ";

		    					// Determine normal genotype //
		    					String normalGt = ".";
		    					String tumorGt = ".";
		    					if(normalCall.equals(refBase))
		    					{
		    						normalGt = "0/0";
		    					}
		    					else if(VarScan.isHeterozygous(normalCall))
		    					{
		    						normalGt = "0/1";
		    					}
		    					else
		    					{
		    						normalGt = "1/1";
		    					}

		    					if(tumorCall.equals(refBase))
		    					{
		    						tumorGt = "0/0";
		    					}
		    					else if(VarScan.isHeterozygous(tumorCall))
		    					{
		    						tumorGt = "0/1";
		    					}
		    					else
		    					{
		    						tumorGt = "1/1";
		    					}

		    					if(tumorDP4.length() > 0)
		    					{
			    					compareResult += "\t" + normalGt + ":.:" + pileupDepthNormal + ":" + normalReads1 + ":" + normalReads2 + ":" + normalFreq + ":" + normalDP4;
			    					compareResult += "\t" + tumorGt + ":.:" + pileupDepthTumor + ":" + tumorReads1 + ":" + tumorReads2 + ":" + tumorFreq + ":" + tumorDP4;
		    					}
		    					else
		    					{
			    					compareResult += "\t" + normalGt + ":.:" + pileupDepthNormal + ":" + normalReads1 + ":" + normalReads2 + ":" + normalFreq;
			    					compareResult += "\t" + tumorGt + ":.:" + pileupDepthTumor + ":" + tumorReads1 + ":" + tumorReads2 + ":" + tumorFreq;
		    					}
		    				}
		    				// Print to master file for validation //

		    				if(params.containsKey("validation"))
		    				{
		    					outValidation.println(chromNormal + "\t" + posNormal + "\t" + compareResult);
		    				}

		    				if(!params.containsKey("validation") && (compareResult.contains("Reference") || compareResult.contains("SS=0") || compareResult.contains("Filter")))
		    				{
		    					// Don't print reference/indelfilter positions unless doing validation //
		    				}
		    				else if(params.containsKey("strand-filter") && strandednessDiff > 0.10 && (strandedness2 < 0.10 || strandedness2 > 0.90))
		    				{
		    					// If filter is set, ignore variants that are supported largely by one strand //
		    					compareResult = "StrandFilter";
		    				}
		    				else if(allele1.contains("-") || allele1.contains("+") || allele2.contains("-") || allele2.contains("+"))//if(compareResult.contains("INS") || compareResult.contains("DEL"))
		    				{
		    					outIndel.println(chromNormal + "\t" + posNormal + "\t" + compareResult);
		    				}
		    				else
		    				{
			    				outSnp.println(chromNormal + "\t" + posNormal + "\t" + compareResult);
		    				}
		    			}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
96
22834665
net/sf/varscan/VarScan.java 718 728
net/sf/varscan/Trio.java 497 508
----------------------------------------
					{
						// Plus strand //
						if(readCountsPlus.containsKey(readBase))
						{
							readCountsPlus.put(readBase, (readCountsPlus.get(readBase) + 1));
						}
						else
						{
							readCountsPlus.put(readBase, 1);
						}
					}

----------------------------------------
			    	        				{
			    	        					String change = "initially " + trioStatus + " were re-called " + trioCallContents[3];
					    						if(!stats.containsKey(change))
					    						{
//					    							System.err.println("CHANGED FROM " + trioStatus + "\t" + trioCall);
					    							stats.put(change, 1);
					    						}
					    						else
					    						{
					    							stats.put(change, (stats.get(change) + 1));
					    						}
			    	        				}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
96
22834666
net/sf/varscan/VarScan.java 868 878
net/sf/varscan/Trio.java 497 508
----------------------------------------
				{
					// Plus strand //
					if(readCountsPlus.containsKey(indelKey))
					{
						readCountsPlus.put(indelKey, (readCountsPlus.get(indelKey) + 1));
					}
					else
					{
						readCountsPlus.put(indelKey, 1);
					}
				}

----------------------------------------
			    	        				{
			    	        					String change = "initially " + trioStatus + " were re-called " + trioCallContents[3];
					    						if(!stats.containsKey(change))
					    						{
//					    							System.err.println("CHANGED FROM " + trioStatus + "\t" + trioCall);
					    							stats.put(change, 1);
					    						}
					    						else
					    						{
					    							stats.put(change, (stats.get(change) + 1));
					    						}
			    	        				}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
96
22834667
net/sf/varscan/VarScan.java 880 890
net/sf/varscan/Trio.java 497 508
----------------------------------------
				{
					// Minus Strand //
					if(readCountsMinus.containsKey(indelKey))
					{
						readCountsMinus.put(indelKey, (readCountsMinus.get(indelKey) + 1));
					}
					else
					{
						readCountsMinus.put(indelKey, 1);
					}
				}

----------------------------------------
			    	        				{
			    	        					String change = "initially " + trioStatus + " were re-called " + trioCallContents[3];
					    						if(!stats.containsKey(change))
					    						{
//					    							System.err.println("CHANGED FROM " + trioStatus + "\t" + trioCall);
					    							stats.put(change, 1);
					    						}
					    						else
					    						{
					    							stats.put(change, (stats.get(change) + 1));
					    						}
			    	        				}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
96
22834664
net/sf/varscan/VarScan.java 730 740
net/sf/varscan/Trio.java 497 508
----------------------------------------
					{
						// Minus Strand //
						if(readCountsMinus.containsKey(readBase))
						{
							readCountsMinus.put(readBase, (readCountsMinus.get(readBase) + 1));
						}
						else
						{
							readCountsMinus.put(readBase, 1);
						}
					}

----------------------------------------
			    	        				{
			    	        					String change = "initially " + trioStatus + " were re-called " + trioCallContents[3];
					    						if(!stats.containsKey(change))
					    						{
//					    							System.err.println("CHANGED FROM " + trioStatus + "\t" + trioCall);
					    							stats.put(change, 1);
					    						}
					    						else
					    						{
					    							stats.put(change, (stats.get(change) + 1));
					    						}
			    	        				}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
96
22834670
net/sf/varscan/ReadCounts.java 353 411
net/sf/varscan/Comparison.java 239 300
----------------------------------------
	{
		HashMap<String, String> variants = new HashMap<String, String>();

		try
		{
			BufferedReader infile = new BufferedReader(new FileReader(fileName));

			String line = "";
			int lineCounter = 0;

	    	while ((line = infile.readLine()) != null)
	    	{
	    		lineCounter++;

	    		String[] lineContents = line.split("\t");
	    		if(lineContents.length >= 2)
	    		{
	    			// Try to parse chrom and position //
	    			try
	    			{
	    				String refName = lineContents[0];
	    				int position = Integer.parseInt(lineContents[1]);

	    				String allele1 = "";
	    				String allele2 = "";

	    				try{
	    					allele1 = lineContents[2];
	    					allele2 = lineContents[3];
	    				}
	    				catch(Exception e)
	    				{
	    					// Don't load variant positions //
	    				}

	    				String positionKey = refName + "\t" + position;
	    				variants.put(positionKey, allele1 + "\t" + allele2);
	    			}
	    			catch(Exception e)
	    			{
	    				if(lineCounter > 1)
	    					System.err.println("Warning: Unable to parse chrom/position from " + line);
	    			}


	    		}
	    	}

	    	infile.close();
		}
		catch(Exception e)
		{
			System.err.println("ERROR: File Parsing Exception: " + e.getLocalizedMessage());
			e.printStackTrace(System.err);
		}


		return(variants);
	}

----------------------------------------
	{
		HashMap<String, BitSet> positionsByChrom = new HashMap<String, BitSet>();

		try
		{
			BufferedReader infile = new BufferedReader(new FileReader(fileName));

			String line = "";
			int lineCounter = 0;

	    	while ((line = infile.readLine()) != null)
	    	{
	    		lineCounter++;

	    		String[] lineContents = line.split("\t");
	    		if(lineContents.length >= 2)
	    		{
	    			// Try to parse chrom and position //
	    			try
	    			{
	    				String refName = lineContents[0];
	    				int position = Integer.parseInt(lineContents[1]);

	    				// Get or create BitSet //
	    				BitSet refPositions;

	    				if(positionsByChrom.containsKey(refName))
	    				{
	    					refPositions = positionsByChrom.get(refName);
	    				}
	    				else
	    				{
	    					refPositions = new BitSet(position + 1);
	    				}

	    				// Set the position to true //
	    				refPositions.set(position, true);

	    				// Return it to the hash //
	    				positionsByChrom.put(refName, refPositions);
	    			}
	    			catch(Exception e)
	    			{
	    				if(lineCounter > 1)
	    					System.err.println("Warning: Unable to parse chrom/position from " + line);
	    			}


	    		}
	    	}

	    	infile.close();
		}
		catch(Exception e)
		{
			System.err.println("ERROR: File Parsing Exception: " + e.getLocalizedMessage());
			e.printStackTrace(System.err);
		}


		return(positionsByChrom);
	}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
96
28918695
net/sf/varscan/Coverage.java 341 408
net/sf/varscan/Comparison.java 243 291
----------------------------------------
	    	{
	    		lineCounter++;

	    		String[] lineContents = line.split("\t");
	    		if(lineContents.length >= 2)
	    		{
	    			// Try to parse chrom and position //
	    			try
	    			{
	    				String refName = lineContents[0];

	    				// Get or create BitSet for this refName //
	    				BitSet refPositions;

	    				if(positionsByChrom.containsKey(refName))
	    				{
	    					refPositions = positionsByChrom.get(refName);
	    				}
	    				else
	    				{
	    					refPositions = new BitSet();
	    				}

	    				// Mark position or regions, depending on what was provided //
	    				int chrStart = 0;
	    				int chrStop = 0;

	    				if(fileType.equals("positions") && lineContents.length > 1)
	    				{
		    				// Set the position to true //
		    				int position = Integer.parseInt(lineContents[1]);
		    				chrStart = position - marginSize;
		    				chrStop = position + marginSize;
	    				}
	    				else if(fileType.equals("regions") && lineContents.length > 2)
	    				{
	    					chrStart = Integer.parseInt(lineContents[1]) - marginSize;
	    					chrStop = Integer.parseInt(lineContents[2]) + marginSize;
	    				}

    					// Check that it won't be an infinite loop//
    					if(chrStart <= chrStop)
    					{
    						numRegions++;

	    					// Mark every position //
	    					for(int position = chrStart; position <= chrStop; position++)
	    					{
	    						if(!refPositions.get(position))
	    						{
	    							numBases++;
	    							refPositions.set(position, true);
	    						}
	    					}
    					}

	    				// Return it to the hash //
	    				positionsByChrom.put(refName, refPositions);
	    			}
	    			catch(Exception e)
	    			{
	    				if(lineCounter > 1)
	    					System.err.println("Warning: Unable to parse chrom/position from " + line);
	    			}


	    		}
	    	}

----------------------------------------
		{
			BufferedReader infile = new BufferedReader(new FileReader(fileName));

			String line = "";
			int lineCounter = 0;

	    	while ((line = infile.readLine()) != null)
	    	{
	    		lineCounter++;

	    		String[] lineContents = line.split("\t");
	    		if(lineContents.length >= 2)
	    		{
	    			// Try to parse chrom and position //
	    			try
	    			{
	    				String refName = lineContents[0];
	    				int position = Integer.parseInt(lineContents[1]);

	    				// Get or create BitSet //
	    				BitSet refPositions;

	    				if(positionsByChrom.containsKey(refName))
	    				{
	    					refPositions = positionsByChrom.get(refName);
	    				}
	    				else
	    				{
	    					refPositions = new BitSet(position + 1);
	    				}

	    				// Set the position to true //
	    				refPositions.set(position, true);

	    				// Return it to the hash //
	    				positionsByChrom.put(refName, refPositions);
	    			}
	    			catch(Exception e)
	    			{
	    				if(lineCounter > 1)
	    					System.err.println("Warning: Unable to parse chrom/position from " + line);
	    			}


	    		}
	    	}

	    	infile.close();
		}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
96
22834671
net/sf/varscan/ReadCounts.java 357 402
net/sf/varscan/Comparison.java 243 291
----------------------------------------
		{
			BufferedReader infile = new BufferedReader(new FileReader(fileName));

			String line = "";
			int lineCounter = 0;

	    	while ((line = infile.readLine()) != null)
	    	{
	    		lineCounter++;

	    		String[] lineContents = line.split("\t");
	    		if(lineContents.length >= 2)
	    		{
	    			// Try to parse chrom and position //
	    			try
	    			{
	    				String refName = lineContents[0];
	    				int position = Integer.parseInt(lineContents[1]);

	    				String allele1 = "";
	    				String allele2 = "";

	    				try{
	    					allele1 = lineContents[2];
	    					allele2 = lineContents[3];
	    				}
	    				catch(Exception e)
	    				{
	    					// Don't load variant positions //
	    				}

	    				String positionKey = refName + "\t" + position;
	    				variants.put(positionKey, allele1 + "\t" + allele2);
	    			}
	    			catch(Exception e)
	    			{
	    				if(lineCounter > 1)
	    					System.err.println("Warning: Unable to parse chrom/position from " + line);
	    			}


	    		}
	    	}

	    	infile.close();
		}

----------------------------------------
		{
			BufferedReader infile = new BufferedReader(new FileReader(fileName));

			String line = "";
			int lineCounter = 0;

	    	while ((line = infile.readLine()) != null)
	    	{
	    		lineCounter++;

	    		String[] lineContents = line.split("\t");
	    		if(lineContents.length >= 2)
	    		{
	    			// Try to parse chrom and position //
	    			try
	    			{
	    				String refName = lineContents[0];
	    				int position = Integer.parseInt(lineContents[1]);

	    				// Get or create BitSet //
	    				BitSet refPositions;

	    				if(positionsByChrom.containsKey(refName))
	    				{
	    					refPositions = positionsByChrom.get(refName);
	    				}
	    				else
	    				{
	    					refPositions = new BitSet(position + 1);
	    				}

	    				// Set the position to true //
	    				refPositions.set(position, true);

	    				// Return it to the hash //
	    				positionsByChrom.put(refName, refPositions);
	    			}
	    			catch(Exception e)
	    			{
	    				if(lineCounter > 1)
	    					System.err.println("Warning: Unable to parse chrom/position from " + line);
	    			}


	    		}
	    	}

	    	infile.close();
		}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
96
22834672
net/sf/varscan/Somatic.java 1481 1489
net/sf/varscan/Copynumber.java 1060 1068
----------------------------------------
	{
		String[] testArray = {chrom1, chrom2};
		Arrays.sort(testArray);

		if(testArray[0].equals(chrom1))
			return true;

		return false;
	}

----------------------------------------
	{
		String[] testArray = {chrom1, chrom2};
		Arrays.sort(testArray);

		if(testArray[0].equals(chrom1))
			return true;

		return false;
	}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
96
22834673
net/sf/varscan/Somatic.java 1938 1965
net/sf/varscan/Copynumber.java 1079 1106
----------------------------------------
	{
		Boolean answer = false;

		chrom1.replace("X", "23");
		chrom1.replace("Y", "24");
		chrom1.replace("M", "25");

		chrom2.replace("X", "23");
		chrom2.replace("Y", "24");
		chrom2.replace("M", "25");

		String[] unsorted = {chrom1, chrom2};
		String[] sorted = {chrom1, chrom2};
		Arrays.sort(sorted);
		System.err.println("Sorted order is " + sorted[0] + " " + sorted[1]);
		try{
			if(sorted[0].equals(unsorted[0]))
			{
				answer = true;
			}
		}
		catch(Exception e)
		{

		}

		return(answer);
	}

----------------------------------------
	{
		Boolean answer = false;

		chrom1.replace("X", "23");
		chrom1.replace("Y", "24");
		chrom1.replace("M", "25");

		chrom2.replace("X", "23");
		chrom2.replace("Y", "24");
		chrom2.replace("M", "25");

		String[] unsorted = {chrom1, chrom2};
		String[] sorted = {chrom1, chrom2};
		Arrays.sort(sorted);
		System.err.println("Sorted order is " + sorted[0] + " " + sorted[1]);
		try{
			if(sorted[0].equals(unsorted[0]))
			{
				answer = true;
			}
		}
		catch(Exception e)
		{

		}

		return(answer);
	}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
96
22834674
net/sf/varscan/Somatic.java 1953 1958
net/sf/varscan/Copynumber.java 1094 1099
----------------------------------------
		try{
			if(sorted[0].equals(unsorted[0]))
			{
				answer = true;
			}
		}

----------------------------------------
		try{
			if(sorted[0].equals(unsorted[0]))
			{
				answer = true;
			}
		}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
96
22834675
net/sf/varscan/CallMpileup.java 90 181
net/sf/varscan/Trio.java 95 195
----------------------------------------
		{
			if(params.containsKey("min-coverage"))
				 minCoverage = Integer.parseInt(params.get("min-coverage"));

			if(params.containsKey("min-reads2"))
				 minReads2 = Integer.parseInt(params.get("min-reads2"));

			if(params.containsKey("min-var-freq"))
				 minVarFreq = Double.parseDouble(params.get("min-var-freq"));

			if(params.containsKey("min-freq-for-hom"))
				 minFreqForHom = Double.parseDouble(params.get("min-freq-for-hom"));

			if(params.containsKey("min-avg-qual"))
				 minAvgQual = Integer.parseInt(params.get("min-avg-qual"));

			if(params.containsKey("p-value"))
				 pValueThreshold = Double.parseDouble(params.get("p-value"));

			if(params.containsKey("strand-filter"))
			{
				int filter = Integer.parseInt(params.get("strand-filter"));
				if(filter > 0)
					strandFilter = true;
				else
					strandFilter = false;
			}

			if(params.containsKey("vcf-sample-list"))
			{
				File samplefile = new File(params.get("vcf-sample-list"));
				// Parse sample list //
				if(samplefile.exists())
	    		{
	    			BufferedReader in = new BufferedReader(new FileReader(samplefile));
	    			String line = "";
	    			if(in.ready())
	    			{
	    				while ((line = in.readLine()) != null)
	    				{
	    					String sampleName = line;
	    					if(sampleList.length() > 0)
	    						sampleList += "\t";
	    					sampleList += sampleName;
	    				}
	    			}
	    			else
	    			{
	    				System.err.println("Unable to open sample list");
	    			}

	    			in.close();
	    		}

				System.err.println("Got the following sample list: ");
				System.err.println(sampleList);
			}


			if(params.containsKey("variants"))
			{
				String variants = params.get("variants");

				// Determine type of variant reporting: all (default), SNPs, or indels //
				if(variants.equals("snp"))
				{
					snpsOnly = true;
					System.err.println("Only SNPs will be reported");
				}
				else if(variants.equals("indel"))
				{
					indelsOnly = true;
					System.err.println("Only indels will be reported");
				}
				else
				{
					variantsOnly = true;
					System.err.println("Only variants will be reported");
				}
			}

			if(params.containsKey("p-value"))
				 pValueThreshold = Double.parseDouble(params.get("p-value"));
			else
				System.err.println("Warning: No p-value threshold provided, so p-values will not be calculated");

			 System.err.println("Min coverage:\t" + minCoverage);
			 System.err.println("Min reads2:\t" + minReads2);
			 System.err.println("Min var freq:\t" + minVarFreq);
			 System.err.println("Min avg qual:\t" + minAvgQual);
			 System.err.println("P-value thresh:\t" + pValueThreshold);
		}

----------------------------------------
		{
			if(params.containsKey("min-coverage"))
				 minCoverage = Integer.parseInt(params.get("min-coverage"));

			if(params.containsKey("min-reads2"))
				 minReads2 = Integer.parseInt(params.get("min-reads2"));

			if(params.containsKey("adj-min-reads2"))
				 adjustedMinReads2 = Integer.parseInt(params.get("adj-min-reads2"));

			if(params.containsKey("min-var-freq"))
				 minVarFreq = Double.parseDouble(params.get("min-var-freq"));

			if(params.containsKey("adj-var-freq"))
				 adjustedMinVarFreq = Double.parseDouble(params.get("adj-var-freq"));

			if(params.containsKey("p-value"))
				 pValueThreshold = Double.parseDouble(params.get("p-value"));

			if(params.containsKey("adj-p-value"))
				 adjustedpValueThreshold = Double.parseDouble(params.get("adj-p-value"));

			if(params.containsKey("min-freq-for-hom"))
				 minFreqForHom = Double.parseDouble(params.get("min-freq-for-hom"));

			if(params.containsKey("min-avg-qual"))
				 minAvgQual = Integer.parseInt(params.get("min-avg-qual"));

			if(params.containsKey("output-name"))
			{
				outputName = params.get("output-name");
				outputSnp = outputName + ".snp.vcf";
				outputIndel = outputName + ".indel.vcf";

			}

			if(params.containsKey("strand-filter"))
			{
				int filter = Integer.parseInt(params.get("strand-filter"));
				if(filter > 0)
					strandFilter = true;
				else
					strandFilter = false;
			}

			if(params.containsKey("vcf-sample-list"))
			{
				File samplefile = new File(params.get("vcf-sample-list"));
				// Parse sample list //
				if(samplefile.exists())
	    		{
	    			BufferedReader in = new BufferedReader(new FileReader(samplefile));
	    			String line = "";
	    			if(in.ready())
	    			{
	    				while ((line = in.readLine()) != null)
	    				{
	    					String sampleName = line;
	    					if(sampleList.length() > 0)
	    						sampleList += "\t";
	    					sampleList += sampleName;
	    				}
	    			}
	    			else
	    			{
	    				System.err.println("Unable to open sample list");
	    			}

	    			in.close();
	    		}

				System.err.println("Got the following sample list: ");
				System.err.println(sampleList);
			}

			if(params.containsKey("p-value"))
				 pValueThreshold = Double.parseDouble(params.get("p-value"));
			else
				System.err.println("Warning: No p-value threshold provided, so p-values will not be calculated");


			// Check for correct input //

			if(outputSnp.length() == 0 || outputIndel.length() == 0)
			{
				System.err.println("Please provide an output basename or SNP/indel output files!");
				 System.err.println(usage);
				 System.exit(1);
			}

			System.err.println("SNPs will be output to " + outputSnp);
			System.err.println("Indels will be output to " + outputIndel);
			System.err.println("Min coverage:\t" + minCoverage);
			 System.err.println("Min reads2:\t" + minReads2);
			 System.err.println("Min var freq:\t" + minVarFreq);
			 System.err.println("Min avg qual:\t" + minAvgQual);
			 System.err.println("P-value thresh:\t" + pValueThreshold);
			 System.err.println("Adj. min reads2:\t" + adjustedMinReads2);
			 System.err.println("Adj. var freq:\t" + adjustedMinVarFreq);
			 System.err.println("Adj. p-value:\t" + adjustedpValueThreshold);
		}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
96
22834677
net/sf/varscan/CallMpileup.java 110 116
net/sf/varscan/Trio.java 132 138
----------------------------------------
			{
				int filter = Integer.parseInt(params.get("strand-filter"));
				if(filter > 0)
					strandFilter = true;
				else
					strandFilter = false;
			}

----------------------------------------
			{
				int filter = Integer.parseInt(params.get("strand-filter"));
				if(filter > 0)
					strandFilter = true;
				else
					strandFilter = false;
			}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
96
22834676
net/sf/varscan/Somatic.java 176 182
net/sf/varscan/Trio.java 132 138
----------------------------------------
			{
				int filter = Integer.parseInt(params.get("strand-filter"));
				if(filter > 0)
					doStrandFilter = true;
				else
					doStrandFilter = false;
			}

----------------------------------------
			{
				int filter = Integer.parseInt(params.get("strand-filter"));
				if(filter > 0)
					strandFilter = true;
				else
					strandFilter = false;
			}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
96
22834678
net/sf/varscan/CallMpileup.java 119 146
net/sf/varscan/Trio.java 141 168
----------------------------------------
			{
				File samplefile = new File(params.get("vcf-sample-list"));
				// Parse sample list //
				if(samplefile.exists())
	    		{
	    			BufferedReader in = new BufferedReader(new FileReader(samplefile));
	    			String line = "";
	    			if(in.ready())
	    			{
	    				while ((line = in.readLine()) != null)
	    				{
	    					String sampleName = line;
	    					if(sampleList.length() > 0)
	    						sampleList += "\t";
	    					sampleList += sampleName;
	    				}
	    			}
	    			else
	    			{
	    				System.err.println("Unable to open sample list");
	    			}

	    			in.close();
	    		}

				System.err.println("Got the following sample list: ");
				System.err.println(sampleList);
			}

----------------------------------------
			{
				File samplefile = new File(params.get("vcf-sample-list"));
				// Parse sample list //
				if(samplefile.exists())
	    		{
	    			BufferedReader in = new BufferedReader(new FileReader(samplefile));
	    			String line = "";
	    			if(in.ready())
	    			{
	    				while ((line = in.readLine()) != null)
	    				{
	    					String sampleName = line;
	    					if(sampleList.length() > 0)
	    						sampleList += "\t";
	    					sampleList += sampleName;
	    				}
	    			}
	    			else
	    			{
	    				System.err.println("Unable to open sample list");
	    			}

	    			in.close();
	    		}

				System.err.println("Got the following sample list: ");
				System.err.println(sampleList);
			}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
96
22834679
net/sf/varscan/Trio.java 141 168
net/sf/varscan/CallMpileup.java 123 142
----------------------------------------
			{
				File samplefile = new File(params.get("vcf-sample-list"));
				// Parse sample list //
				if(samplefile.exists())
	    		{
	    			BufferedReader in = new BufferedReader(new FileReader(samplefile));
	    			String line = "";
	    			if(in.ready())
	    			{
	    				while ((line = in.readLine()) != null)
	    				{
	    					String sampleName = line;
	    					if(sampleList.length() > 0)
	    						sampleList += "\t";
	    					sampleList += sampleName;
	    				}
	    			}
	    			else
	    			{
	    				System.err.println("Unable to open sample list");
	    			}

	    			in.close();
	    		}

				System.err.println("Got the following sample list: ");
				System.err.println(sampleList);
			}

----------------------------------------
	    		{
	    			BufferedReader in = new BufferedReader(new FileReader(samplefile));
	    			String line = "";
	    			if(in.ready())
	    			{
	    				while ((line = in.readLine()) != null)
	    				{
	    					String sampleName = line;
	    					if(sampleList.length() > 0)
	    						sampleList += "\t";
	    					sampleList += sampleName;
	    				}
	    			}
	    			else
	    			{
	    				System.err.println("Unable to open sample list");
	    			}

	    			in.close();
	    		}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
96
22834681
net/sf/varscan/CallMpileup.java 123 142
net/sf/varscan/Trio.java 145 164
----------------------------------------
	    		{
	    			BufferedReader in = new BufferedReader(new FileReader(samplefile));
	    			String line = "";
	    			if(in.ready())
	    			{
	    				while ((line = in.readLine()) != null)
	    				{
	    					String sampleName = line;
	    					if(sampleList.length() > 0)
	    						sampleList += "\t";
	    					sampleList += sampleName;
	    				}
	    			}
	    			else
	    			{
	    				System.err.println("Unable to open sample list");
	    			}

	    			in.close();
	    		}

----------------------------------------
	    		{
	    			BufferedReader in = new BufferedReader(new FileReader(samplefile));
	    			String line = "";
	    			if(in.ready())
	    			{
	    				while ((line = in.readLine()) != null)
	    				{
	    					String sampleName = line;
	    					if(sampleList.length() > 0)
	    						sampleList += "\t";
	    					sampleList += sampleName;
	    				}
	    			}
	    			else
	    			{
	    				System.err.println("Unable to open sample list");
	    			}

	    			in.close();
	    		}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
96
22834680
net/sf/varscan/CallMpileup.java 119 146
net/sf/varscan/Trio.java 145 164
----------------------------------------
			{
				File samplefile = new File(params.get("vcf-sample-list"));
				// Parse sample list //
				if(samplefile.exists())
	    		{
	    			BufferedReader in = new BufferedReader(new FileReader(samplefile));
	    			String line = "";
	    			if(in.ready())
	    			{
	    				while ((line = in.readLine()) != null)
	    				{
	    					String sampleName = line;
	    					if(sampleList.length() > 0)
	    						sampleList += "\t";
	    					sampleList += sampleName;
	    				}
	    			}
	    			else
	    			{
	    				System.err.println("Unable to open sample list");
	    			}

	    			in.close();
	    		}

				System.err.println("Got the following sample list: ");
				System.err.println(sampleList);
			}

----------------------------------------
	    		{
	    			BufferedReader in = new BufferedReader(new FileReader(samplefile));
	    			String line = "";
	    			if(in.ready())
	    			{
	    				while ((line = in.readLine()) != null)
	    				{
	    					String sampleName = line;
	    					if(sampleList.length() > 0)
	    						sampleList += "\t";
	    					sampleList += sampleName;
	    				}
	    			}
	    			else
	    			{
	    				System.err.println("Unable to open sample list");
	    			}

	    			in.close();
	    		}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
96
22834683
net/sf/varscan/CallMpileup.java 127 135
net/sf/varscan/Trio.java 149 157
----------------------------------------
	    			{
	    				while ((line = in.readLine()) != null)
	    				{
	    					String sampleName = line;
	    					if(sampleList.length() > 0)
	    						sampleList += "\t";
	    					sampleList += sampleName;
	    				}
	    			}

----------------------------------------
	    			{
	    				while ((line = in.readLine()) != null)
	    				{
	    					String sampleName = line;
	    					if(sampleList.length() > 0)
	    						sampleList += "\t";
	    					sampleList += sampleName;
	    				}
	    			}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
96
22834682
net/sf/varscan/CallMpileup.java 129 134
net/sf/varscan/Trio.java 149 157
----------------------------------------
	    				{
	    					String sampleName = line;
	    					if(sampleList.length() > 0)
	    						sampleList += "\t";
	    					sampleList += sampleName;
	    				}

----------------------------------------
	    			{
	    				while ((line = in.readLine()) != null)
	    				{
	    					String sampleName = line;
	    					if(sampleList.length() > 0)
	    						sampleList += "\t";
	    					sampleList += sampleName;
	    				}
	    			}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
96
22834685
net/sf/varscan/LimitVariants.java 134 139
net/sf/varscan/FilterVariants.java 477 482
----------------------------------------
	    		{
	    			// Handle native file headers //
	    			outFile.println(line);
	    			if(params.containsKey("not-file"))
	    				notFile.println(line);
	    		}

----------------------------------------
	    				{
	    					// Print header //
	    					System.out.println(line);
							if(params.containsKey("output-file"))
	    						outFile.println(line);
	    				}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
96
22834688
net/sf/varscan/FilterSomatic.java 341 346
net/sf/varscan/FilterVariants.java 477 482
----------------------------------------
		    				{
		    					if(params.containsKey("output-file"))
		    						outFile.println(line);

		    					stats.put("numPassFilter", (stats.get("numPassFilter") + 1));
		    				}

----------------------------------------
	    				{
	    					// Print header //
	    					System.out.println(line);
							if(params.containsKey("output-file"))
	    						outFile.println(line);
	    				}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
96
22834684
net/sf/varscan/FpFilter.java 272 277
net/sf/varscan/FilterVariants.java 477 482
----------------------------------------
	    	    					{
	    	    						if(line.startsWith("#CHROM"))
	    	    							filteredFile.println(vcfHeaderInfo);

	    	    						filteredFile.println(line);
	    	    					}

----------------------------------------
	    				{
	    					// Print header //
	    					System.out.println(line);
							if(params.containsKey("output-file"))
	    						outFile.println(line);
	    				}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
96
22834689
net/sf/varscan/FpFilter.java 264 269
net/sf/varscan/FilterVariants.java 477 482
----------------------------------------
	    	    					{
	    	    						if(line.startsWith("#CHROM"))
	    	    							outFile.println(vcfHeaderInfo);

	    	    						outFile.println(line);
	    	    					}

----------------------------------------
	    				{
	    					// Print header //
	    					System.out.println(line);
							if(params.containsKey("output-file"))
	    						outFile.println(line);
	    				}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
96
22834687
net/sf/varscan/FilterVariants.java 363 368
net/sf/varscan/FilterVariants.java 477 482
----------------------------------------
    							{
    								if(params.containsKey("output-file"))
    									outFile.println(vcfLine);
    								else
    									System.out.println(vcfLine);
    							}

----------------------------------------
	    				{
	    					// Print header //
	    					System.out.println(line);
							if(params.containsKey("output-file"))
	    						outFile.println(line);
	    				}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
96
22834686
net/sf/varscan/FilterSomatic.java 206 211
net/sf/varscan/FilterVariants.java 477 482
----------------------------------------
		    			{

		    				// Print header //
	    					if(params.containsKey("output-file"))
	    						outFile.println(line);
		    			}

----------------------------------------
	    				{
	    					// Print header //
	    					System.out.println(line);
							if(params.containsKey("output-file"))
	    						outFile.println(line);
	    				}

----------------------------------------
