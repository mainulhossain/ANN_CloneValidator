$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
97
22835024
src/com/levelonelabs/aimbot/modules/TVListingsModule.java 116 124
src/com/levelonelabs/aimbot/modules/UserAdminModule.java 100 109
----------------------------------------
	public String help() {
		StringBuffer sb = new StringBuffer();
		sb.append("<B>tvlist <i>ZIPCODE</i></B> (displays the tv providers in the area of the zipcode)\n");
		sb.append("* If the preference \"zipcode\" is set, you can omit the zipcode to use your default.\n");
		sb
			.append("<B>tv <i>SHOW<i></B> (displays the synopsis of the next upcomming episode of the specified show in your area)\n");
		sb.append("* The preference \"tvprovider\" must be set!");
		return sb.toString();
	}

----------------------------------------
    public String help() {
        StringBuffer sb = new StringBuffer();
        sb
            .append("<B>adduser <i>BUDDY</i> <ADMIN></B> (adds a user to the list, along with allowing for admin perms)\n");
        sb.append("<B>rmuser <i>BUDDY</i></B> (removes a user from the list)\n");
        sb.append("<B>denyuser <i>BUDDY</i></B> (deny a user *ADMIN ONLY*)\n");
        sb.append("<B>permituser <i>BUDDY</i></B> (permit a user *ADMIN ONLY*)\n");
        sb.append("<B>permitmode <i>[MODE]</i></B> (set or display the permitmode*ADMIN ONLY*)\n");
        return sb.toString();
    }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
97
22835026
src/com/levelonelabs/aimbot/modules/MegaHalModule.java 158 164
src/com/levelonelabs/aimbot/modules/UserAdminModule.java 100 109
----------------------------------------
	public String help() {
		StringBuffer sb = new StringBuffer();
		sb.append("<B>MEGAHAL</B> commands:\n");
		sb.append("<b>megahaladmin save</b> (saves the megahal brain *ADMIN ONLY*)\n");
		sb.append("<b>megahaladmin think <i>N</i></b>  (sets the think time to <N> seconds *ADMIN ONLY*)\n");
		return sb.toString();
	}

----------------------------------------
    public String help() {
        StringBuffer sb = new StringBuffer();
        sb
            .append("<B>adduser <i>BUDDY</i> <ADMIN></B> (adds a user to the list, along with allowing for admin perms)\n");
        sb.append("<B>rmuser <i>BUDDY</i></B> (removes a user from the list)\n");
        sb.append("<B>denyuser <i>BUDDY</i></B> (deny a user *ADMIN ONLY*)\n");
        sb.append("<B>permituser <i>BUDDY</i></B> (permit a user *ADMIN ONLY*)\n");
        sb.append("<B>permitmode <i>[MODE]</i></B> (set or display the permitmode*ADMIN ONLY*)\n");
        return sb.toString();
    }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
97
22835210
src/com/levelonelabs/aimbot/modules/ScheduleModule.java 156 165
src/com/levelonelabs/aimbot/modules/UserAdminModule.java 100 109
----------------------------------------
    public String help() {
        StringBuffer sb = new StringBuffer();
        sb.append("<B>schedule <i>TEXT</i></B> (stores text in the system for retrieval later)\n");
        sb.append("<B>cancel <i>All or #</i></B> (removes all items or a specific item)\n");
        sb.append("<B>events</B> (lists all reminders)\n");
        sb
            .append("* If the preference \"reminderatsignon\" is set to true, you will automatically get a list when you login to aim.\n");

        return sb.toString();
    }

----------------------------------------
    public String help() {
        StringBuffer sb = new StringBuffer();
        sb
            .append("<B>adduser <i>BUDDY</i> <ADMIN></B> (adds a user to the list, along with allowing for admin perms)\n");
        sb.append("<B>rmuser <i>BUDDY</i></B> (removes a user from the list)\n");
        sb.append("<B>denyuser <i>BUDDY</i></B> (deny a user *ADMIN ONLY*)\n");
        sb.append("<B>permituser <i>BUDDY</i></B> (permit a user *ADMIN ONLY*)\n");
        sb.append("<B>permitmode <i>[MODE]</i></B> (set or display the permitmode*ADMIN ONLY*)\n");
        return sb.toString();
    }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
97
22835027
src/com/levelonelabs/aimbot/modules/ReminderModule.java 120 129
src/com/levelonelabs/aimbot/modules/UserAdminModule.java 100 109
----------------------------------------
    public String help() {
        StringBuffer sb = new StringBuffer();
        sb.append("<B>remember <i>TEXT</i></B> (stores text in the system for retrieval later)\n");
        sb.append("<B>forget <i>All or #</i></B> (removes all items or a specific item)\n");
        sb.append("<B>remind</B> (lists all reminders)\n");
        sb
            .append("* If the preference \"reminderatsignon\" is set to true, you will automatically get a list when you login to aim.\n");

        return sb.toString();
    }

----------------------------------------
    public String help() {
        StringBuffer sb = new StringBuffer();
        sb
            .append("<B>adduser <i>BUDDY</i> <ADMIN></B> (adds a user to the list, along with allowing for admin perms)\n");
        sb.append("<B>rmuser <i>BUDDY</i></B> (removes a user from the list)\n");
        sb.append("<B>denyuser <i>BUDDY</i></B> (deny a user *ADMIN ONLY*)\n");
        sb.append("<B>permituser <i>BUDDY</i></B> (permit a user *ADMIN ONLY*)\n");
        sb.append("<B>permitmode <i>[MODE]</i></B> (set or display the permitmode*ADMIN ONLY*)\n");
        return sb.toString();
    }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
97
22835023
src/com/levelonelabs/aimbot/modules/MoviesModule.java 107 118
src/com/levelonelabs/aimbot/modules/UserAdminModule.java 100 109
----------------------------------------
    public String help() {
        StringBuffer sb=new StringBuffer();
        sb.append("<B>theaters <i>ZIPCODE<i></B> (displays a list of theaters in your area)\n");
        sb.append(
            "* If the preference \"zipcode\" is set, you can omit the zipcode to use your default.\n");
        sb.append(
            "<B>movies <i>ZIPCODE [Theater Number]</i></B> (displays movie times for the theater closest to your zipcode if a theater number is not provided)\n");
        sb.append(
            "* If the preference \"zipcode\" is set, you can omit the zipcode to use your default.\n");
        sb.append("<B>movieslegend</B> (displays the legend for movie times)");
        return sb.toString();
    }

----------------------------------------
    public String help() {
        StringBuffer sb = new StringBuffer();
        sb
            .append("<B>adduser <i>BUDDY</i> <ADMIN></B> (adds a user to the list, along with allowing for admin perms)\n");
        sb.append("<B>rmuser <i>BUDDY</i></B> (removes a user from the list)\n");
        sb.append("<B>denyuser <i>BUDDY</i></B> (deny a user *ADMIN ONLY*)\n");
        sb.append("<B>permituser <i>BUDDY</i></B> (permit a user *ADMIN ONLY*)\n");
        sb.append("<B>permitmode <i>[MODE]</i></B> (set or display the permitmode*ADMIN ONLY*)\n");
        return sb.toString();
    }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
97
22835028
src/com/levelonelabs/aimbot/modules/ScheduleModule.java 401 413
src/com/levelonelabs/aimbot/modules/ReminderModule.java 217 229
----------------------------------------
        } else {
            try {
                int loc = Integer.parseInt(tok) - 1;
                if (removeEvent(buddy, loc)) {
                    sendMessage(buddy, "Event cancelled.");
                } else {
                    sendMessage(buddy, "ERROR: number " + tok + " not valid.");
                }
            } catch (Exception e) {
                e.printStackTrace();
                sendMessage(buddy, "ERROR: number invalid: " + tok);
            }
        }

----------------------------------------
        } else {
            try {
                int loc = Integer.parseInt(tok) - 1;
                if (removeReminder(buddy, loc)) {
                    sendMessage(buddy, "Reminder removed.");
                } else {
                    sendMessage(buddy, "ERROR: number " + tok + " not valid.");
                }
            } catch (Exception e) {
                e.printStackTrace();
                sendMessage(buddy, "ERROR: number invalid: " + tok);
            }
        }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
97
28918756
src/com/levelonelabs/aimbot/modules/ListModule.java 242 258
src/com/levelonelabs/aimbot/modules/ListModule.java 179 202
----------------------------------------
    private void processRemoveList(AIMBuddy buddy, StringTokenizer st) {
        if (!buddy.hasRole(AIMBot.ROLE_ADMINISTRATOR)) {
            super.sendMessage(buddy, "Sorry. This command is for admins only.");
        } else if (st.countTokens() < 1) {
            super.sendMessage(buddy, "Error: \n" + help());
        } else {
            String list = st.nextToken();
            list = st.nextToken();
            AIMGroup group = super.bot.getGroup(list);
            if (group != null) {
                super.bot.removeGroup(group);
                super.sendMessage(buddy, "The list " + list + " has been removed");
            } else {
                super.sendMessage(buddy, "The list " + list + " does not exist");
            }
        }
    }

----------------------------------------
    private void processRemoveListMember(AIMBuddy buddy, StringTokenizer st) {
        if (!buddy.hasRole(AIMBot.ROLE_ADMINISTRATOR)) {
            super.sendMessage(buddy, "Sorry. This command is for admins only.");
        } else if (st.countTokens() < 3) {
            super.sendMessage(buddy, "Error:\n" + help());
        } else {
            String imcommand = st.nextToken();
            String list = st.nextToken();
            String buddyname = st.nextToken();

            AIMGroup group = super.bot.getGroup(list);

            if (group != null) {
                if (group.remove(buddyname)) {
                    super.sendMessage(buddy, buddyname + " was successfully removed from list:" + list);
                } else {
                    super.sendMessage(buddy, buddyname + " was not a member of list:" + list);
                }
            } else {
                super.sendMessage(buddy, "The list, " + list + ", does not exist.");
            }

        }
    }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
97
28918755
src/com/levelonelabs/aimbot/modules/ListModule.java 313 326
src/com/levelonelabs/aimbot/modules/ListModule.java 179 202
----------------------------------------
    private void processMembers(AIMBuddy buddy, StringTokenizer st) {
        if (!buddy.hasRole(AIMBot.ROLE_ADMINISTRATOR)) {
            super.sendMessage(buddy, "Sorry. This command is for admins only.");
        } else {
            String imcommand = st.nextToken();
            String list = st.nextToken();
            AIMGroup group = super.bot.getGroup(list);
            if (group != null) {
                super.sendMessage(buddy, "The list, " + list + ", contains: " + group.toString());
            } else {
                super.sendMessage(buddy, "The list, " + list + ", does not exist.");
            }
        }
    }

----------------------------------------
    private void processRemoveListMember(AIMBuddy buddy, StringTokenizer st) {
        if (!buddy.hasRole(AIMBot.ROLE_ADMINISTRATOR)) {
            super.sendMessage(buddy, "Sorry. This command is for admins only.");
        } else if (st.countTokens() < 3) {
            super.sendMessage(buddy, "Error:\n" + help());
        } else {
            String imcommand = st.nextToken();
            String list = st.nextToken();
            String buddyname = st.nextToken();

            AIMGroup group = super.bot.getGroup(list);

            if (group != null) {
                if (group.remove(buddyname)) {
                    super.sendMessage(buddy, buddyname + " was successfully removed from list:" + list);
                } else {
                    super.sendMessage(buddy, buddyname + " was not a member of list:" + list);
                }
            } else {
                super.sendMessage(buddy, "The list, " + list + ", does not exist.");
            }

        }
    }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
97
28918757
src/com/levelonelabs/aimbot/modules/ListModule.java 313 326
src/com/levelonelabs/aimbot/modules/ListModule.java 209 235
----------------------------------------
    private void processMembers(AIMBuddy buddy, StringTokenizer st) {
        if (!buddy.hasRole(AIMBot.ROLE_ADMINISTRATOR)) {
            super.sendMessage(buddy, "Sorry. This command is for admins only.");
        } else {
            String imcommand = st.nextToken();
            String list = st.nextToken();
            AIMGroup group = super.bot.getGroup(list);
            if (group != null) {
                super.sendMessage(buddy, "The list, " + list + ", contains: " + group.toString());
            } else {
                super.sendMessage(buddy, "The list, " + list + ", does not exist.");
            }
        }
    }

----------------------------------------
    private void processAddListMember(AIMBuddy buddy, StringTokenizer st) {
        if (!buddy.hasRole(AIMBot.ROLE_ADMINISTRATOR)) {
            super.sendMessage(buddy, "Sorry. This command is for admins only.");
        } else if (st.countTokens() < 3) {
            super.sendMessage(buddy, "Error: \n" + help());

        } else {
            String imcommand = st.nextToken();
            String list = st.nextToken();
            String buddyname = st.nextToken();
            AIMBuddy ibuddy = getBuddy(buddyname);
            if (ibuddy == null) {
                super.sendMessage(buddy, buddyname + " is not a user, please ADDUSER");
            } else {
                AIMGroup group = super.bot.getGroup(list);
                if (group != null) {
                    if (group.add(ibuddy.getName())) {
                        super.sendMessage(buddy, buddyname + " was successfully added to list:" + list);
                    } else {
                        super.sendMessage(buddy, buddyname + " was already a member of list:" + list);
                    }
                } else {
                    super.sendMessage(buddy, "The list, " + list + ", does not exist.");
                }
            }
        }
    }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
97
28918758
src/com/levelonelabs/aimbot/modules/ListModule.java 242 258
src/com/levelonelabs/aimbot/modules/ListModule.java 209 235
----------------------------------------
    private void processRemoveList(AIMBuddy buddy, StringTokenizer st) {
        if (!buddy.hasRole(AIMBot.ROLE_ADMINISTRATOR)) {
            super.sendMessage(buddy, "Sorry. This command is for admins only.");
        } else if (st.countTokens() < 1) {
            super.sendMessage(buddy, "Error: \n" + help());
        } else {
            String list = st.nextToken();
            list = st.nextToken();
            AIMGroup group = super.bot.getGroup(list);
            if (group != null) {
                super.bot.removeGroup(group);
                super.sendMessage(buddy, "The list " + list + " has been removed");
            } else {
                super.sendMessage(buddy, "The list " + list + " does not exist");
            }
        }
    }

----------------------------------------
    private void processAddListMember(AIMBuddy buddy, StringTokenizer st) {
        if (!buddy.hasRole(AIMBot.ROLE_ADMINISTRATOR)) {
            super.sendMessage(buddy, "Sorry. This command is for admins only.");
        } else if (st.countTokens() < 3) {
            super.sendMessage(buddy, "Error: \n" + help());

        } else {
            String imcommand = st.nextToken();
            String list = st.nextToken();
            String buddyname = st.nextToken();
            AIMBuddy ibuddy = getBuddy(buddyname);
            if (ibuddy == null) {
                super.sendMessage(buddy, buddyname + " is not a user, please ADDUSER");
            } else {
                AIMGroup group = super.bot.getGroup(list);
                if (group != null) {
                    if (group.add(ibuddy.getName())) {
                        super.sendMessage(buddy, buddyname + " was successfully added to list:" + list);
                    } else {
                        super.sendMessage(buddy, buddyname + " was already a member of list:" + list);
                    }
                } else {
                    super.sendMessage(buddy, "The list, " + list + ", does not exist.");
                }
            }
        }
    }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
97
22835030
src/com/levelonelabs/aimbot/modules/ListModule.java 179 202
src/com/levelonelabs/aimbot/modules/ListModule.java 209 235
----------------------------------------
    private void processRemoveListMember(AIMBuddy buddy, StringTokenizer st) {
        if (!buddy.hasRole(AIMBot.ROLE_ADMINISTRATOR)) {
            super.sendMessage(buddy, "Sorry. This command is for admins only.");
        } else if (st.countTokens() < 3) {
            super.sendMessage(buddy, "Error:\n" + help());
        } else {
            String imcommand = st.nextToken();
            String list = st.nextToken();
            String buddyname = st.nextToken();

            AIMGroup group = super.bot.getGroup(list);

            if (group != null) {
                if (group.remove(buddyname)) {
                    super.sendMessage(buddy, buddyname + " was successfully removed from list:" + list);
                } else {
                    super.sendMessage(buddy, buddyname + " was not a member of list:" + list);
                }
            } else {
                super.sendMessage(buddy, "The list, " + list + ", does not exist.");
            }

        }
    }

----------------------------------------
    private void processAddListMember(AIMBuddy buddy, StringTokenizer st) {
        if (!buddy.hasRole(AIMBot.ROLE_ADMINISTRATOR)) {
            super.sendMessage(buddy, "Sorry. This command is for admins only.");
        } else if (st.countTokens() < 3) {
            super.sendMessage(buddy, "Error: \n" + help());

        } else {
            String imcommand = st.nextToken();
            String list = st.nextToken();
            String buddyname = st.nextToken();
            AIMBuddy ibuddy = getBuddy(buddyname);
            if (ibuddy == null) {
                super.sendMessage(buddy, buddyname + " is not a user, please ADDUSER");
            } else {
                AIMGroup group = super.bot.getGroup(list);
                if (group != null) {
                    if (group.add(ibuddy.getName())) {
                        super.sendMessage(buddy, buddyname + " was successfully added to list:" + list);
                    } else {
                        super.sendMessage(buddy, buddyname + " was already a member of list:" + list);
                    }
                } else {
                    super.sendMessage(buddy, "The list, " + list + ", does not exist.");
                }
            }
        }
    }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
97
22835031
src/com/levelonelabs/aimbot/modules/ListModule.java 179 202
src/com/levelonelabs/aimbot/modules/ListModule.java 215 234
----------------------------------------
    private void processRemoveListMember(AIMBuddy buddy, StringTokenizer st) {
        if (!buddy.hasRole(AIMBot.ROLE_ADMINISTRATOR)) {
            super.sendMessage(buddy, "Sorry. This command is for admins only.");
        } else if (st.countTokens() < 3) {
            super.sendMessage(buddy, "Error:\n" + help());
        } else {
            String imcommand = st.nextToken();
            String list = st.nextToken();
            String buddyname = st.nextToken();

            AIMGroup group = super.bot.getGroup(list);

            if (group != null) {
                if (group.remove(buddyname)) {
                    super.sendMessage(buddy, buddyname + " was successfully removed from list:" + list);
                } else {
                    super.sendMessage(buddy, buddyname + " was not a member of list:" + list);
                }
            } else {
                super.sendMessage(buddy, "The list, " + list + ", does not exist.");
            }

        }
    }

----------------------------------------
        } else {
            String imcommand = st.nextToken();
            String list = st.nextToken();
            String buddyname = st.nextToken();
            AIMBuddy ibuddy = getBuddy(buddyname);
            if (ibuddy == null) {
                super.sendMessage(buddy, buddyname + " is not a user, please ADDUSER");
            } else {
                AIMGroup group = super.bot.getGroup(list);
                if (group != null) {
                    if (group.add(ibuddy.getName())) {
                        super.sendMessage(buddy, buddyname + " was successfully added to list:" + list);
                    } else {
                        super.sendMessage(buddy, buddyname + " was already a member of list:" + list);
                    }
                } else {
                    super.sendMessage(buddy, "The list, " + list + ", does not exist.");
                }
            }
        }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
97
22835033
src/com/levelonelabs/aimbot/modules/ListModule.java 224 230
src/com/levelonelabs/aimbot/modules/ListModule.java 191 197
----------------------------------------
                if (group != null) {
                    if (group.add(ibuddy.getName())) {
                        super.sendMessage(buddy, buddyname + " was successfully added to list:" + list);
                    } else {
                        super.sendMessage(buddy, buddyname + " was already a member of list:" + list);
                    }
                } else {

----------------------------------------
            if (group != null) {
                if (group.remove(buddyname)) {
                    super.sendMessage(buddy, buddyname + " was successfully removed from list:" + list);
                } else {
                    super.sendMessage(buddy, buddyname + " was not a member of list:" + list);
                }
            } else {

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
97
22835034
src/com/levelonelabs/aimbot/modules/ListModule.java 242 258
src/com/levelonelabs/aimbot/modules/ListModule.java 265 285
----------------------------------------
    private void processRemoveList(AIMBuddy buddy, StringTokenizer st) {
        if (!buddy.hasRole(AIMBot.ROLE_ADMINISTRATOR)) {
            super.sendMessage(buddy, "Sorry. This command is for admins only.");
        } else if (st.countTokens() < 1) {
            super.sendMessage(buddy, "Error: \n" + help());
        } else {
            String list = st.nextToken();
            list = st.nextToken();
            AIMGroup group = super.bot.getGroup(list);
            if (group != null) {
                super.bot.removeGroup(group);
                super.sendMessage(buddy, "The list " + list + " has been removed");
            } else {
                super.sendMessage(buddy, "The list " + list + " does not exist");
            }
        }
    }

----------------------------------------
    private void processPost(AIMBuddy buddy, StringTokenizer st) {
        if (st.countTokens() < 3) {
            super.sendMessage(buddy, "ERROR:\n" + help());
        } else {
            String imcommand = st.nextToken();
            String list = st.nextToken();

            // grab the rest of the message and send it to the group
            String message = "";
            while (st.hasMoreTokens()) {
                message += (" " + st.nextToken());
            }

            AIMGroup group = super.bot.getGroup(list);
            if (group != null) {
                sendGroupMessage(group, message, buddy);
            } else {
                super.sendMessage(buddy, "The list, " + list + ", does not exist.");
            }
        }
    }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
97
22835037
src/com/levelonelabs/aimbot/modules/TVListingsModule.java 329 338
src/com/levelonelabs/aimbot/modules/SkiReportModule.java 330 339
----------------------------------------
	public static void main(String[] args) {
		String zip = args[0];
		TVProviderScraper scrapper = new TVProviderScraper(zip);
		Map providers = scrapper.getProviders();
		for (Iterator iter = providers.keySet().iterator(); iter.hasNext();) {
			String key = (String) iter.next();
			String value = (String) providers.get(key);
			System.out.println(value + "\t use --> " + key);
		}
	}

----------------------------------------
    public static void main(String[] args) {
        String state = args[0];
        MountainScraper scrapper = new MountainScraper(state);
        Map mounts = scrapper.getMountains();
        for (Iterator iter = mounts.keySet().iterator(); iter.hasNext();) {
            String key = (String) iter.next();
            String value = (String) mounts.get(key);
            System.out.println(value + "\t use --> " + key);
        }
    }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
97
22835040
src/com/levelonelabs/aimbot/modules/MoviesModule.java 475 488
src/com/levelonelabs/aimbot/modules/WeatherModule.java 196 215
----------------------------------------
    public String getTheaters() {
        try {
            URL url=new URL(urlPart+zipcode);
            logger.fine("Looking for theaters for: "+zipcode+" using URL="+url);
            URLConnection conn=url.openConnection();
            BufferedReader br=new BufferedReader(new InputStreamReader(conn.getInputStream()));
            ParserDelegator pd=new ParserDelegator();
            pd.parse(br, this, true);
        } catch(Exception e) {
            e.printStackTrace();
            return result;
        }
        return result;
    }

----------------------------------------
        public String getWeather(String zipcode) {
            String tempResult="";
            try {
                URL url=new URL(WeatherModule.TEMP_URL+zipcode);

                //System.out.println("Scrapping URL= " + TEMP_URL);
                URLConnection conn=url.openConnection();

                BufferedReader br=new BufferedReader(new InputStreamReader(conn.getInputStream()));

                ParserDelegator pd=new ParserDelegator();
                WeatherScrapper s=new WeatherScrapper();
                pd.parse(br, s, true);
                tempResult=s.getResult();
            } catch(Exception e) {
                e.printStackTrace();
                return "";
            }
            return tempResult;
        }       

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
97
22835043
src/com/levelonelabs/aimbot/modules/ScheduleModule.java 111 118
src/com/levelonelabs/aimbot/modules/BabelModule.java 71 83
----------------------------------------
    static {
        services = new ArrayList();
        services.add("schedule");
        services.add("cancel");
        services.add("events");
        // Create the timer to handle timed reminding events
        timer = new Timer();
    }

----------------------------------------
    static {
        //init the services
        services=new ArrayList();
        services.add("babel");

        //init the langs
        langs=new Vector();
        langs.add("de");
        langs.add("it");
        langs.add("pt");
        langs.add("fr");
        langs.add("es");
    }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
97
22835045
src/com/levelonelabs/aimbot/modules/UserAdminModule.java 55 62
src/com/levelonelabs/aimbot/modules/BabelModule.java 71 83
----------------------------------------
    static {
        services = new ArrayList();
        services.add("adduser");
        services.add("rmuser");
        services.add("denyuser");
        services.add("permituser");
        services.add("permitmode");
    }

----------------------------------------
    static {
        //init the services
        services=new ArrayList();
        services.add("babel");

        //init the langs
        langs=new Vector();
        langs.add("de");
        langs.add("it");
        langs.add("pt");
        langs.add("fr");
        langs.add("es");
    }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
97
22835041
src/com/levelonelabs/aimbot/modules/ListModule.java 59 70
src/com/levelonelabs/aimbot/modules/BabelModule.java 71 83
----------------------------------------
    static {
        services = new ArrayList();
        services.add("subscribe");
        services.add("unsubscribe");
        services.add("post");
        services.add("members");
        services.add("makelist");
        services.add("lists");
        services.add("removelist");
        services.add("addlistmember");
        services.add("rmlistmember");
    }

----------------------------------------
    static {
        //init the services
        services=new ArrayList();
        services.add("babel");

        //init the langs
        langs=new Vector();
        langs.add("de");
        langs.add("it");
        langs.add("pt");
        langs.add("fr");
        langs.add("es");
    }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
97
22835044
src/com/levelonelabs/aimbot/modules/UserAdminModule.java 100 109
src/com/levelonelabs/aimbot/modules/BabelModule.java 71 83
----------------------------------------
    public String help() {
        StringBuffer sb = new StringBuffer();
        sb
            .append("<B>adduser <i>BUDDY</i> <ADMIN></B> (adds a user to the list, along with allowing for admin perms)\n");
        sb.append("<B>rmuser <i>BUDDY</i></B> (removes a user from the list)\n");
        sb.append("<B>denyuser <i>BUDDY</i></B> (deny a user *ADMIN ONLY*)\n");
        sb.append("<B>permituser <i>BUDDY</i></B> (permit a user *ADMIN ONLY*)\n");
        sb.append("<B>permitmode <i>[MODE]</i></B> (set or display the permitmode*ADMIN ONLY*)\n");
        return sb.toString();
    }

----------------------------------------
    static {
        //init the services
        services=new ArrayList();
        services.add("babel");

        //init the langs
        langs=new Vector();
        langs.add("de");
        langs.add("it");
        langs.add("pt");
        langs.add("fr");
        langs.add("es");
    }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
97
22835042
src/com/levelonelabs/aimbot/modules/MoviesModule.java 107 118
src/com/levelonelabs/aimbot/modules/BabelModule.java 71 83
----------------------------------------
    public String help() {
        StringBuffer sb=new StringBuffer();
        sb.append("<B>theaters <i>ZIPCODE<i></B> (displays a list of theaters in your area)\n");
        sb.append(
            "* If the preference \"zipcode\" is set, you can omit the zipcode to use your default.\n");
        sb.append(
            "<B>movies <i>ZIPCODE [Theater Number]</i></B> (displays movie times for the theater closest to your zipcode if a theater number is not provided)\n");
        sb.append(
            "* If the preference \"zipcode\" is set, you can omit the zipcode to use your default.\n");
        sb.append("<B>movieslegend</B> (displays the legend for movie times)");
        return sb.toString();
    }

----------------------------------------
    static {
        //init the services
        services=new ArrayList();
        services.add("babel");

        //init the langs
        langs=new Vector();
        langs.add("de");
        langs.add("it");
        langs.add("pt");
        langs.add("fr");
        langs.add("es");
    }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
97
22835057
src/com/levelonelabs/aimbot/modules/DefaultModule.java 96 103
src/com/levelonelabs/aimbot/modules/SkiReportModule.java 110 118
----------------------------------------
    public String help() {
        StringBuffer sb=new StringBuffer();
        sb.append("Default Module\nThis will output default text if the input \n");
        sb.append("is not recognized\n");
        sb.append("<B>addTerm <i>TEXT</i></B> "+
            "(add possible lines for the module to output) *Admin only*");
        return sb.toString();
    }

----------------------------------------
    public String help() {
        StringBuffer sb = new StringBuffer();
        sb
            .append("<B>mountains <i>STATE ABBREVIATION</i></B> (displays the resort codes for the specified state code)\n");
        sb.append("<B>ski <i>STATE ABBREVIATION:RESORT CODE</i></B> (displays the ski reports for the given resort)\n");
        sb
            .append("* If the preference \"mountain\" is set, you can omit the [STATE ABBREVIATION:RESORT CODE] to use your default.");
        return sb.toString();
    }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
97
22835052
src/com/levelonelabs/aimbot/modules/MoviesModule.java 72 77
src/com/levelonelabs/aimbot/modules/SkiReportModule.java 110 118
----------------------------------------
    static {
        services=new ArrayList();
        services.add("movies");
        services.add("movieslegend");
        services.add("theaters");
    }

----------------------------------------
    public String help() {
        StringBuffer sb = new StringBuffer();
        sb
            .append("<B>mountains <i>STATE ABBREVIATION</i></B> (displays the resort codes for the specified state code)\n");
        sb.append("<B>ski <i>STATE ABBREVIATION:RESORT CODE</i></B> (displays the ski reports for the given resort)\n");
        sb
            .append("* If the preference \"mountain\" is set, you can omit the [STATE ABBREVIATION:RESORT CODE] to use your default.");
        return sb.toString();
    }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
97
22835047
src/com/levelonelabs/aimbot/modules/MoviesModule.java 107 118
src/com/levelonelabs/aimbot/modules/SkiReportModule.java 110 118
----------------------------------------
    public String help() {
        StringBuffer sb=new StringBuffer();
        sb.append("<B>theaters <i>ZIPCODE<i></B> (displays a list of theaters in your area)\n");
        sb.append(
            "* If the preference \"zipcode\" is set, you can omit the zipcode to use your default.\n");
        sb.append(
            "<B>movies <i>ZIPCODE [Theater Number]</i></B> (displays movie times for the theater closest to your zipcode if a theater number is not provided)\n");
        sb.append(
            "* If the preference \"zipcode\" is set, you can omit the zipcode to use your default.\n");
        sb.append("<B>movieslegend</B> (displays the legend for movie times)");
        return sb.toString();
    }

----------------------------------------
    public String help() {
        StringBuffer sb = new StringBuffer();
        sb
            .append("<B>mountains <i>STATE ABBREVIATION</i></B> (displays the resort codes for the specified state code)\n");
        sb.append("<B>ski <i>STATE ABBREVIATION:RESORT CODE</i></B> (displays the ski reports for the given resort)\n");
        sb
            .append("* If the preference \"mountain\" is set, you can omit the [STATE ABBREVIATION:RESORT CODE] to use your default.");
        return sb.toString();
    }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
97
22835048
src/com/levelonelabs/aimbot/modules/TVListingsModule.java 116 124
src/com/levelonelabs/aimbot/modules/SkiReportModule.java 110 118
----------------------------------------
	public String help() {
		StringBuffer sb = new StringBuffer();
		sb.append("<B>tvlist <i>ZIPCODE</i></B> (displays the tv providers in the area of the zipcode)\n");
		sb.append("* If the preference \"zipcode\" is set, you can omit the zipcode to use your default.\n");
		sb
			.append("<B>tv <i>SHOW<i></B> (displays the synopsis of the next upcomming episode of the specified show in your area)\n");
		sb.append("* The preference \"tvprovider\" must be set!");
		return sb.toString();
	}

----------------------------------------
    public String help() {
        StringBuffer sb = new StringBuffer();
        sb
            .append("<B>mountains <i>STATE ABBREVIATION</i></B> (displays the resort codes for the specified state code)\n");
        sb.append("<B>ski <i>STATE ABBREVIATION:RESORT CODE</i></B> (displays the ski reports for the given resort)\n");
        sb
            .append("* If the preference \"mountain\" is set, you can omit the [STATE ABBREVIATION:RESORT CODE] to use your default.");
        return sb.toString();
    }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
97
22835053
src/com/levelonelabs/aimbot/modules/UserInformationModule.java 125 132
src/com/levelonelabs/aimbot/modules/SkiReportModule.java 110 118
----------------------------------------
	public String help() {
		StringBuffer sb = new StringBuffer();
		sb.append("<B>history <i>USER</i></B> (displays user's recent sign on and off history)\n");
		sb.append("<B>users</B> (displays status of all users)\n");
		sb.append("A=" + AIMBot.ROLE_ADMINISTRATOR + ", M = messages pending, * = new user, E = Enemy, - = banned\n");
		sb.append("<B>enemies</B> (displays status of all enemies)\n");
		return sb.toString();
	}

----------------------------------------
    public String help() {
        StringBuffer sb = new StringBuffer();
        sb
            .append("<B>mountains <i>STATE ABBREVIATION</i></B> (displays the resort codes for the specified state code)\n");
        sb.append("<B>ski <i>STATE ABBREVIATION:RESORT CODE</i></B> (displays the ski reports for the given resort)\n");
        sb
            .append("* If the preference \"mountain\" is set, you can omit the [STATE ABBREVIATION:RESORT CODE] to use your default.");
        return sb.toString();
    }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
97
22835055
src/com/levelonelabs/aimbot/modules/ScheduleModule.java 111 118
src/com/levelonelabs/aimbot/modules/SkiReportModule.java 110 118
----------------------------------------
    static {
        services = new ArrayList();
        services.add("schedule");
        services.add("cancel");
        services.add("events");
        // Create the timer to handle timed reminding events
        timer = new Timer();
    }

----------------------------------------
    public String help() {
        StringBuffer sb = new StringBuffer();
        sb
            .append("<B>mountains <i>STATE ABBREVIATION</i></B> (displays the resort codes for the specified state code)\n");
        sb.append("<B>ski <i>STATE ABBREVIATION:RESORT CODE</i></B> (displays the ski reports for the given resort)\n");
        sb
            .append("* If the preference \"mountain\" is set, you can omit the [STATE ABBREVIATION:RESORT CODE] to use your default.");
        return sb.toString();
    }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
97
22835164
src/com/levelonelabs/aimbot/modules/ReminderModule.java 68 73
src/com/levelonelabs/aimbot/modules/SkiReportModule.java 110 118
----------------------------------------
    static {
        services = new ArrayList();
        services.add("remind");
        services.add("remember");
        services.add("forget");
    }

----------------------------------------
    public String help() {
        StringBuffer sb = new StringBuffer();
        sb
            .append("<B>mountains <i>STATE ABBREVIATION</i></B> (displays the resort codes for the specified state code)\n");
        sb.append("<B>ski <i>STATE ABBREVIATION:RESORT CODE</i></B> (displays the ski reports for the given resort)\n");
        sb
            .append("* If the preference \"mountain\" is set, you can omit the [STATE ABBREVIATION:RESORT CODE] to use your default.");
        return sb.toString();
    }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
97
22835050
src/com/levelonelabs/aimbot/modules/MegaHalModule.java 158 164
src/com/levelonelabs/aimbot/modules/SkiReportModule.java 110 118
----------------------------------------
	public String help() {
		StringBuffer sb = new StringBuffer();
		sb.append("<B>MEGAHAL</B> commands:\n");
		sb.append("<b>megahaladmin save</b> (saves the megahal brain *ADMIN ONLY*)\n");
		sb.append("<b>megahaladmin think <i>N</i></b>  (sets the think time to <N> seconds *ADMIN ONLY*)\n");
		return sb.toString();
	}

----------------------------------------
    public String help() {
        StringBuffer sb = new StringBuffer();
        sb
            .append("<B>mountains <i>STATE ABBREVIATION</i></B> (displays the resort codes for the specified state code)\n");
        sb.append("<B>ski <i>STATE ABBREVIATION:RESORT CODE</i></B> (displays the ski reports for the given resort)\n");
        sb
            .append("* If the preference \"mountain\" is set, you can omit the [STATE ABBREVIATION:RESORT CODE] to use your default.");
        return sb.toString();
    }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
97
22835046
src/com/levelonelabs/aimbot/modules/UserInformationModule.java 62 67
src/com/levelonelabs/aimbot/modules/SkiReportModule.java 110 118
----------------------------------------
	static {
		services = new ArrayList();
		services.add("history");
		services.add("users");
		services.add("enemies");
	}

----------------------------------------
    public String help() {
        StringBuffer sb = new StringBuffer();
        sb
            .append("<B>mountains <i>STATE ABBREVIATION</i></B> (displays the resort codes for the specified state code)\n");
        sb.append("<B>ski <i>STATE ABBREVIATION:RESORT CODE</i></B> (displays the ski reports for the given resort)\n");
        sb
            .append("* If the preference \"mountain\" is set, you can omit the [STATE ABBREVIATION:RESORT CODE] to use your default.");
        return sb.toString();
    }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
97
22835051
src/com/levelonelabs/aimbot/modules/ReminderModule.java 120 129
src/com/levelonelabs/aimbot/modules/SkiReportModule.java 110 118
----------------------------------------
    public String help() {
        StringBuffer sb = new StringBuffer();
        sb.append("<B>remember <i>TEXT</i></B> (stores text in the system for retrieval later)\n");
        sb.append("<B>forget <i>All or #</i></B> (removes all items or a specific item)\n");
        sb.append("<B>remind</B> (lists all reminders)\n");
        sb
            .append("* If the preference \"reminderatsignon\" is set to true, you will automatically get a list when you login to aim.\n");

        return sb.toString();
    }

----------------------------------------
    public String help() {
        StringBuffer sb = new StringBuffer();
        sb
            .append("<B>mountains <i>STATE ABBREVIATION</i></B> (displays the resort codes for the specified state code)\n");
        sb.append("<B>ski <i>STATE ABBREVIATION:RESORT CODE</i></B> (displays the ski reports for the given resort)\n");
        sb
            .append("* If the preference \"mountain\" is set, you can omit the [STATE ABBREVIATION:RESORT CODE] to use your default.");
        return sb.toString();
    }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
97
22835056
src/com/levelonelabs/aimbot/modules/ScheduleModule.java 156 165
src/com/levelonelabs/aimbot/modules/SkiReportModule.java 110 118
----------------------------------------
    public String help() {
        StringBuffer sb = new StringBuffer();
        sb.append("<B>schedule <i>TEXT</i></B> (stores text in the system for retrieval later)\n");
        sb.append("<B>cancel <i>All or #</i></B> (removes all items or a specific item)\n");
        sb.append("<B>events</B> (lists all reminders)\n");
        sb
            .append("* If the preference \"reminderatsignon\" is set to true, you will automatically get a list when you login to aim.\n");

        return sb.toString();
    }

----------------------------------------
    public String help() {
        StringBuffer sb = new StringBuffer();
        sb
            .append("<B>mountains <i>STATE ABBREVIATION</i></B> (displays the resort codes for the specified state code)\n");
        sb.append("<B>ski <i>STATE ABBREVIATION:RESORT CODE</i></B> (displays the ski reports for the given resort)\n");
        sb
            .append("* If the preference \"mountain\" is set, you can omit the [STATE ABBREVIATION:RESORT CODE] to use your default.");
        return sb.toString();
    }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
97
22835049
src/com/levelonelabs/aimbot/modules/BuddyManagementModule.java 101 107
src/com/levelonelabs/aimbot/modules/SkiReportModule.java 110 118
----------------------------------------
    public String help() {
        StringBuffer sb = new StringBuffer();
        sb.append("<B>makeusers</B> (converts all non-user buddies to users *ADMIN ONLY*)\n");
        sb.append("<B>prune buddies</B> (removes all non-user buddies *ADMIN ONLY*)\n");
        sb.append("<B>prune inactive</B> (removes \"inactive\" users *ADMIN ONLY*)\n");
        return sb.toString();
    }

----------------------------------------
    public String help() {
        StringBuffer sb = new StringBuffer();
        sb
            .append("<B>mountains <i>STATE ABBREVIATION</i></B> (displays the resort codes for the specified state code)\n");
        sb.append("<B>ski <i>STATE ABBREVIATION:RESORT CODE</i></B> (displays the ski reports for the given resort)\n");
        sb
            .append("* If the preference \"mountain\" is set, you can omit the [STATE ABBREVIATION:RESORT CODE] to use your default.");
        return sb.toString();
    }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
97
22835054
src/com/levelonelabs/aimbot/modules/UserAdminModule.java 100 109
src/com/levelonelabs/aimbot/modules/SkiReportModule.java 110 118
----------------------------------------
    public String help() {
        StringBuffer sb = new StringBuffer();
        sb
            .append("<B>adduser <i>BUDDY</i> <ADMIN></B> (adds a user to the list, along with allowing for admin perms)\n");
        sb.append("<B>rmuser <i>BUDDY</i></B> (removes a user from the list)\n");
        sb.append("<B>denyuser <i>BUDDY</i></B> (deny a user *ADMIN ONLY*)\n");
        sb.append("<B>permituser <i>BUDDY</i></B> (permit a user *ADMIN ONLY*)\n");
        sb.append("<B>permitmode <i>[MODE]</i></B> (set or display the permitmode*ADMIN ONLY*)\n");
        return sb.toString();
    }

----------------------------------------
    public String help() {
        StringBuffer sb = new StringBuffer();
        sb
            .append("<B>mountains <i>STATE ABBREVIATION</i></B> (displays the resort codes for the specified state code)\n");
        sb.append("<B>ski <i>STATE ABBREVIATION:RESORT CODE</i></B> (displays the ski reports for the given resort)\n");
        sb
            .append("* If the preference \"mountain\" is set, you can omit the [STATE ABBREVIATION:RESORT CODE] to use your default.");
        return sb.toString();
    }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
97
22835058
src/com/levelonelabs/aimbot/modules/TVListingsModule.java 446 456
src/com/levelonelabs/aimbot/modules/SkiReportModule.java 488 498
----------------------------------------
		try {
			URLConnection conn = this.url.openConnection();
			BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));
			ParserDelegator pd = new ParserDelegator();
			pd.parse(br, this, true);

			tempResult = getResult();
			if (!foundStart || !foundEnd) {
				tempResult = "";
			}
		} catch (Exception e) {

----------------------------------------
        try {
            URLConnection conn = url.openConnection();
            BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            ParserDelegator pd = new ParserDelegator();
            pd.parse(br, this, true);

            tempResult = result;
            if (statesVisited != 6) {
                tempResult = null;
            }
        } catch (Exception e) {

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
97
22835065
src/com/levelonelabs/aimbot/modules/DefaultModule.java 96 103
src/com/levelonelabs/aimbot/modules/WeatherModule.java 104 111
----------------------------------------
    public String help() {
        StringBuffer sb=new StringBuffer();
        sb.append("Default Module\nThis will output default text if the input \n");
        sb.append("is not recognized\n");
        sb.append("<B>addTerm <i>TEXT</i></B> "+
            "(add possible lines for the module to output) *Admin only*");
        return sb.toString();
    }

----------------------------------------
    public String help() {
        StringBuffer sb=new StringBuffer();
        sb.append(
            "<B>weather <i>ZIPCODE</i></B> (displays the 5 day forcast for the specified zipcode)\n");
        sb.append(
            "* If the preference \"zipcode\" is set, you can omit the zipcode to use your default.");
        return sb.toString();
    }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
97
22835064
src/com/levelonelabs/aimbot/modules/ScheduleModule.java 156 165
src/com/levelonelabs/aimbot/modules/WeatherModule.java 104 111
----------------------------------------
    public String help() {
        StringBuffer sb = new StringBuffer();
        sb.append("<B>schedule <i>TEXT</i></B> (stores text in the system for retrieval later)\n");
        sb.append("<B>cancel <i>All or #</i></B> (removes all items or a specific item)\n");
        sb.append("<B>events</B> (lists all reminders)\n");
        sb
            .append("* If the preference \"reminderatsignon\" is set to true, you will automatically get a list when you login to aim.\n");

        return sb.toString();
    }

----------------------------------------
    public String help() {
        StringBuffer sb=new StringBuffer();
        sb.append(
            "<B>weather <i>ZIPCODE</i></B> (displays the 5 day forcast for the specified zipcode)\n");
        sb.append(
            "* If the preference \"zipcode\" is set, you can omit the zipcode to use your default.");
        return sb.toString();
    }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
97
22835061
src/com/levelonelabs/aimbot/modules/SkiReportModule.java 110 118
src/com/levelonelabs/aimbot/modules/WeatherModule.java 104 111
----------------------------------------
    public String help() {
        StringBuffer sb = new StringBuffer();
        sb
            .append("<B>mountains <i>STATE ABBREVIATION</i></B> (displays the resort codes for the specified state code)\n");
        sb.append("<B>ski <i>STATE ABBREVIATION:RESORT CODE</i></B> (displays the ski reports for the given resort)\n");
        sb
            .append("* If the preference \"mountain\" is set, you can omit the [STATE ABBREVIATION:RESORT CODE] to use your default.");
        return sb.toString();
    }

----------------------------------------
    public String help() {
        StringBuffer sb=new StringBuffer();
        sb.append(
            "<B>weather <i>ZIPCODE</i></B> (displays the 5 day forcast for the specified zipcode)\n");
        sb.append(
            "* If the preference \"zipcode\" is set, you can omit the zipcode to use your default.");
        return sb.toString();
    }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
97
22835059
src/com/levelonelabs/aimbot/modules/BuddyManagementModule.java 101 107
src/com/levelonelabs/aimbot/modules/WeatherModule.java 104 111
----------------------------------------
    public String help() {
        StringBuffer sb = new StringBuffer();
        sb.append("<B>makeusers</B> (converts all non-user buddies to users *ADMIN ONLY*)\n");
        sb.append("<B>prune buddies</B> (removes all non-user buddies *ADMIN ONLY*)\n");
        sb.append("<B>prune inactive</B> (removes \"inactive\" users *ADMIN ONLY*)\n");
        return sb.toString();
    }

----------------------------------------
    public String help() {
        StringBuffer sb=new StringBuffer();
        sb.append(
            "<B>weather <i>ZIPCODE</i></B> (displays the 5 day forcast for the specified zipcode)\n");
        sb.append(
            "* If the preference \"zipcode\" is set, you can omit the zipcode to use your default.");
        return sb.toString();
    }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
97
22835062
src/com/levelonelabs/aimbot/modules/ReminderModule.java 120 129
src/com/levelonelabs/aimbot/modules/WeatherModule.java 104 111
----------------------------------------
    public String help() {
        StringBuffer sb = new StringBuffer();
        sb.append("<B>remember <i>TEXT</i></B> (stores text in the system for retrieval later)\n");
        sb.append("<B>forget <i>All or #</i></B> (removes all items or a specific item)\n");
        sb.append("<B>remind</B> (lists all reminders)\n");
        sb
            .append("* If the preference \"reminderatsignon\" is set to true, you will automatically get a list when you login to aim.\n");

        return sb.toString();
    }

----------------------------------------
    public String help() {
        StringBuffer sb=new StringBuffer();
        sb.append(
            "<B>weather <i>ZIPCODE</i></B> (displays the 5 day forcast for the specified zipcode)\n");
        sb.append(
            "* If the preference \"zipcode\" is set, you can omit the zipcode to use your default.");
        return sb.toString();
    }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
97
22835066
src/com/levelonelabs/aimbot/modules/TVListingsModule.java 116 124
src/com/levelonelabs/aimbot/modules/WeatherModule.java 104 111
----------------------------------------
	public String help() {
		StringBuffer sb = new StringBuffer();
		sb.append("<B>tvlist <i>ZIPCODE</i></B> (displays the tv providers in the area of the zipcode)\n");
		sb.append("* If the preference \"zipcode\" is set, you can omit the zipcode to use your default.\n");
		sb
			.append("<B>tv <i>SHOW<i></B> (displays the synopsis of the next upcomming episode of the specified show in your area)\n");
		sb.append("* The preference \"tvprovider\" must be set!");
		return sb.toString();
	}

----------------------------------------
    public String help() {
        StringBuffer sb=new StringBuffer();
        sb.append(
            "<B>weather <i>ZIPCODE</i></B> (displays the 5 day forcast for the specified zipcode)\n");
        sb.append(
            "* If the preference \"zipcode\" is set, you can omit the zipcode to use your default.");
        return sb.toString();
    }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
97
22835063
src/com/levelonelabs/aimbot/modules/UserInformationModule.java 125 132
src/com/levelonelabs/aimbot/modules/WeatherModule.java 104 111
----------------------------------------
	public String help() {
		StringBuffer sb = new StringBuffer();
		sb.append("<B>history <i>USER</i></B> (displays user's recent sign on and off history)\n");
		sb.append("<B>users</B> (displays status of all users)\n");
		sb.append("A=" + AIMBot.ROLE_ADMINISTRATOR + ", M = messages pending, * = new user, E = Enemy, - = banned\n");
		sb.append("<B>enemies</B> (displays status of all enemies)\n");
		return sb.toString();
	}

----------------------------------------
    public String help() {
        StringBuffer sb=new StringBuffer();
        sb.append(
            "<B>weather <i>ZIPCODE</i></B> (displays the 5 day forcast for the specified zipcode)\n");
        sb.append(
            "* If the preference \"zipcode\" is set, you can omit the zipcode to use your default.");
        return sb.toString();
    }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
97
22835060
src/com/levelonelabs/aimbot/modules/MegaHalModule.java 158 164
src/com/levelonelabs/aimbot/modules/WeatherModule.java 104 111
----------------------------------------
	public String help() {
		StringBuffer sb = new StringBuffer();
		sb.append("<B>MEGAHAL</B> commands:\n");
		sb.append("<b>megahaladmin save</b> (saves the megahal brain *ADMIN ONLY*)\n");
		sb.append("<b>megahaladmin think <i>N</i></b>  (sets the think time to <N> seconds *ADMIN ONLY*)\n");
		return sb.toString();
	}

----------------------------------------
    public String help() {
        StringBuffer sb=new StringBuffer();
        sb.append(
            "<B>weather <i>ZIPCODE</i></B> (displays the 5 day forcast for the specified zipcode)\n");
        sb.append(
            "* If the preference \"zipcode\" is set, you can omit the zipcode to use your default.");
        return sb.toString();
    }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
97
22835067
src/com/levelonelabs/aimbot/modules/TVListingsModule.java 136 172
src/com/levelonelabs/aimbot/modules/WeatherModule.java 120 152
----------------------------------------
		if (query.trim().toLowerCase().startsWith("tvlist")) {
			StringTokenizer st = new StringTokenizer(query, " ");
			String zipPref = buddy.getPreference("zipcode");
			if ((zipPref == null) && (st.countTokens() < 2)) {
				super.sendMessage(buddy, "ERROR:\n" + help());
			} else {
				String imcommand = st.nextToken();
				String zipcode = "";
				if (st.hasMoreElements()) {
					zipcode = ((String) st.nextElement()).trim();
				} else if (zipPref != null) {
					zipcode = zipPref;
				}
				String result = "Couldn't get provider list.";
				if (zipcode.length() == 5) {
					TVProviderScraper scrapper = new TVProviderScraper(zipcode);
					Map providers = scrapper.getProviders();

					if (providers.size() > 0) {
						result = "Set the preference <b>tvprovider</b> to your providers code.\n";
						//seemed to have gotten a decent result, so display it
						for (Iterator iter = providers.keySet().iterator(); iter.hasNext();) {
							String key = (String) iter.next();
							String value = (String) providers.get(key);
							logger.fine(value + "\t use --> " + key);
							result += (value + "\t --> <b>" + key + "</b>\n");
						}
						if (zipPref == null) {
							//if the buddy didnt have a zippref set, set this
							// one for him
							buddy.setPreference("zipcode", zipcode);
						}
					}
				}
				super.sendMessage(buddy, result);
			}
		} else if (query.trim().toLowerCase().startsWith("tv")) {

----------------------------------------
    public void performService(AIMBuddy buddy, String query) {
        if(query.trim().toLowerCase().startsWith("weather")) {
            StringTokenizer st=new StringTokenizer(query, " ");
            String zipPref=buddy.getPreference("zipcode");
            if((zipPref == null) && (st.countTokens() < 2)) {
                super.sendMessage(buddy, "ERROR:\n"+help());
            } else {
                String imcommand=st.nextToken();
                String zipcode="";
                if(st.hasMoreElements()) {
                    zipcode=((String) st.nextElement()).trim();
                } else if(zipPref != null) {
                    zipcode=zipPref;
                }
                String result="Couldn't get weather information";
                if(zipcode.length() == 5) {
                    WeatherScrapper scrapper=new WeatherScrapper();
                    String temp=scrapper.getWeather(zipcode);
                    if(!temp.trim().equals("")) {
                        //seemed to have gotten a decent result, so display it
                        String mapURL=WeatherModule.MAP_URL+zipcode;
                        result="Weather for zipcode <a href=\""+mapURL+"\">"+zipcode+"</a>:\n"+temp;

                        if(zipPref == null) {
                            //if the buddy didnt have a zippref set, set this one for him
                            buddy.setPreference("zipcode", zipcode);
                        }
                    }
                }
                super.sendMessage(buddy, result);
            }
        }
    }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
97
22835073
src/com/levelonelabs/aimbot/modules/SkiReportModule.java 110 118
src/com/levelonelabs/aimbot/modules/MessengerModule.java 60 66
----------------------------------------
    public String help() {
        StringBuffer sb = new StringBuffer();
        sb
            .append("<B>mountains <i>STATE ABBREVIATION</i></B> (displays the resort codes for the specified state code)\n");
        sb.append("<B>ski <i>STATE ABBREVIATION:RESORT CODE</i></B> (displays the ski reports for the given resort)\n");
        sb
            .append("* If the preference \"mountain\" is set, you can omit the [STATE ABBREVIATION:RESORT CODE] to use your default.");
        return sb.toString();
    }

----------------------------------------
	static {
		services = new ArrayList();
		services.add("tell");
		services.add("offline");
		services.add("clear");
		services.add("show");
	}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
97
22835078
src/com/levelonelabs/aimbot/modules/ReminderModule.java 68 73
src/com/levelonelabs/aimbot/modules/MessengerModule.java 60 66
----------------------------------------
    static {
        services = new ArrayList();
        services.add("remind");
        services.add("remember");
        services.add("forget");
    }

----------------------------------------
	static {
		services = new ArrayList();
		services.add("tell");
		services.add("offline");
		services.add("clear");
		services.add("show");
	}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
97
22835075
src/com/levelonelabs/aimbot/modules/MoviesModule.java 72 77
src/com/levelonelabs/aimbot/modules/MessengerModule.java 60 66
----------------------------------------
    static {
        services=new ArrayList();
        services.add("movies");
        services.add("movieslegend");
        services.add("theaters");
    }

----------------------------------------
	static {
		services = new ArrayList();
		services.add("tell");
		services.add("offline");
		services.add("clear");
		services.add("show");
	}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
97
22835070
src/com/levelonelabs/aimbot/modules/TVListingsModule.java 116 124
src/com/levelonelabs/aimbot/modules/MessengerModule.java 60 66
----------------------------------------
	public String help() {
		StringBuffer sb = new StringBuffer();
		sb.append("<B>tvlist <i>ZIPCODE</i></B> (displays the tv providers in the area of the zipcode)\n");
		sb.append("* If the preference \"zipcode\" is set, you can omit the zipcode to use your default.\n");
		sb
			.append("<B>tv <i>SHOW<i></B> (displays the synopsis of the next upcomming episode of the specified show in your area)\n");
		sb.append("* The preference \"tvprovider\" must be set!");
		return sb.toString();
	}

----------------------------------------
	static {
		services = new ArrayList();
		services.add("tell");
		services.add("offline");
		services.add("clear");
		services.add("show");
	}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
97
22835076
src/com/levelonelabs/aimbot/modules/ScheduleModule.java 111 118
src/com/levelonelabs/aimbot/modules/MessengerModule.java 60 66
----------------------------------------
    static {
        services = new ArrayList();
        services.add("schedule");
        services.add("cancel");
        services.add("events");
        // Create the timer to handle timed reminding events
        timer = new Timer();
    }

----------------------------------------
	static {
		services = new ArrayList();
		services.add("tell");
		services.add("offline");
		services.add("clear");
		services.add("show");
	}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
97
22835071
src/com/levelonelabs/aimbot/modules/BuddyManagementModule.java 101 107
src/com/levelonelabs/aimbot/modules/MessengerModule.java 60 66
----------------------------------------
    public String help() {
        StringBuffer sb = new StringBuffer();
        sb.append("<B>makeusers</B> (converts all non-user buddies to users *ADMIN ONLY*)\n");
        sb.append("<B>prune buddies</B> (removes all non-user buddies *ADMIN ONLY*)\n");
        sb.append("<B>prune inactive</B> (removes \"inactive\" users *ADMIN ONLY*)\n");
        return sb.toString();
    }

----------------------------------------
	static {
		services = new ArrayList();
		services.add("tell");
		services.add("offline");
		services.add("clear");
		services.add("show");
	}

----------------------------------------
