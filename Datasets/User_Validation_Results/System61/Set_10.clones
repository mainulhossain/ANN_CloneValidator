$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
61
24218099
src/com/_17od/upm/gui/DatabasePropertiesDialog.java 62 75
src/com/_17od/upm/gui/OpenDatabaseFromURLDialog.java 58 71
----------------------------------------
        super(frame, Translator.translate("databaseProperties"), true);
        
        Container container = getContentPane();

        // Create a pane with an empty border for spacing
        Border emptyBorder = BorderFactory.createEmptyBorder(2, 5, 5, 5);
        JPanel emptyBorderPanel = new JPanel();
        emptyBorderPanel.setLayout(new BoxLayout(emptyBorderPanel, BoxLayout.Y_AXIS));
        emptyBorderPanel.setBorder(emptyBorder);
        container.add(emptyBorderPanel);

        // Create a pane with an title etched border
        Border etchedBorder = BorderFactory.createEtchedBorder(EtchedBorder.LOWERED);
        Border etchedTitleBorder = BorderFactory.createTitledBorder(etchedBorder, ' ' + Translator.translate("remoteLocation") + ' ');

----------------------------------------
        super(frame, Translator.translate("openDatabaseFromURL"), true);

        Container container = getContentPane();

        // Create a pane with an empty border for spacing
        Border emptyBorder = BorderFactory.createEmptyBorder(2, 5, 5, 5);
        JPanel emptyBorderPanel = new JPanel();
        emptyBorderPanel.setLayout(new BoxLayout(emptyBorderPanel, BoxLayout.Y_AXIS));
        emptyBorderPanel.setBorder(emptyBorder);
        container.add(emptyBorderPanel);

        // Create a pane with an title etched border
        Border etchedBorder = BorderFactory.createEtchedBorder(EtchedBorder.LOWERED);
        Border etchedTitleBorder = BorderFactory.createTitledBorder(etchedBorder, ' ' + Translator.translate("remoteLocation") + ' ');

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
61
24218101
src/com/_17od/upm/gui/OpenDatabaseFromURLDialog.java 58 71
src/com/_17od/upm/gui/OptionsDialog.java 88 105
----------------------------------------
        super(frame, Translator.translate("openDatabaseFromURL"), true);

        Container container = getContentPane();

        // Create a pane with an empty border for spacing
        Border emptyBorder = BorderFactory.createEmptyBorder(2, 5, 5, 5);
        JPanel emptyBorderPanel = new JPanel();
        emptyBorderPanel.setLayout(new BoxLayout(emptyBorderPanel, BoxLayout.Y_AXIS));
        emptyBorderPanel.setBorder(emptyBorder);
        container.add(emptyBorderPanel);

        // Create a pane with an title etched border
        Border etchedBorder = BorderFactory.createEtchedBorder(EtchedBorder.LOWERED);
        Border etchedTitleBorder = BorderFactory.createTitledBorder(etchedBorder, ' ' + Translator.translate("remoteLocation") + ' ');

----------------------------------------
		super(frame, Translator.translate("options"), true);

		Container container = getContentPane();

		// Create a pane with an empty border for spacing
		Border emptyBorder = BorderFactory.createEmptyBorder(2, 5, 5, 5);
		JPanel emptyBorderPanel = new JPanel();
		emptyBorderPanel.setLayout(new BoxLayout(emptyBorderPanel, BoxLayout.Y_AXIS));
		emptyBorderPanel.setBorder(emptyBorder);
		container.add(emptyBorderPanel);

		// ******************
		// *** The DB TO Load On Startup Section
		// ******************
		// Create a pane with an title etched border
		Border etchedBorder = BorderFactory.createEtchedBorder(EtchedBorder.LOWERED);
		Border etchedTitleBorder = BorderFactory.createTitledBorder(etchedBorder,
				' ' + Translator.translate("general") + ' ');

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
61
24218100
src/com/_17od/upm/gui/DatabasePropertiesDialog.java 62 75
src/com/_17od/upm/gui/OptionsDialog.java 88 105
----------------------------------------
        super(frame, Translator.translate("databaseProperties"), true);
        
        Container container = getContentPane();

        // Create a pane with an empty border for spacing
        Border emptyBorder = BorderFactory.createEmptyBorder(2, 5, 5, 5);
        JPanel emptyBorderPanel = new JPanel();
        emptyBorderPanel.setLayout(new BoxLayout(emptyBorderPanel, BoxLayout.Y_AXIS));
        emptyBorderPanel.setBorder(emptyBorder);
        container.add(emptyBorderPanel);

        // Create a pane with an title etched border
        Border etchedBorder = BorderFactory.createEtchedBorder(EtchedBorder.LOWERED);
        Border etchedTitleBorder = BorderFactory.createTitledBorder(etchedBorder, ' ' + Translator.translate("remoteLocation") + ' ');

----------------------------------------
		super(frame, Translator.translate("options"), true);

		Container container = getContentPane();

		// Create a pane with an empty border for spacing
		Border emptyBorder = BorderFactory.createEmptyBorder(2, 5, 5, 5);
		JPanel emptyBorderPanel = new JPanel();
		emptyBorderPanel.setLayout(new BoxLayout(emptyBorderPanel, BoxLayout.Y_AXIS));
		emptyBorderPanel.setBorder(emptyBorder);
		container.add(emptyBorderPanel);

		// ******************
		// *** The DB TO Load On Startup Section
		// ******************
		// Create a pane with an title etched border
		Border etchedBorder = BorderFactory.createEtchedBorder(EtchedBorder.LOWERED);
		Border etchedTitleBorder = BorderFactory.createTitledBorder(etchedBorder,
				' ' + Translator.translate("general") + ' ');

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
61
24218104
src/com/_17od/upm/gui/OptionsDialog.java 126 134
src/com/_17od/upm/gui/OpenDatabaseFromURLDialog.java 91 99
----------------------------------------
		dbToLoadOnStartup.setHorizontalAlignment(JTextField.LEFT);
		c.gridx = 0;
		c.gridy = 1;
		c.anchor = GridBagConstraints.LINE_START;
		c.insets = new Insets(0, 5, 5, 5);
		c.weightx = 1;
		c.weighty = 0;
		c.gridwidth = 1;
		c.fill = GridBagConstraints.HORIZONTAL;

----------------------------------------
        urlTextField = new JTextField(20);
        c.gridx = 0;
        c.gridy = 1;
        c.anchor = GridBagConstraints.LINE_START;
        c.insets = new Insets(0, 5, 5, 5);
        c.weightx = 1;
        c.weighty = 0;
        c.gridwidth = 1;
        c.fill = GridBagConstraints.HORIZONTAL;

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
61
24218102
src/com/_17od/upm/gui/AccountDialog.java 466 475
src/com/_17od/upm/gui/OpenDatabaseFromURLDialog.java 91 99
----------------------------------------
		hidePasswordCheckbox.setSelected(hideAccountPassword.booleanValue());

		c.gridx = 0;
		c.gridy = 1;
		c.anchor = GridBagConstraints.LINE_START;
		c.insets = new Insets(0, 0, 0, 0);
		c.weightx = 0;
		c.weighty = 0;
		c.gridwidth = 1;
		c.fill = GridBagConstraints.HORIZONTAL;

----------------------------------------
        urlTextField = new JTextField(20);
        c.gridx = 0;
        c.gridy = 1;
        c.anchor = GridBagConstraints.LINE_START;
        c.insets = new Insets(0, 5, 5, 5);
        c.weightx = 1;
        c.weighty = 0;
        c.gridwidth = 1;
        c.fill = GridBagConstraints.HORIZONTAL;

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
61
24218105
src/com/_17od/upm/transport/HTTPTransport.java 117 126
src/com/_17od/upm/transport/HTTPTransport.java 179 187
----------------------------------------
            if (username != null) {
                Credentials creds = new UsernamePasswordCredentials(new String(username), new String(password));
                URL url = new URL(targetLocation);
                AuthScope authScope = new AuthScope(url.getHost(), url.getPort());
                client.getState().setCredentials(authScope, creds);
                client.getParams().setAuthenticationPreemptive(true);
            }

            // This line makes the HTTP call
            int status = client.executeMethod(post);

----------------------------------------
            if (username != null) {
                Credentials creds = new UsernamePasswordCredentials(new String(username), new String(password));
                URL urlObj = new URL(url);
                AuthScope authScope = new AuthScope(urlObj.getHost(), urlObj.getPort());
                client.getState().setCredentials(authScope, creds);
                client.getParams().setAuthenticationPreemptive(true);
            }

            int statusCode = client.executeMethod(method);

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
61
24218106
src/com/_17od/upm/transport/HTTPTransport.java 117 130
src/com/_17od/upm/transport/HTTPTransport.java 252 261
----------------------------------------
            if (username != null) {
                Credentials creds = new UsernamePasswordCredentials(new String(username), new String(password));
                URL url = new URL(targetLocation);
                AuthScope authScope = new AuthScope(url.getHost(), url.getPort());
                client.getState().setCredentials(authScope, creds);
                client.getParams().setAuthenticationPreemptive(true);
            }

            // This line makes the HTTP call
            int status = client.executeMethod(post);
            
            // I've noticed on Windows (at least) that PHP seems to fail when moving files on the first attempt
            // The second attempt works so lets just do that
            if (status == HttpStatus.SC_OK && post.getResponseBodyAsString().equals("FILE_WASNT_MOVED")) {

----------------------------------------
            if (username != null) {
                Credentials creds = new UsernamePasswordCredentials(new String(username), new String(password));
                URL url = new URL(targetLocation);
                AuthScope authScope = new AuthScope(url.getHost(), url.getPort());
                client.getState().setCredentials(authScope, creds);
                client.getParams().setAuthenticationPreemptive(true);
            }

            int status = client.executeMethod(post);
            if (status != HttpStatus.SC_OK) {

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
61
24218107
src/com/_17od/upm/transport/HTTPTransport.java 135 154
src/com/_17od/upm/transport/HTTPTransport.java 262 279
----------------------------------------
                throw new TransportException("There's been some kind of problem uploading a file to the HTTP server.\n\nThe HTTP error message is [" + HttpStatus.getStatusText(status) + "]");
            }
            
            if (!post.getResponseBodyAsString().equals("OK") ) {
                throw new TransportException("There's been some kind of problem uploading a file to the HTTP server.\n\nThe error message is [" + post.getResponseBodyAsString() + "]");
            }
            
        } catch (FileNotFoundException e) {
            throw new TransportException(e);
        } catch (MalformedURLException e) {
            throw new TransportException(e);
        } catch (HttpException e) {
            throw new TransportException(e);
        } catch (IOException e) {
            throw new TransportException(e);
        } finally {
            post.releaseConnection();
        }
        
    }

----------------------------------------
                throw new TransportException("There's been some kind of problem deleting a file on the HTTP server.\n\nThe HTTP error message is [" + HttpStatus.getStatusText(status) + "]");
            }
            
            if (!post.getResponseBodyAsString().equals("OK") ) {
                throw new TransportException("There's been some kind of problem deleting a file to the HTTP server.\n\nThe error message is [" + post.getResponseBodyAsString() + "]");
            }

        } catch (MalformedURLException e) {
            throw new TransportException(e);
        } catch (HttpException e) {
            throw new TransportException(e);
        } catch (IOException e) {
            throw new TransportException(e);
        } finally {
            post.releaseConnection();
        }

    }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
61
24218108
src/com/_17od/upm/transport/HTTPTransport.java 172 187
src/com/_17od/upm/transport/HTTPTransport.java 245 260
----------------------------------------
        GetMethod method = new GetMethod(url);
        
        //This part is wrapped in a try/finally so that we can ensure
        //the connection to the HTTP server is always closed cleanly 
        try {

            //Set the authentication details
            if (username != null) {
                Credentials creds = new UsernamePasswordCredentials(new String(username), new String(password));
                URL urlObj = new URL(url);
                AuthScope authScope = new AuthScope(urlObj.getHost(), urlObj.getPort());
                client.getState().setCredentials(authScope, creds);
                client.getParams().setAuthenticationPreemptive(true);
            }

            int statusCode = client.executeMethod(method);

----------------------------------------
        post.addParameter("fileToDelete", name);

        //This part is wrapped in a try/finally so that we can ensure
        //the connection to the HTTP server is always closed cleanly 
        try {

            //Set the authentication details
            if (username != null) {
                Credentials creds = new UsernamePasswordCredentials(new String(username), new String(password));
                URL url = new URL(targetLocation);
                AuthScope authScope = new AuthScope(url.getHost(), url.getPort());
                client.getState().setCredentials(authScope, creds);
                client.getParams().setAuthenticationPreemptive(true);
            }

            int status = client.executeMethod(post);

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
61
24218116
src/com/_17od/upm/gui/AccountDialog.java 162 186
src/com/_17od/upm/gui/AccountDialog.java 247 271
----------------------------------------
		c.gridy = 0;
		c.anchor = GridBagConstraints.LINE_START;
		c.insets = new Insets(10, 10, 10, 10);
		c.weightx = 0;
		c.weighty = 0;
		c.gridwidth = 1;
		c.fill = GridBagConstraints.NONE;
		container.add(accountLabel, c);

		// This panel will hold the Account field and the copy and paste
		// buttons.
		JPanel accountPanel = new JPanel(new GridBagLayout());

		accountName = new JTextField(new String(pAccount.getAccountName()), 20);
		if (readOnly) {
			accountName.setEditable(false);
		}
		c.gridx = 0;
		c.gridy = 0;
		c.anchor = GridBagConstraints.LINE_START;
		c.insets = new Insets(0, 0, 0, 5);
		c.weightx = 1;
		c.weighty = 1;
		c.gridwidth = 1;
		c.fill = GridBagConstraints.HORIZONTAL;

----------------------------------------
		c.gridy = 1;
		c.anchor = GridBagConstraints.LINE_START;
		c.insets = new Insets(10, 10, 10, 10);
		c.weightx = 0;
		c.weighty = 0;
		c.gridwidth = 1;
		c.fill = GridBagConstraints.NONE;
		container.add(useridLabel, c);

		// This panel will hold the User ID field and the copy and paste
		// buttons.
		JPanel idPanel = new JPanel(new GridBagLayout());

		userId = new JTextField(new String(pAccount.getUserId()), 20);
		if (readOnly) {
			userId.setEditable(false);
		}
		c.gridx = 0;
		c.gridy = 0;
		c.anchor = GridBagConstraints.LINE_START;
		c.insets = new Insets(0, 0, 0, 5);
		c.weightx = 1;
		c.weighty = 1;
		c.gridwidth = 1;
		c.fill = GridBagConstraints.HORIZONTAL;

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
61
24218118
src/com/_17od/upm/gui/AccountDialog.java 247 271
src/com/_17od/upm/gui/AccountDialog.java 491 514
----------------------------------------
		c.gridy = 1;
		c.anchor = GridBagConstraints.LINE_START;
		c.insets = new Insets(10, 10, 10, 10);
		c.weightx = 0;
		c.weighty = 0;
		c.gridwidth = 1;
		c.fill = GridBagConstraints.NONE;
		container.add(useridLabel, c);

		// This panel will hold the User ID field and the copy and paste
		// buttons.
		JPanel idPanel = new JPanel(new GridBagLayout());

		userId = new JTextField(new String(pAccount.getUserId()), 20);
		if (readOnly) {
			userId.setEditable(false);
		}
		c.gridx = 0;
		c.gridy = 0;
		c.anchor = GridBagConstraints.LINE_START;
		c.insets = new Insets(0, 0, 0, 5);
		c.weightx = 1;
		c.weighty = 1;
		c.gridwidth = 1;
		c.fill = GridBagConstraints.HORIZONTAL;

----------------------------------------
		c.gridy = 3;
		c.anchor = GridBagConstraints.LINE_START;
		c.insets = new Insets(10, 10, 10, 10);
		c.weightx = 0;
		c.weighty = 0;
		c.gridwidth = 1;
		c.fill = GridBagConstraints.NONE;
		container.add(urlLabel, c);

		// This panel will hold the URL field and the copy and paste buttons.
		JPanel urlPanel = new JPanel(new GridBagLayout());

		url = new JTextField(new String(pAccount.getUrl()), 20);
		if (readOnly) {
			url.setEditable(false);
		}
		c.gridx = 0;
		c.gridy = 0;
		c.anchor = GridBagConstraints.LINE_START;
		c.insets = new Insets(0, 0, 0, 5);
		c.weightx = 1;
		c.weighty = 1;
		c.gridwidth = 1;
		c.fill = GridBagConstraints.HORIZONTAL;

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
61
24218117
src/com/_17od/upm/gui/AccountDialog.java 162 186
src/com/_17od/upm/gui/AccountDialog.java 491 514
----------------------------------------
		c.gridy = 0;
		c.anchor = GridBagConstraints.LINE_START;
		c.insets = new Insets(10, 10, 10, 10);
		c.weightx = 0;
		c.weighty = 0;
		c.gridwidth = 1;
		c.fill = GridBagConstraints.NONE;
		container.add(accountLabel, c);

		// This panel will hold the Account field and the copy and paste
		// buttons.
		JPanel accountPanel = new JPanel(new GridBagLayout());

		accountName = new JTextField(new String(pAccount.getAccountName()), 20);
		if (readOnly) {
			accountName.setEditable(false);
		}
		c.gridx = 0;
		c.gridy = 0;
		c.anchor = GridBagConstraints.LINE_START;
		c.insets = new Insets(0, 0, 0, 5);
		c.weightx = 1;
		c.weighty = 1;
		c.gridwidth = 1;
		c.fill = GridBagConstraints.HORIZONTAL;

----------------------------------------
		c.gridy = 3;
		c.anchor = GridBagConstraints.LINE_START;
		c.insets = new Insets(10, 10, 10, 10);
		c.weightx = 0;
		c.weighty = 0;
		c.gridwidth = 1;
		c.fill = GridBagConstraints.NONE;
		container.add(urlLabel, c);

		// This panel will hold the URL field and the copy and paste buttons.
		JPanel urlPanel = new JPanel(new GridBagLayout());

		url = new JTextField(new String(pAccount.getUrl()), 20);
		if (readOnly) {
			url.setEditable(false);
		}
		c.gridx = 0;
		c.gridy = 0;
		c.anchor = GridBagConstraints.LINE_START;
		c.insets = new Insets(0, 0, 0, 5);
		c.weightx = 1;
		c.weighty = 1;
		c.gridwidth = 1;
		c.fill = GridBagConstraints.HORIZONTAL;

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
61
24218120
src/com/_17od/upm/gui/AccountDialog.java 549 558
src/com/_17od/upm/gui/AccountDialog.java 202 211
----------------------------------------
			}
		});
		c.gridx = 1;
		c.gridy = 0;
		c.anchor = GridBagConstraints.LINE_START;
		c.insets = new Insets(0, 0, 0, 5);
		c.weightx = 0;
		c.weighty = 0;
		c.gridwidth = 1;
		c.fill = GridBagConstraints.NONE;

----------------------------------------
			}
		});
		c.gridx = 1;
		c.gridy = 0;
		c.anchor = GridBagConstraints.LINE_START;
		c.insets = new Insets(0, 0, 0, 5);
		c.weightx = 0;
		c.weighty = 0;
		c.gridwidth = 1;
		c.fill = GridBagConstraints.NONE;

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
61
24218121
src/com/_17od/upm/gui/AccountDialog.java 549 558
src/com/_17od/upm/gui/AccountDialog.java 287 296
----------------------------------------
			}
		});
		c.gridx = 1;
		c.gridy = 0;
		c.anchor = GridBagConstraints.LINE_START;
		c.insets = new Insets(0, 0, 0, 5);
		c.weightx = 0;
		c.weighty = 0;
		c.gridwidth = 1;
		c.fill = GridBagConstraints.NONE;

----------------------------------------
			}
		});
		c.gridx = 1;
		c.gridy = 0;
		c.anchor = GridBagConstraints.LINE_START;
		c.insets = new Insets(0, 0, 0, 5);
		c.weightx = 0;
		c.weighty = 0;
		c.gridwidth = 1;
		c.fill = GridBagConstraints.NONE;

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
61
24218119
src/com/_17od/upm/gui/AccountDialog.java 202 211
src/com/_17od/upm/gui/AccountDialog.java 287 296
----------------------------------------
			}
		});
		c.gridx = 1;
		c.gridy = 0;
		c.anchor = GridBagConstraints.LINE_START;
		c.insets = new Insets(0, 0, 0, 5);
		c.weightx = 0;
		c.weighty = 0;
		c.gridwidth = 1;
		c.fill = GridBagConstraints.NONE;

----------------------------------------
			}
		});
		c.gridx = 1;
		c.gridy = 0;
		c.anchor = GridBagConstraints.LINE_START;
		c.insets = new Insets(0, 0, 0, 5);
		c.weightx = 0;
		c.weighty = 0;
		c.gridwidth = 1;
		c.fill = GridBagConstraints.NONE;

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
61
24218122
src/com/_17od/upm/gui/AccountDialog.java 201 211
src/com/_17od/upm/gui/AccountDialog.java 651 661
----------------------------------------
				copyTextField(accountName);
			}
		});
		c.gridx = 1;
		c.gridy = 0;
		c.anchor = GridBagConstraints.LINE_START;
		c.insets = new Insets(0, 0, 0, 5);
		c.weightx = 0;
		c.weighty = 0;
		c.gridwidth = 1;
		c.fill = GridBagConstraints.NONE;

----------------------------------------
				copyTextArea(notes);
			}
		});
		c.gridx = 1;
		c.gridy = 0;
		c.anchor = GridBagConstraints.FIRST_LINE_START;
		c.insets = new Insets(0, 0, 0, 5);
		c.weightx = 0;
		c.weighty = 0;
		c.gridwidth = 1;
		c.fill = GridBagConstraints.NONE;

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
61
24218123
src/com/_17od/upm/gui/AccountDialog.java 286 296
src/com/_17od/upm/gui/AccountDialog.java 651 661
----------------------------------------
				copyTextField(userId);
			}
		});
		c.gridx = 1;
		c.gridy = 0;
		c.anchor = GridBagConstraints.LINE_START;
		c.insets = new Insets(0, 0, 0, 5);
		c.weightx = 0;
		c.weighty = 0;
		c.gridwidth = 1;
		c.fill = GridBagConstraints.NONE;

----------------------------------------
				copyTextArea(notes);
			}
		});
		c.gridx = 1;
		c.gridy = 0;
		c.anchor = GridBagConstraints.FIRST_LINE_START;
		c.insets = new Insets(0, 0, 0, 5);
		c.weightx = 0;
		c.weighty = 0;
		c.gridwidth = 1;
		c.fill = GridBagConstraints.NONE;

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
61
24218125
src/com/_17od/upm/gui/AccountDialog.java 306 327
src/com/_17od/upm/gui/AccountDialog.java 671 692
----------------------------------------
				pasteToTextField(userId);
			}
		});
		c.gridx = 2;
		c.gridy = 0;
		c.anchor = GridBagConstraints.LINE_START;
		c.insets = new Insets(0, 0, 0, 5);
		c.weightx = 0;
		c.weighty = 0;
		c.gridwidth = 1;
		c.fill = GridBagConstraints.NONE;
		idPanel.add(idPasteButton, c);

		c.gridx = 1;
		c.gridy = 1;
		c.anchor = GridBagConstraints.LINE_START;
		c.insets = new Insets(10, 10, 10, 10);
		c.weightx = 1;
		c.weighty = 1;
		c.gridwidth = 1;
		c.fill = GridBagConstraints.HORIZONTAL;
		container.add(idPanel, c);

----------------------------------------
				pasteToTextArea(notes);
			}
		});
		c.gridx = 2;
		c.gridy = 0;
		c.anchor = GridBagConstraints.FIRST_LINE_START;
		c.insets = new Insets(0, 0, 0, 5);
		c.weightx = 0;
		c.weighty = 0;
		c.gridwidth = 1;
		c.fill = GridBagConstraints.NONE;
		notesPanel.add(notesPasteButton, c);

		c.gridx = 1;
		c.gridy = 4;
		c.anchor = GridBagConstraints.LINE_START;
		c.insets = new Insets(10, 10, 10, 10);
		c.weightx = 1;
		c.weighty = 1;
		c.gridwidth = 1;
		c.fill = GridBagConstraints.HORIZONTAL;
		container.add(notesPanel, c);

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
61
24218124
src/com/_17od/upm/gui/AccountDialog.java 221 242
src/com/_17od/upm/gui/AccountDialog.java 671 692
----------------------------------------
				pasteToTextField(accountName);
			}
		});
		c.gridx = 2;
		c.gridy = 0;
		c.anchor = GridBagConstraints.LINE_START;
		c.insets = new Insets(0, 0, 0, 5);
		c.weightx = 0;
		c.weighty = 0;
		c.gridwidth = 1;
		c.fill = GridBagConstraints.NONE;
		accountPanel.add(acctPasteButton, c);

		c.gridx = 1;
		c.gridy = 0;
		c.anchor = GridBagConstraints.LINE_START;
		c.insets = new Insets(10, 10, 10, 10);
		c.weightx = 1;
		c.weighty = 1;
		c.gridwidth = 1;
		c.fill = GridBagConstraints.HORIZONTAL;
		container.add(accountPanel, c);

----------------------------------------
				pasteToTextArea(notes);
			}
		});
		c.gridx = 2;
		c.gridy = 0;
		c.anchor = GridBagConstraints.FIRST_LINE_START;
		c.insets = new Insets(0, 0, 0, 5);
		c.weightx = 0;
		c.weighty = 0;
		c.gridwidth = 1;
		c.fill = GridBagConstraints.NONE;
		notesPanel.add(notesPasteButton, c);

		c.gridx = 1;
		c.gridy = 4;
		c.anchor = GridBagConstraints.LINE_START;
		c.insets = new Insets(10, 10, 10, 10);
		c.weightx = 1;
		c.weighty = 1;
		c.gridwidth = 1;
		c.fill = GridBagConstraints.HORIZONTAL;
		container.add(notesPanel, c);

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
61
24218126
src/com/_17od/upm/gui/AccountDialog.java 551 559
src/com/_17od/upm/gui/AccountDialog.java 571 579
----------------------------------------
		c.gridx = 1;
		c.gridy = 0;
		c.anchor = GridBagConstraints.LINE_START;
		c.insets = new Insets(0, 0, 0, 5);
		c.weightx = 0;
		c.weighty = 0;
		c.gridwidth = 1;
		c.fill = GridBagConstraints.NONE;
		urlPanel.add(urlLaunchButton, c);

----------------------------------------
		c.gridx = 2;
		c.gridy = 0;
		c.anchor = GridBagConstraints.LINE_START;
		c.insets = new Insets(0, 0, 0, 5);
		c.weightx = 0;
		c.weighty = 0;
		c.gridwidth = 1;
		c.fill = GridBagConstraints.NONE;
		urlPanel.add(urlCopyButton, c);

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
61
24218128
src/com/_17od/upm/gui/AccountDialog.java 571 579
src/com/_17od/upm/gui/AccountDialog.java 591 599
----------------------------------------
		c.gridx = 2;
		c.gridy = 0;
		c.anchor = GridBagConstraints.LINE_START;
		c.insets = new Insets(0, 0, 0, 5);
		c.weightx = 0;
		c.weighty = 0;
		c.gridwidth = 1;
		c.fill = GridBagConstraints.NONE;
		urlPanel.add(urlCopyButton, c);

----------------------------------------
		c.gridx = 3;
		c.gridy = 0;
		c.anchor = GridBagConstraints.LINE_START;
		c.insets = new Insets(0, 0, 0, 5);
		c.weightx = 0;
		c.weighty = 0;
		c.gridwidth = 1;
		c.fill = GridBagConstraints.NONE;
		urlPanel.add(urlPasteButton, c);

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
61
24218127
src/com/_17od/upm/gui/AccountDialog.java 551 559
src/com/_17od/upm/gui/AccountDialog.java 591 599
----------------------------------------
		c.gridx = 1;
		c.gridy = 0;
		c.anchor = GridBagConstraints.LINE_START;
		c.insets = new Insets(0, 0, 0, 5);
		c.weightx = 0;
		c.weighty = 0;
		c.gridwidth = 1;
		c.fill = GridBagConstraints.NONE;
		urlPanel.add(urlLaunchButton, c);

----------------------------------------
		c.gridx = 3;
		c.gridy = 0;
		c.anchor = GridBagConstraints.LINE_START;
		c.insets = new Insets(0, 0, 0, 5);
		c.weightx = 0;
		c.weighty = 0;
		c.gridwidth = 1;
		c.fill = GridBagConstraints.NONE;
		urlPanel.add(urlPasteButton, c);

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
61
24218147
src/com/_17od/upm/gui/OptionsDialog.java 115 121
src/com/_17od/upm/gui/OptionsDialog.java 156 162
----------------------------------------
		c.gridy = 0;
		c.anchor = GridBagConstraints.LINE_START;
		c.insets = new Insets(0, 5, 3, 0);
		c.weightx = 1;
		c.weighty = 0;
		c.gridwidth = 2;
		c.fill = GridBagConstraints.NONE;

----------------------------------------
		c.gridy = 2;
		c.anchor = GridBagConstraints.LINE_START;
		c.insets = new Insets(0, 5, 3, 0);
		c.weightx = 1;
		c.weighty = 0;
		c.gridwidth = 2;
		c.fill = GridBagConstraints.NONE;

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
61
24218148
src/com/_17od/upm/gui/OptionsDialog.java 115 121
src/com/_17od/upm/gui/OptionsDialog.java 373 379
----------------------------------------
		c.gridy = 0;
		c.anchor = GridBagConstraints.LINE_START;
		c.insets = new Insets(0, 5, 3, 0);
		c.weightx = 1;
		c.weighty = 0;
		c.gridwidth = 2;
		c.fill = GridBagConstraints.NONE;

----------------------------------------
		c.gridy = 1;
		c.anchor = GridBagConstraints.LINE_START;
		c.insets = new Insets(0, 5, 3, 0);
		c.weightx = 1;
		c.weighty = 0;
		c.gridwidth = 2;
		c.fill = GridBagConstraints.NONE;

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
61
24218151
src/com/_17od/upm/gui/OptionsDialog.java 156 162
src/com/_17od/upm/gui/OptionsDialog.java 373 379
----------------------------------------
		c.gridy = 2;
		c.anchor = GridBagConstraints.LINE_START;
		c.insets = new Insets(0, 5, 3, 0);
		c.weightx = 1;
		c.weighty = 0;
		c.gridwidth = 2;
		c.fill = GridBagConstraints.NONE;

----------------------------------------
		c.gridy = 1;
		c.anchor = GridBagConstraints.LINE_START;
		c.insets = new Insets(0, 5, 3, 0);
		c.weightx = 1;
		c.weighty = 0;
		c.gridwidth = 2;
		c.fill = GridBagConstraints.NONE;

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
61
24218149
src/com/_17od/upm/gui/OptionsDialog.java 115 121
src/com/_17od/upm/gui/OptionsDialog.java 420 426
----------------------------------------
		c.gridy = 0;
		c.anchor = GridBagConstraints.LINE_START;
		c.insets = new Insets(0, 5, 3, 0);
		c.weightx = 1;
		c.weighty = 0;
		c.gridwidth = 2;
		c.fill = GridBagConstraints.NONE;

----------------------------------------
		c.gridy = 3;
		c.anchor = GridBagConstraints.LINE_START;
		c.insets = new Insets(0, 5, 3, 0);
		c.weightx = 1;
		c.weighty = 0;
		c.gridwidth = 2;
		c.fill = GridBagConstraints.NONE;

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
61
24218152
src/com/_17od/upm/gui/OptionsDialog.java 156 162
src/com/_17od/upm/gui/OptionsDialog.java 420 426
----------------------------------------
		c.gridy = 2;
		c.anchor = GridBagConstraints.LINE_START;
		c.insets = new Insets(0, 5, 3, 0);
		c.weightx = 1;
		c.weighty = 0;
		c.gridwidth = 2;
		c.fill = GridBagConstraints.NONE;

----------------------------------------
		c.gridy = 3;
		c.anchor = GridBagConstraints.LINE_START;
		c.insets = new Insets(0, 5, 3, 0);
		c.weightx = 1;
		c.weighty = 0;
		c.gridwidth = 2;
		c.fill = GridBagConstraints.NONE;

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
61
24218154
src/com/_17od/upm/gui/OptionsDialog.java 373 379
src/com/_17od/upm/gui/OptionsDialog.java 420 426
----------------------------------------
		c.gridy = 1;
		c.anchor = GridBagConstraints.LINE_START;
		c.insets = new Insets(0, 5, 3, 0);
		c.weightx = 1;
		c.weighty = 0;
		c.gridwidth = 2;
		c.fill = GridBagConstraints.NONE;

----------------------------------------
		c.gridy = 3;
		c.anchor = GridBagConstraints.LINE_START;
		c.insets = new Insets(0, 5, 3, 0);
		c.weightx = 1;
		c.weighty = 0;
		c.gridwidth = 2;
		c.fill = GridBagConstraints.NONE;

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
61
24218156
src/com/_17od/upm/gui/OptionsDialog.java 420 426
src/com/_17od/upm/gui/OptionsDialog.java 444 450
----------------------------------------
		c.gridy = 3;
		c.anchor = GridBagConstraints.LINE_START;
		c.insets = new Insets(0, 5, 3, 0);
		c.weightx = 1;
		c.weighty = 0;
		c.gridwidth = 2;
		c.fill = GridBagConstraints.NONE;

----------------------------------------
		c.gridy = 5;
		c.anchor = GridBagConstraints.LINE_START;
		c.insets = new Insets(0, 5, 3, 0);
		c.weightx = 1;
		c.weighty = 0;
		c.gridwidth = 2;
		c.fill = GridBagConstraints.NONE;

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
61
24218155
src/com/_17od/upm/gui/OptionsDialog.java 373 379
src/com/_17od/upm/gui/OptionsDialog.java 444 450
----------------------------------------
		c.gridy = 1;
		c.anchor = GridBagConstraints.LINE_START;
		c.insets = new Insets(0, 5, 3, 0);
		c.weightx = 1;
		c.weighty = 0;
		c.gridwidth = 2;
		c.fill = GridBagConstraints.NONE;

----------------------------------------
		c.gridy = 5;
		c.anchor = GridBagConstraints.LINE_START;
		c.insets = new Insets(0, 5, 3, 0);
		c.weightx = 1;
		c.weighty = 0;
		c.gridwidth = 2;
		c.fill = GridBagConstraints.NONE;

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
61
24218153
src/com/_17od/upm/gui/OptionsDialog.java 156 162
src/com/_17od/upm/gui/OptionsDialog.java 444 450
----------------------------------------
		c.gridy = 2;
		c.anchor = GridBagConstraints.LINE_START;
		c.insets = new Insets(0, 5, 3, 0);
		c.weightx = 1;
		c.weighty = 0;
		c.gridwidth = 2;
		c.fill = GridBagConstraints.NONE;

----------------------------------------
		c.gridy = 5;
		c.anchor = GridBagConstraints.LINE_START;
		c.insets = new Insets(0, 5, 3, 0);
		c.weightx = 1;
		c.weighty = 0;
		c.gridwidth = 2;
		c.fill = GridBagConstraints.NONE;

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
61
24218150
src/com/_17od/upm/gui/OptionsDialog.java 115 121
src/com/_17od/upm/gui/OptionsDialog.java 444 450
----------------------------------------
		c.gridy = 0;
		c.anchor = GridBagConstraints.LINE_START;
		c.insets = new Insets(0, 5, 3, 0);
		c.weightx = 1;
		c.weighty = 0;
		c.gridwidth = 2;
		c.fill = GridBagConstraints.NONE;

----------------------------------------
		c.gridy = 5;
		c.anchor = GridBagConstraints.LINE_START;
		c.insets = new Insets(0, 5, 3, 0);
		c.weightx = 1;
		c.weighty = 0;
		c.gridwidth = 2;
		c.fill = GridBagConstraints.NONE;

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
61
24218157
src/com/_17od/upm/gui/DatabaseActions.java 106 116
src/com/_17od/upm/gui/DatabaseActions.java 350 360
----------------------------------------
            JPasswordField confirmedMasterPassword = new JPasswordField("");
            JOptionPane pane = new JOptionPane(new Object[] {Translator.translate("enterMasterPassword"), masterPassword, Translator.translate("confirmation"), confirmedMasterPassword}, JOptionPane.QUESTION_MESSAGE, JOptionPane.OK_CANCEL_OPTION);
            JDialog dialog = pane.createDialog(mainWindow, Translator.translate("masterPassword"));
            dialog.addWindowFocusListener(new WindowAdapter() {
                public void windowGainedFocus(WindowEvent e) {
                    masterPassword.requestFocusInWindow();
                }
            });
            dialog.show();

            if (pane.getValue().equals(new Integer(JOptionPane.OK_OPTION))) {

----------------------------------------
        final JPasswordField masterPassword = new JPasswordField("");
        JOptionPane pane = new JOptionPane(new Object[] {message, masterPassword }, JOptionPane.QUESTION_MESSAGE, JOptionPane.OK_CANCEL_OPTION);
        JDialog dialog = pane.createDialog(mainWindow, Translator.translate("masterPassword"));
        dialog.addWindowFocusListener(new WindowAdapter() {
            public void windowGainedFocus(WindowEvent e) {
                masterPassword.requestFocusInWindow();
            }
        });
        dialog.show();

        if (pane.getValue() != null && pane.getValue().equals(new Integer(JOptionPane.OK_OPTION))) {

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
61
24218158
src/com/_17od/upm/gui/DatabaseActions.java 102 122
src/com/_17od/upm/gui/DatabaseActions.java 181 205
----------------------------------------
        boolean passwordsMatch = false;
        do {

            //Get a new master password for this database from the user
            JPasswordField confirmedMasterPassword = new JPasswordField("");
            JOptionPane pane = new JOptionPane(new Object[] {Translator.translate("enterMasterPassword"), masterPassword, Translator.translate("confirmation"), confirmedMasterPassword}, JOptionPane.QUESTION_MESSAGE, JOptionPane.OK_CANCEL_OPTION);
            JDialog dialog = pane.createDialog(mainWindow, Translator.translate("masterPassword"));
            dialog.addWindowFocusListener(new WindowAdapter() {
                public void windowGainedFocus(WindowEvent e) {
                    masterPassword.requestFocusInWindow();
                }
            });
            dialog.show();

            if (pane.getValue().equals(new Integer(JOptionPane.OK_OPTION))) {
                if (!Arrays.equals(masterPassword.getPassword(), confirmedMasterPassword.getPassword())) {
                    JOptionPane.showMessageDialog(mainWindow, Translator.translate("passwordsDontMatch"));
                } else {
                    passwordsMatch = true;
                }
            } else {

----------------------------------------
                    Object buttonClicked;

                    //Ask the user for the new master password
                    //This loop will continue until the two passwords entered match or until the user hits the cancel button
                    do {


                        JPasswordField confirmedMasterPassword = new JPasswordField("");
                        JOptionPane pane = new JOptionPane(new Object[] {Translator.translate("enterNewMasterPassword"), masterPassword, Translator.translate("confirmation"), confirmedMasterPassword}, JOptionPane.QUESTION_MESSAGE, JOptionPane.OK_CANCEL_OPTION);
                        JDialog dialog = pane.createDialog(mainWindow, Translator.translate("changeMasterPassword"));
                        dialog.addWindowFocusListener(new WindowAdapter() {
                            public void windowGainedFocus(WindowEvent e) {
                                masterPassword.requestFocusInWindow();
                            }
                        });
                        dialog.show();

                        buttonClicked = pane.getValue();
                        if (buttonClicked.equals(new Integer(JOptionPane.OK_OPTION))) {
                            if (!Arrays.equals(masterPassword.getPassword(), confirmedMasterPassword.getPassword())) {
                                JOptionPane.showMessageDialog(mainWindow, Translator.translate("passwordsDontMatch"));
                            } else {
                                passwordsMatch = true;
                            }
                        }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
61
24218159
src/com/_17od/upm/gui/DatabaseActions.java 188 196
src/com/_17od/upm/gui/DatabaseActions.java 350 358
----------------------------------------
                        JPasswordField confirmedMasterPassword = new JPasswordField("");
                        JOptionPane pane = new JOptionPane(new Object[] {Translator.translate("enterNewMasterPassword"), masterPassword, Translator.translate("confirmation"), confirmedMasterPassword}, JOptionPane.QUESTION_MESSAGE, JOptionPane.OK_CANCEL_OPTION);
                        JDialog dialog = pane.createDialog(mainWindow, Translator.translate("changeMasterPassword"));
                        dialog.addWindowFocusListener(new WindowAdapter() {
                            public void windowGainedFocus(WindowEvent e) {
                                masterPassword.requestFocusInWindow();
                            }
                        });
                        dialog.show();

----------------------------------------
        final JPasswordField masterPassword = new JPasswordField("");
        JOptionPane pane = new JOptionPane(new Object[] {message, masterPassword }, JOptionPane.QUESTION_MESSAGE, JOptionPane.OK_CANCEL_OPTION);
        JDialog dialog = pane.createDialog(mainWindow, Translator.translate("masterPassword"));
        dialog.addWindowFocusListener(new WindowAdapter() {
            public void windowGainedFocus(WindowEvent e) {
                masterPassword.requestFocusInWindow();
            }
        });
        dialog.show();

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
61
24218160
src/com/_17od/upm/gui/DatabaseActions.java 250 261
src/com/_17od/upm/gui/DatabaseActions.java 596 607
----------------------------------------
        mainWindow.getEditAccountButton().setEnabled(false);
        mainWindow.getCopyUsernameButton().setEnabled(false);
        mainWindow.getCopyPasswordButton().setEnabled(false);
        mainWindow.getLaunchURLButton().setEnabled(false);
        mainWindow.getDeleteAccountButton().setEnabled(false);
        mainWindow.getEditAccountMenuItem().setEnabled(false);
        mainWindow.getCopyUsernameMenuItem().setEnabled(false);
        mainWindow.getCopyPasswordMenuItem().setEnabled(false);
        mainWindow.getLaunchURLMenuItem().setEnabled(false);
        mainWindow.getDeleteAccountMenuItem().setEnabled(false);
        mainWindow.getViewAccountMenuItem().setEnabled(false);
    }

----------------------------------------
            mainWindow.getEditAccountButton().setEnabled(false);
            mainWindow.getCopyUsernameButton().setEnabled(false);
            mainWindow.getCopyPasswordButton().setEnabled(false);
            mainWindow.getLaunchURLButton().setEnabled(false);
            mainWindow.getDeleteAccountButton().setEnabled(false);
            mainWindow.getEditAccountMenuItem().setEnabled(false);
            mainWindow.getCopyUsernameMenuItem().setEnabled(false);
            mainWindow.getCopyPasswordMenuItem().setEnabled(false);
            mainWindow.getLaunchURLMenuItem().setEnabled(false);
            mainWindow.getDeleteAccountMenuItem().setEnabled(false);
            mainWindow.getViewAccountMenuItem().setEnabled(false);
        } else {

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
61
28730860
src/com/_17od/upm/gui/DatabaseActions.java 230 261
src/com/_17od/upm/gui/DatabaseActions.java 595 607
----------------------------------------
    private void doCloseDatabaseActions() {
        mainWindow.getAddAccountButton().setEnabled(false);
        mainWindow.getAddAccountMenuItem().setEnabled(false);
        mainWindow.getSearchField().setEnabled(false);
        mainWindow.getSearchField().setText("");
        mainWindow.getSearchIcon().setEnabled(false);
        mainWindow.getResetSearchButton().setEnabled(false);
        mainWindow.getChangeMasterPasswordMenuItem().setEnabled(false);
        mainWindow.getDatabasePropertiesMenuItem().setEnabled(false);
        mainWindow.getExportMenuItem().setEnabled(false);
        mainWindow.getImportMenuItem().setEnabled(false);

        mainWindow.setTitle(MainWindow.getApplicationName());

        mainWindow.getStatusBar().setText("");
        databaseNeedsReload = false;

        SortedListModel listview = (SortedListModel) mainWindow.getAccountsListview().getModel();
        listview.clear();

        mainWindow.getEditAccountButton().setEnabled(false);
        mainWindow.getCopyUsernameButton().setEnabled(false);
        mainWindow.getCopyPasswordButton().setEnabled(false);
        mainWindow.getLaunchURLButton().setEnabled(false);
        mainWindow.getDeleteAccountButton().setEnabled(false);
        mainWindow.getEditAccountMenuItem().setEnabled(false);
        mainWindow.getCopyUsernameMenuItem().setEnabled(false);
        mainWindow.getCopyPasswordMenuItem().setEnabled(false);
        mainWindow.getLaunchURLMenuItem().setEnabled(false);
        mainWindow.getDeleteAccountMenuItem().setEnabled(false);
        mainWindow.getViewAccountMenuItem().setEnabled(false);
    }

----------------------------------------
        if (mainWindow.getAccountsListview().getSelectedValue() == null) {
            mainWindow.getEditAccountButton().setEnabled(false);
            mainWindow.getCopyUsernameButton().setEnabled(false);
            mainWindow.getCopyPasswordButton().setEnabled(false);
            mainWindow.getLaunchURLButton().setEnabled(false);
            mainWindow.getDeleteAccountButton().setEnabled(false);
            mainWindow.getEditAccountMenuItem().setEnabled(false);
            mainWindow.getCopyUsernameMenuItem().setEnabled(false);
            mainWindow.getCopyPasswordMenuItem().setEnabled(false);
            mainWindow.getLaunchURLMenuItem().setEnabled(false);
            mainWindow.getDeleteAccountMenuItem().setEnabled(false);
            mainWindow.getViewAccountMenuItem().setEnabled(false);
        } else {

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
61
27135773
src/com/_17od/upm/gui/DatabaseActions.java 595 607
src/com/_17od/upm/gui/DatabaseActions.java 607 619
----------------------------------------
        if (mainWindow.getAccountsListview().getSelectedValue() == null) {
            mainWindow.getEditAccountButton().setEnabled(false);
            mainWindow.getCopyUsernameButton().setEnabled(false);
            mainWindow.getCopyPasswordButton().setEnabled(false);
            mainWindow.getLaunchURLButton().setEnabled(false);
            mainWindow.getDeleteAccountButton().setEnabled(false);
            mainWindow.getEditAccountMenuItem().setEnabled(false);
            mainWindow.getCopyUsernameMenuItem().setEnabled(false);
            mainWindow.getCopyPasswordMenuItem().setEnabled(false);
            mainWindow.getLaunchURLMenuItem().setEnabled(false);
            mainWindow.getDeleteAccountMenuItem().setEnabled(false);
            mainWindow.getViewAccountMenuItem().setEnabled(false);
        } else {

----------------------------------------
        } else {
            mainWindow.getEditAccountButton().setEnabled(true);
            mainWindow.getCopyUsernameButton().setEnabled(true);
            mainWindow.getCopyPasswordButton().setEnabled(true);
            mainWindow.getLaunchURLButton().setEnabled(true);
            mainWindow.getDeleteAccountButton().setEnabled(true);
            mainWindow.getEditAccountMenuItem().setEnabled(true);
            mainWindow.getCopyUsernameMenuItem().setEnabled(true);
            mainWindow.getCopyPasswordMenuItem().setEnabled(true);
            mainWindow.getLaunchURLMenuItem().setEnabled(true);
            mainWindow.getDeleteAccountMenuItem().setEnabled(true);
            mainWindow.getViewAccountMenuItem().setEnabled(true);
        }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
61
27135775
src/com/_17od/upm/gui/AccountDialog.java 813 819
src/com/_17od/upm/gui/AccountDialog.java 819 824
----------------------------------------
		if (InclEscChars) {
			for (int i = 0; i < PassLength; i++) {
				passwordBuffer.append(EXTRA_ALLOWED_CHARS[random.nextInt(EXTRA_ALLOWED_CHARS.length)]);
			}
			return passwordBuffer.toString();

		} else {

----------------------------------------
		} else {
			for (int i = 0; i < PassLength; i++) {
				passwordBuffer.append(ALLOWED_CHARS[random.nextInt(ALLOWED_CHARS.length)]);
			}
			return passwordBuffer.toString();
		}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
61
27135776
src/com/_17od/upm/gui/AccountDialog.java 377 384
src/com/_17od/upm/gui/AccountDialog.java 384 391
----------------------------------------
				if ((includeEscapeChars.booleanValue()) && (pwLength > 3)) {
					// Verify that the generated password satisfies the criteria
					// for strong passwords(including Escape Characters)
					do {
						Password = GeneratePassword(pwLength, includeEscapeChars.booleanValue());
					} while (!(CheckPassStrong(Password, includeEscapeChars.booleanValue())));

				} else if (!(includeEscapeChars.booleanValue()) && (pwLength > 2)) {

----------------------------------------
				} else if (!(includeEscapeChars.booleanValue()) && (pwLength > 2)) {
					// Verify that the generated password satisfies the criteria
					// for strong passwords(excluding Escape Characters)
					do {
						Password = GeneratePassword(pwLength, includeEscapeChars.booleanValue());
					} while (!(CheckPassStrong(Password, includeEscapeChars.booleanValue())));

				} else {

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
61
27327357
src/com/_17od/upm/database/ProblemReadingDatabaseFile.java 21 35
src/com/_17od/upm/transport/TransportException.java 21 34
----------------------------------------
package com._17od.upm.database;


public class ProblemReadingDatabaseFile extends Exception {

    private static final long serialVersionUID = 1L;

    public ProblemReadingDatabaseFile(String message) {
        super(message);
    }


    public ProblemReadingDatabaseFile(String message, Throwable cause) {
        super(message, cause);
    }

----------------------------------------
package com._17od.upm.transport;

public class TransportException extends Exception {

    private static final long serialVersionUID = 1L;

    public TransportException(String message) {
        super(message);
    }


    public TransportException(String message, Throwable cause) {
        super(message, cause);
    }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
61
27327358
src/com/_17od/upm/gui/OpenDatabaseFromURLDialog.java 164 178
src/com/_17od/upm/gui/OptionsDialog.java 502 516
----------------------------------------
                dispose();
            }
        });
        buttonPanel.add(okButton);
        
        JButton cancelButton = new JButton(Translator.translate("cancel"));
        cancelButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                setVisible(false);
                dispose();
            }
        });
        buttonPanel.add(cancelButton);

        emptyBorderPanel.add(buttonPanel);

----------------------------------------
				okButtonAction();
			}
		});
		buttonPanel.add(okButton);

		JButton cancelButton = new JButton(Translator.translate("cancel"));
		cancelButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				setVisible(false);
				dispose();
			}
		});
		buttonPanel.add(cancelButton);

		enableProxyComponents(proxyEnabled.booleanValue());

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
61
27327359
src/com/_17od/upm/gui/OpenDatabaseFromURLDialog.java 91 103
src/com/_17od/upm/gui/OptionsDialog.java 126 137
----------------------------------------
        urlTextField = new JTextField(20);
        c.gridx = 0;
        c.gridy = 1;
        c.anchor = GridBagConstraints.LINE_START;
        c.insets = new Insets(0, 5, 5, 5);
        c.weightx = 1;
        c.weighty = 0;
        c.gridwidth = 1;
        c.fill = GridBagConstraints.HORIZONTAL;
        mainPanel.add(urlTextField, c);

        // The username label field
        JLabel usernameLabel = new JLabel(Translator.translate("username"));

----------------------------------------
		dbToLoadOnStartup.setHorizontalAlignment(JTextField.LEFT);
		c.gridx = 0;
		c.gridy = 1;
		c.anchor = GridBagConstraints.LINE_START;
		c.insets = new Insets(0, 5, 5, 5);
		c.weightx = 1;
		c.weighty = 0;
		c.gridwidth = 1;
		c.fill = GridBagConstraints.HORIZONTAL;
		mainPanel.add(dbToLoadOnStartup, c);

		JButton dbToLoadOnStartupButton = new JButton("...");

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
61
27327360
src/com/_17od/upm/gui/OptionsDialog.java 496 505
src/com/_17od/upm/gui/AccountDialog.java 707 716
----------------------------------------
		emptyBorderPanel.add(buttonPanel);
		JButton okButton = new JButton(Translator.translate("ok"));
		// Link Enter key to okButton
		getRootPane().setDefaultButton(okButton);
		okButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				okButtonAction();
			}
		});
		buttonPanel.add(okButton);

----------------------------------------
		JPanel buttonPanel = new JPanel();
		JButton okButton = new JButton(Translator.translate("ok"));
		// Link Enter key to okButton
		getRootPane().setDefaultButton(okButton);
		okButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				okButtonAction();
			}
		});
		buttonPanel.add(okButton);

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
61
27327361
src/com/_17od/upm/gui/OptionsDialog.java 471 481
src/com/_17od/upm/gui/AccountDialog.java 453 464
----------------------------------------
		defaultEchoChar = httpProxyPassword.getEchoChar();
		hidePasswordCheckbox.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				if (e.getStateChange() == ItemEvent.SELECTED) {
					httpProxyPassword.setEchoChar(defaultEchoChar);
				} else {
					httpProxyPassword.setEchoChar((char) 0);
				}
			}
		});
		c.gridx = 1;

----------------------------------------
		hidePasswordCheckbox.setMargin(new Insets(5, 0, 5, 0));
		hidePasswordCheckbox.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				if (e.getStateChange() == ItemEvent.SELECTED) {
					password.setEchoChar(defaultEchoChar);
				} else {
					password.setEchoChar((char) 0);
				}
			}
		});

		Boolean hideAccountPassword = new Boolean(

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
61
27327362
src/com/_17od/upm/gui/OptionsDialog.java 21 28
src/com/_17od/upm/gui/AccountDialog.java 21 28
----------------------------------------
package com._17od.upm.gui;

import java.awt.Container;
import java.awt.FlowLayout;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.awt.event.ActionEvent;

----------------------------------------
package com._17od.upm.gui;

import java.awt.Container;
import java.awt.Desktop;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.awt.Toolkit;

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
61
27327363
src/com/_17od/upm/gui/MainWindow.java 838 887
src/com/_17od/upm/gui/AccountDialog.java 1018 1066
----------------------------------------
		clipboard.setContents(stringSelection, stringSelection);
	}

	// Use com.apache.commons.validator library in order to check the
	// validity(proper formating, e.x http://www.url.com) of the given url
	private boolean urlIsValid(String urL) {

		UrlValidator urlValidator = new UrlValidator();
		if (urlValidator.isValid(urL)) {
			return true;
		} else {
			return false;
		}

	}

	// Method that get(as input) the selected Account URL and open this URL via
	// the default browser of our platform

	private void LaunchSelectedURL(String url) {

		if (Desktop.isDesktopSupported()) {
			Desktop desktop = Desktop.getDesktop();

			try {
				desktop.browse(new URI(url));

			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (URISyntaxException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();

			}
			// Linux and Mac specific code in order to launch url
		} else {
			Runtime runtime = Runtime.getRuntime();

			try {
				runtime.exec("xdg-open " + url);

			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}

		}

	}

----------------------------------------
		textArea.requestFocus();
	}

	/**
	 * Use com.apache.commons.validator library in order to check the validity
	 * (proper formating, e.x http://www.url.com) of the given URL.
	 * 
	 * @param urL
	 * @return
	 */
	private boolean urlIsValid(String urL) {

		UrlValidator urlValidator = new UrlValidator();
		if (urlValidator.isValid(urL)) {
			return true;
		} else {
			return false;
		}

	}

	/**
	 * Method that get(as input) the selected Account URL and open this URL via
	 * the default browser of our platform.
	 * 
	 * @param url
	 */
	private void LaunchSelectedURL(String url) {

		if (Desktop.isDesktopSupported()) {
			Desktop desktop = Desktop.getDesktop();

			try {
				desktop.browse(new URI(url));
			} catch (IOException e) {
				e.printStackTrace();
			} catch (URISyntaxException e) {
				e.printStackTrace();
			}
		} else { // Linux and Mac specific code in order to launch url
			Runtime runtime = Runtime.getRuntime();

			try {
				runtime.exec("xdg-open " + url);
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
	}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
61
28730842
src/com/_17od/upm/database/PasswordDatabasePersistence.java 87 178
src/com/_17od/upm/database/PasswordDatabasePersistence.java 180 301
----------------------------------------
    public PasswordDatabase load(File databaseFile) throws InvalidPasswordException, ProblemReadingDatabaseFile, IOException {

        byte[] fullDatabase = readFile(databaseFile);

        // Check the database is a minimum length
        if (fullDatabase.length < EncryptionService.SALT_LENGTH) {
            throw new ProblemReadingDatabaseFile("This file doesn't appear to be a UPM password database");
        }

        PasswordDatabase passwordDatabase = null;
        ByteArrayInputStream is = null;
        Revision revision = null;
        DatabaseOptions dbOptions = null;
        HashMap accounts = null;
        Charset charset = Charset.forName("UTF-8");

        // Ensure this is a real UPM database by checking for the existence of 
        // the string "UPM" at the start of the file
        byte[] header = new byte[FILE_HEADER.getBytes().length];
        System.arraycopy(fullDatabase, 0, header, 0, header.length);
        if (Arrays.equals(header, FILE_HEADER.getBytes())) {

            // Calculate the positions of each item in the file
            int dbVersionPos      = header.length;
            int saltPos           = dbVersionPos + 1;
            int encryptedBytesPos = saltPos + EncryptionService.SALT_LENGTH;

            // Get the database version 
            byte dbVersion = fullDatabase[dbVersionPos];

            if (dbVersion == 2 || dbVersion == 3) {
                byte[] salt = new byte[EncryptionService.SALT_LENGTH];
                System.arraycopy(fullDatabase, saltPos, salt, 0, EncryptionService.SALT_LENGTH);
                int encryptedBytesLength = fullDatabase.length - encryptedBytesPos;
                byte[] encryptedBytes = new byte[encryptedBytesLength]; 
                System.arraycopy(fullDatabase, encryptedBytesPos, encryptedBytes, 0, encryptedBytesLength);

                // From version 3 onwards Strings in AccountInformation are
                // encoded using UTF-8. To ensure we can still open older dbs
                // we default back to the then character set, the system default
                if (dbVersion < 3) {
                    charset = Util.defaultCharset();
                }

                //Attempt to decrypt the database information
                byte[] decryptedBytes;
                try {
                    decryptedBytes = encryptionService.decrypt(encryptedBytes);
                } catch (CryptoException e1) {
                    throw new InvalidPasswordException();
                }

                //If we've got here then the database was successfully decrypted 
                is = new ByteArrayInputStream(decryptedBytes);
                try {
                    revision = new Revision(is);
                    dbOptions = new DatabaseOptions(is);
    
                    // Read the remainder of the database in now
                    accounts = new HashMap();
                    try {
                        while (true) { //keep loading accounts until an EOFException is thrown
                            AccountInformation ai = new AccountInformation(is, charset);
                            accounts.put(ai.getAccountName(), ai);
                        }
                    } catch (EOFException e) {
                        //just means we hit eof
                    }
                    is.close();
                } catch (IOException e) {
                    throw new ProblemReadingDatabaseFile(e.getMessage(), e);
                }

                passwordDatabase = new PasswordDatabase(revision, dbOptions, accounts, databaseFile);

            } else {
                throw new ProblemReadingDatabaseFile("Don't know how to handle database version [" + dbVersion + "]");
            }

        } else {
            
            // This might be an old database (pre version 2).
            // By throwing InvalidPasswordException the calling method can ask
            // the user for the password so that the load(File, char[]) method
            // can be called. That method knows how to load old versions of the
            // db
            throw new InvalidPasswordException();
        }
                
        return passwordDatabase;

    }

----------------------------------------
    public PasswordDatabase load(File databaseFile, char[] password) throws IOException, ProblemReadingDatabaseFile, InvalidPasswordException, CryptoException {

        byte[] fullDatabase;
        fullDatabase = readFile(databaseFile);

        // Check the database is a minimum length
        if (fullDatabase.length < EncryptionService.SALT_LENGTH) {
            throw new ProblemReadingDatabaseFile("This file doesn't appear to be a UPM password database");
        }

        ByteArrayInputStream is = null;
        Revision revision = null;
        DatabaseOptions dbOptions = null;
        Charset charset = Charset.forName("UTF-8");

        // Ensure this is a real UPM database by checking for the existence of 
        // the string "UPM" at the start of the file
        byte[] header = new byte[FILE_HEADER.getBytes().length];
        System.arraycopy(fullDatabase, 0, header, 0, header.length);
        if (Arrays.equals(header, FILE_HEADER.getBytes())) {

            // Calculate the positions of each item in the file
            int dbVersionPos      = header.length;
            int saltPos           = dbVersionPos + 1;
            int encryptedBytesPos = saltPos + EncryptionService.SALT_LENGTH;

            // Get the database version 
            byte dbVersion = fullDatabase[dbVersionPos];

            if (dbVersion == 2 || dbVersion == 3) {
                byte[] salt = new byte[EncryptionService.SALT_LENGTH];
                System.arraycopy(fullDatabase, saltPos, salt, 0, EncryptionService.SALT_LENGTH);
                int encryptedBytesLength = fullDatabase.length - encryptedBytesPos;
                byte[] encryptedBytes = new byte[encryptedBytesLength]; 
                System.arraycopy(fullDatabase, encryptedBytesPos, encryptedBytes, 0, encryptedBytesLength);

                // From version 3 onwards Strings in AccountInformation are
                // encoded using UTF-8. To ensure we can still open older dbs
                // we default back to the then character set, the system default
                if (dbVersion < 3) {
                    charset = Util.defaultCharset();
                }

                //Attempt to decrypt the database information
                encryptionService = new EncryptionService(password, salt);
                byte[] decryptedBytes;
                try {
                    decryptedBytes = encryptionService.decrypt(encryptedBytes);
                } catch (CryptoException e) {
                    throw new InvalidPasswordException();
                }

                //If we've got here then the database was successfully decrypted 
                is = new ByteArrayInputStream(decryptedBytes);
                revision = new Revision(is);
                dbOptions = new DatabaseOptions(is);
            } else {
                throw new ProblemReadingDatabaseFile("Don't know how to handle database version [" + dbVersion + "]");
            }

        } else {
            
            // This might be an old database (pre version 2) so try loading it using the old database format
            
            // Check the database is a minimum length
            if (fullDatabase.length < EncryptionService.SALT_LENGTH) {
                throw new ProblemReadingDatabaseFile("This file doesn't appear to be a UPM password database");
            }
            
            //Split up the salt and encrypted bytes
            byte[] salt = new byte[EncryptionService.SALT_LENGTH];
            System.arraycopy(fullDatabase, 0, salt, 0, EncryptionService.SALT_LENGTH);
            int encryptedBytesLength = fullDatabase.length - EncryptionService.SALT_LENGTH;
            byte[] encryptedBytes = new byte[encryptedBytesLength]; 
            System.arraycopy(fullDatabase, EncryptionService.SALT_LENGTH, encryptedBytes, 0, encryptedBytesLength);

            byte[] decryptedBytes = null;
            //Attempt to decrypt the database information
            try {
                decryptedBytes = DESDecryptionService.decrypt(password, salt, encryptedBytes);
            } catch (CryptoException e) {
                throw new InvalidPasswordException();
            }

            //We'll get to here if the password was correct so load up the decryped byte
            is = new ByteArrayInputStream(decryptedBytes);
            DatabaseHeader dh = new DatabaseHeader(is);

            // At this point we'll check to see what version the database is and load it accordingly
            if (dh.getVersion().equals("1.1.0")) {
                // Version 1.1.0 introduced a revision number & database options so read that in now
                revision = new Revision(is);
                dbOptions = new DatabaseOptions(is);
            } else if (dh.getVersion().equals("1.0.0")) {
                revision = new Revision();
                dbOptions = new DatabaseOptions();
            } else {
                throw new ProblemReadingDatabaseFile("Don't know how to handle database version [" + dh.getVersion() + "]");
            }

            // Initialise the EncryptionService so that it's ready for the "save" operation
            encryptionService = new EncryptionService(password);

        }
        
        // Read the remainder of the database in now
        HashMap accounts = new HashMap();
        try {
            while (true) { //keep loading accounts until an EOFException is thrown
                AccountInformation ai = new AccountInformation(is, charset);
                accounts.put(ai.getAccountName(), ai);
            }
        } catch (EOFException e) {
            //just means we hit eof
        }
        is.close();

        PasswordDatabase passwordDatabase = new PasswordDatabase(revision, dbOptions, accounts, databaseFile);
        
        return passwordDatabase;

    }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
61
28730843
src/com/_17od/upm/util/Util.java 68 75
src/com/_17od/upm/gui/DatabaseActions.java 631 636
----------------------------------------
        } finally {
            if (sourceChannel != null) {
                sourceChannel.close();
            }
            if (destinationChannel != null) {
                destinationChannel.close();
            }
        }

----------------------------------------
        if (oppDialog.hasLanguageChanged()) {
            mainWindow.initialiseControlsWithDefaultLanguage();
            if (database != null) {
                setStatusBarText();
            }
        }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
61
28730844
src/com/_17od/upm/gui/OptionsDialog.java 535 601
src/com/_17od/upm/gui/OptionsDialog.java 536 597
----------------------------------------
	private void okButtonAction() {
		try {
			if (databaseAutoLockCheckbox.isSelected()) {
				if (databaseAutoLockTime.getText() == null || databaseAutoLockTime.getText().trim().equals("")
						|| !Util.isNumeric(databaseAutoLockTime.getText())) {
					JOptionPane.showMessageDialog(OptionsDialog.this,
							Translator.translate("invalidValueForDatabaseAutoLockTime"),
							Translator.translate("problem"), JOptionPane.ERROR_MESSAGE);
					databaseAutoLockTime.requestFocusInWindow();
					return;
				}
			}

			if (accountPasswordLength.getText() == null || accountPasswordLength.getText().trim().equals("")
					|| !Util.isNumeric(accountPasswordLength.getText())) {
				JOptionPane.showMessageDialog(OptionsDialog.this,
						Translator.translate("invalidValueForAccountPasswordLength"), Translator.translate("problem"),
						JOptionPane.ERROR_MESSAGE);
				databaseAutoLockTime.requestFocusInWindow();
				return;
			}

			Preferences.set(Preferences.ApplicationOptions.DB_TO_LOAD_ON_STARTUP, dbToLoadOnStartup.getText());
			Preferences.set(Preferences.ApplicationOptions.ACCOUNT_HIDE_PASSWORD,
					String.valueOf(hideAccountPasswordCheckbox.isSelected()));
			Preferences.set(Preferences.ApplicationOptions.INCLUDE_ESCAPE_CHARACTERS,
					String.valueOf(inclEscCharstoPassCheckbox.isSelected()));
			Preferences.set(Preferences.ApplicationOptions.REMEMBER_WINDOW_POSITION,
					String.valueOf(storeWindowPosCheckbox.isSelected()));
			Preferences.set(Preferences.ApplicationOptions.MAINWINDOW_ALWAYS_ON_TOP,
					String.valueOf(appAlwaysonTopCheckbox.isSelected()));
			Preferences.set(Preferences.ApplicationOptions.DATABASE_AUTO_LOCK,
					String.valueOf(databaseAutoLockCheckbox.isSelected()));
			Preferences.set(Preferences.ApplicationOptions.DATABASE_AUTO_LOCK_TIME, databaseAutoLockTime.getText());
			Preferences.set(Preferences.ApplicationOptions.ACCOUNT_PASSWORD_LENGTH, accountPasswordLength.getText());
			Preferences.set(Preferences.ApplicationOptions.HTTPS_ACCEPT_SELFSIGNED_CERTS,
					String.valueOf(acceptSelfSignedCertsCheckbox.isSelected()));
			Preferences.set(Preferences.ApplicationOptions.HTTP_PROXY_HOST, httpProxyHost.getText());
			Preferences.set(Preferences.ApplicationOptions.HTTP_PROXY_PORT, httpProxyPort.getText());
			Preferences.set(Preferences.ApplicationOptions.HTTP_PROXY_USERNAME, httpProxyUsername.getText());
			String encodedPassword = new String(
					Base64.encodeBase64(new String(httpProxyPassword.getPassword()).getBytes()));
			Preferences.set(Preferences.ApplicationOptions.HTTP_PROXY_PASSWORD, encodedPassword);
			Preferences.set(Preferences.ApplicationOptions.HTTP_PROXY_ENABLED,
					String.valueOf(enableProxyCheckbox.isSelected()));

			MainWindow.setAppAlwaysonTop(appAlwaysonTopCheckbox.isSelected());

			// Save the new language and set a flag if it has changed
			String beforeLocale = Preferences.get(Preferences.ApplicationOptions.LOCALE);
			Locale selectedLocale = Translator.SUPPORTED_LOCALES[localeComboBox.getSelectedIndex()];
			String afterLocale = selectedLocale.getLanguage();
			if (!afterLocale.equals(beforeLocale)) {
				Preferences.set(Preferences.ApplicationOptions.LOCALE, selectedLocale.getLanguage());
				Translator.loadBundle(selectedLocale);
				languageChanged = true;
			}

			Preferences.save();
			setVisible(false);
			dispose();
			okClicked = true;
		} catch (Exception e) {
			JOptionPane.showMessageDialog(parentFrame, e.getStackTrace(), Translator.translate("error"),
					JOptionPane.ERROR_MESSAGE);
		}
	}

----------------------------------------
		try {
			if (databaseAutoLockCheckbox.isSelected()) {
				if (databaseAutoLockTime.getText() == null || databaseAutoLockTime.getText().trim().equals("")
						|| !Util.isNumeric(databaseAutoLockTime.getText())) {
					JOptionPane.showMessageDialog(OptionsDialog.this,
							Translator.translate("invalidValueForDatabaseAutoLockTime"),
							Translator.translate("problem"), JOptionPane.ERROR_MESSAGE);
					databaseAutoLockTime.requestFocusInWindow();
					return;
				}
			}

			if (accountPasswordLength.getText() == null || accountPasswordLength.getText().trim().equals("")
					|| !Util.isNumeric(accountPasswordLength.getText())) {
				JOptionPane.showMessageDialog(OptionsDialog.this,
						Translator.translate("invalidValueForAccountPasswordLength"), Translator.translate("problem"),
						JOptionPane.ERROR_MESSAGE);
				databaseAutoLockTime.requestFocusInWindow();
				return;
			}

			Preferences.set(Preferences.ApplicationOptions.DB_TO_LOAD_ON_STARTUP, dbToLoadOnStartup.getText());
			Preferences.set(Preferences.ApplicationOptions.ACCOUNT_HIDE_PASSWORD,
					String.valueOf(hideAccountPasswordCheckbox.isSelected()));
			Preferences.set(Preferences.ApplicationOptions.INCLUDE_ESCAPE_CHARACTERS,
					String.valueOf(inclEscCharstoPassCheckbox.isSelected()));
			Preferences.set(Preferences.ApplicationOptions.REMEMBER_WINDOW_POSITION,
					String.valueOf(storeWindowPosCheckbox.isSelected()));
			Preferences.set(Preferences.ApplicationOptions.MAINWINDOW_ALWAYS_ON_TOP,
					String.valueOf(appAlwaysonTopCheckbox.isSelected()));
			Preferences.set(Preferences.ApplicationOptions.DATABASE_AUTO_LOCK,
					String.valueOf(databaseAutoLockCheckbox.isSelected()));
			Preferences.set(Preferences.ApplicationOptions.DATABASE_AUTO_LOCK_TIME, databaseAutoLockTime.getText());
			Preferences.set(Preferences.ApplicationOptions.ACCOUNT_PASSWORD_LENGTH, accountPasswordLength.getText());
			Preferences.set(Preferences.ApplicationOptions.HTTPS_ACCEPT_SELFSIGNED_CERTS,
					String.valueOf(acceptSelfSignedCertsCheckbox.isSelected()));
			Preferences.set(Preferences.ApplicationOptions.HTTP_PROXY_HOST, httpProxyHost.getText());
			Preferences.set(Preferences.ApplicationOptions.HTTP_PROXY_PORT, httpProxyPort.getText());
			Preferences.set(Preferences.ApplicationOptions.HTTP_PROXY_USERNAME, httpProxyUsername.getText());
			String encodedPassword = new String(
					Base64.encodeBase64(new String(httpProxyPassword.getPassword()).getBytes()));
			Preferences.set(Preferences.ApplicationOptions.HTTP_PROXY_PASSWORD, encodedPassword);
			Preferences.set(Preferences.ApplicationOptions.HTTP_PROXY_ENABLED,
					String.valueOf(enableProxyCheckbox.isSelected()));

			MainWindow.setAppAlwaysonTop(appAlwaysonTopCheckbox.isSelected());

			// Save the new language and set a flag if it has changed
			String beforeLocale = Preferences.get(Preferences.ApplicationOptions.LOCALE);
			Locale selectedLocale = Translator.SUPPORTED_LOCALES[localeComboBox.getSelectedIndex()];
			String afterLocale = selectedLocale.getLanguage();
			if (!afterLocale.equals(beforeLocale)) {
				Preferences.set(Preferences.ApplicationOptions.LOCALE, selectedLocale.getLanguage());
				Translator.loadBundle(selectedLocale);
				languageChanged = true;
			}

			Preferences.save();
			setVisible(false);
			dispose();
			okClicked = true;
		} catch (Exception e) {

----------------------------------------
