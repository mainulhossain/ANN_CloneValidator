$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
28734527
src/de/joergjahnke/common/extendeddevices/WavePlayer.java 64 70
src/de/joergjahnke/common/jme/ButtonAssignmentCanvas.java 171 179
----------------------------------------
                        synchronized (buffer) {
                            buffer.reset();
                            try {
                                buffer.wait();
                            } catch (InterruptedException e) {
                            }
                        }

----------------------------------------
    private void nextButton() {
        ++this.currentButton;
        if (this.currentButton < this.buttons.size()) {
            repaint();
        } else {
            this.state = Command.OK;
            onFinished();
        }
    }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
28734528
src/de/joergjahnke/common/jme/ButtonAssignmentCanvas.java 171 179
src/de/joergjahnke/common/jme/WavePlayer.java 176 192
----------------------------------------
    private void nextButton() {
        ++this.currentButton;
        if (this.currentButton < this.buttons.size()) {
            repaint();
        } else {
            this.state = Command.OK;
            onFinished();
        }
    }

----------------------------------------
        if (PlayerListener.END_OF_MEDIA.equals(event)) {
            // we have more players in the queue?
            if (!this.players.isEmpty()) {
                // then use the next player from the queue and play it
                this.currentPlayer = (Player) this.players.elementAt(0);
                this.players.removeElementAt(0);
                try {
                    this.currentPlayer.start();
                } catch (Exception e) {
                    // we couldn't start the player, we stop the sound as it does not seem to work
                    producer.deleteObservers();
                }
            } else {
                // otherwise we are idle
                this.currentPlayer = null;
            }
        }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
28734529
src/de/joergjahnke/common/android/FileDialog.java 72 111
src/de/joergjahnke/common/jme/Settings.java 36 54
----------------------------------------
    private void showDirectory(final String path) {
        // we clear any old content and add an entry to get up one level
        this.currentFiles.clear();
        this.currentDir = new File(path);
        if (this.currentDir.getParentFile() != null) {
            this.currentFiles.add(PARENT_DIR);
        }

        // get all directories and C64 files in the given path
        final File[] files = this.currentDir.listFiles();
        final Set<String> sorted = new TreeSet<String>();

        for (final File file : files) {
            final String name = file.getAbsolutePath();

            if (file.isDirectory()) {
                sorted.add(name);
            } else {
                final String extension = name.indexOf('.') > 0 ? name.substring(name.lastIndexOf('.') + 1) : "";

                if (null == getAcceptedFileTypes() || getAcceptedFileTypes().contains(extension.toLowerCase())) {
                    sorted.add(name);
                }
            }
        }
        this.currentFiles.addAll(sorted);

        // display these images
        final Context context = this;

        ArrayAdapter<String> filenamesAdapter = new ArrayAdapter<String>(this, getTextView(), this.currentFiles) {

            @Override
            public View getView(final int position, final View convertView, final ViewGroup parent) {
                return new IconifiedTextLayout(context, getItem(position), position);
            }
        };

        setListAdapter(filenamesAdapter);
    }

----------------------------------------
    public Settings(final String dbName) throws RecordStoreException, RecordStoreFullException, RecordStoreNotFoundException {
        // open record store
        this.db = RecordStore.openRecordStore(dbName, true);

        // read all keys
        final Vector ids = new Vector();

        for (final RecordEnumeration en = this.db.enumerateRecords(null, null, false); en.hasNextElement();) {
            ids.addElement(new Integer(en.nextRecordId()));
        }

        for (int i = 0; i < ids.size(); ++i) {
            final int id = ((Integer) ids.elementAt(i)).intValue();
            final byte[] bytes = this.db.getRecord(id);
            final int hashCode = toInt(bytes);

            this.nameRecordIDMap.put(new Integer(hashCode), new Integer(id));
        }
    }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
28734530
src/de/joergjahnke/common/android/FileDialog.java 84 96
src/de/joergjahnke/common/jme/WavePlayer.java 128 151
----------------------------------------
        for (final File file : files) {
            final String name = file.getAbsolutePath();

            if (file.isDirectory()) {
                sorted.add(name);
            } else {
                final String extension = name.indexOf('.') > 0 ? name.substring(name.lastIndexOf('.') + 1) : "";

                if (null == getAcceptedFileTypes() || getAcceptedFileTypes().contains(extension.toLowerCase())) {
                    sorted.add(name);
                }
            }
        }

----------------------------------------
                try {
                    final Player player = Manager.createPlayer(new ByteArrayInputStream(cb), "audio/x-wav");

                    try {
                        player.realize();
                    } catch (Exception e) {
                        // we could not realize the player, this will be done later
                    }
                    try {
                        player.prefetch();
                    } catch (Exception e) {
                        // we could not prefetch player data, this will be done later
                    }
                    player.addPlayerListener(this);
                    // we currently don't play a sound?
                    if (null == this.currentPlayer) {
                        // then start this player
                        this.currentPlayer = player;
                        this.currentPlayer.start();
                    } else {
                        // otherwise add it to the queue
                        this.players.addElement(player);
                    }
                } catch (Exception e) {

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
28734531
src/de/joergjahnke/common/jme/LocalizationSupport.java 118 140
src/de/joergjahnke/common/jme/LocalizationSupport.java 121 135
----------------------------------------
    public static boolean initLocalizationSupport(String locale, final String messages) {
        InputStream in = null;
        
        try {
            in = loadLocalizedFile(messages, locale);
            if (in == null) {
                // no messages bundle was found - initialization failed
                _localizationErrorMessage = _processPattern(_INIT_LOCALIZATION_ERROR_MSG, new Object[]{"No messages found"}); // NOI18N
            } else {
                // load messages to _messageTable hashtable
                if (_messageTable == null) {
                    _messageTable = new Hashtable();
                }
                _loadMessages(in);
                // we are ok - return true as success ...
                return true;
            }
        } catch (Exception e) {
            // houston we have a problem
            _localizationErrorMessage = _processPattern(_INIT_LOCALIZATION_ERROR_MSG, new Object[]{e.getMessage()});
        }
        return false;
    }

----------------------------------------
        try {
            in = loadLocalizedFile(messages, locale);
            if (in == null) {
                // no messages bundle was found - initialization failed
                _localizationErrorMessage = _processPattern(_INIT_LOCALIZATION_ERROR_MSG, new Object[]{"No messages found"}); // NOI18N
            } else {
                // load messages to _messageTable hashtable
                if (_messageTable == null) {
                    _messageTable = new Hashtable();
                }
                _loadMessages(in);
                // we are ok - return true as success ...
                return true;
            }
        } catch (Exception e) {

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
28734532
src/de/joergjahnke/common/jme/LocalizationSupport.java 375 434
src/de/joergjahnke/common/jme/LocalizationSupport.java 377 431
----------------------------------------
        for (int x = 0; x < len;) {
            aChar = theString.charAt(x++);
            if (aChar == '\\') {
                aChar = theString.charAt(x++);
                if (aChar == 'u') {
                    // Read the xxxx
                    int value = 0;
                    for (int i = 0; i < 4; i++) {
                        aChar = theString.charAt(x++);
                        switch (aChar) {
                            case '0':
                            case '1':
                            case '2':
                            case '3':
                            case '4':
                            case '5':
                            case '6':
                            case '7':
                            case '8':
                            case '9':
                                value = (value << 4) + aChar - '0';
                                break;
                            case 'a':
                            case 'b':
                            case 'c':
                            case 'd':
                            case 'e':
                            case 'f':
                                value = (value << 4) + 10 + aChar - 'a';
                                break;
                            case 'A':
                            case 'B':
                            case 'C':
                            case 'D':
                            case 'E':
                            case 'F':
                                value = (value << 4) + 10 + aChar - 'A';
                                break;
                            default:
                                // return DEFAULT STRING if there is any problem
                                return _DEFAULT_STRING;
                        }
                    }
                    outBuffer.append((char) value);
                } else {
                    if (aChar == 't') {
                        aChar = '\t';
                    } else if (aChar == 'r') {
                        aChar = '\r';
                    } else if (aChar == 'n') {
                        aChar = '\n';
                    } else if (aChar == 'f') {
                        aChar = '\f';
                    }
                    outBuffer.append(aChar);
                }
            } else {
                outBuffer.append(aChar);
            }
        }

----------------------------------------
            if (aChar == '\\') {
                aChar = theString.charAt(x++);
                if (aChar == 'u') {
                    // Read the xxxx
                    int value = 0;
                    for (int i = 0; i < 4; i++) {
                        aChar = theString.charAt(x++);
                        switch (aChar) {
                            case '0':
                            case '1':
                            case '2':
                            case '3':
                            case '4':
                            case '5':
                            case '6':
                            case '7':
                            case '8':
                            case '9':
                                value = (value << 4) + aChar - '0';
                                break;
                            case 'a':
                            case 'b':
                            case 'c':
                            case 'd':
                            case 'e':
                            case 'f':
                                value = (value << 4) + 10 + aChar - 'a';
                                break;
                            case 'A':
                            case 'B':
                            case 'C':
                            case 'D':
                            case 'E':
                            case 'F':
                                value = (value << 4) + 10 + aChar - 'A';
                                break;
                            default:
                                // return DEFAULT STRING if there is any problem
                                return _DEFAULT_STRING;
                        }
                    }
                    outBuffer.append((char) value);
                } else {
                    if (aChar == 't') {
                        aChar = '\t';
                    } else if (aChar == 'r') {
                        aChar = '\r';
                    } else if (aChar == 'n') {
                        aChar = '\n';
                    } else if (aChar == 'f') {
                        aChar = '\f';
                    }
                    outBuffer.append(aChar);
                }
            } else {

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
28734533
src/de/joergjahnke/common/jme/LocalizationSupport.java 419 430
src/de/joergjahnke/gameboy/jme/MEGameboyMIDlet.java 1444 1469
----------------------------------------
                } else {
                    if (aChar == 't') {
                        aChar = '\t';
                    } else if (aChar == 'r') {
                        aChar = '\r';
                    } else if (aChar == 'n') {
                        aChar = '\n';
                    } else if (aChar == 'f') {
                        aChar = '\f';
                    }
                    outBuffer.append(aChar);
                }

----------------------------------------
    public void menuAction(final String item) {
        if (item.equals(this.playMenuText)) {
            showSelectGameForm();
            // we want to show the about dialog?
        } else if (item.equals(this.aboutMenuText)) {
            showAboutForm();
            // we want to display the program help?
        } else if (item.equals(this.helpMenuText)) {
            showHelpForm();
            // we want to display the log?
        } else if (item.equals(this.showLogCommand.getLabel())) {
            showLogForm();
            // we want to edit the emulator settings?
        } else if (item.equals(this.editSettingsMenuText)) {
            showSettingsForm();
            // we want to search the local file system for Gameboy images?
        } else if (item.equals(this.searchProgramsMenuText)) {
            CollectionUtils.removeAll(this.programs, this.fsHandler.getCachedProgramList());
            showSelectDirectoryForm();
            // we want to exit the emulator?
        } else if (item.equals(this.exitMenuText)) {
            exit();
        } else if (item.equals(this.assignKeysMenuText)) {
            showAssignButtonsCanvas();
        }
    }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
28734534
src/de/joergjahnke/gameboy/jme/BtMEGameboyMIDlet.java 139 157
src/de/joergjahnke/common/jme/LocalizationSupport.java 444 457
----------------------------------------
                            } else {
                                RecordStore rs = null;

                                try {
                                    // open the suspend "file"
                                    rs = RecordStore.openRecordStore(name, false);

                                    name += SNAPSHOT_EXTENSION;
                                    data = rs.getRecord(1);
                                } catch (Throwable t) {
                                    // will be handled below since data is still null
                                } finally {
                                    try {
                                        rs.closeRecordStore();
                                    } catch (Exception e) {
                                        // we could not close the record store, that hopefully does not hinder other actions on it and it was closed anyway...
                                    }
                                }
                            }

----------------------------------------
    private static String _processPattern(String indexString, Object[] args) {
        try {
            int index = Integer.parseInt(indexString);
            if ((args != null) && (index >= 0) && (index < args.length)) {
                if (args[index] != null) {
                    return args[index].toString();
                }
            }
        } catch (NumberFormatException nfe) {
            // NFE - nothing bad basically - the argument is not a number
            // swallow it for the time being and show default string
        }
        return _DEFAULT_STRING;
    }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
28734535
src/de/joergjahnke/common/jme/OrientationSensitiveCanvasHelper.java 41 108
src/de/joergjahnke/common/jme/OrientationSensitiveCanvasHelper.java 42 105
----------------------------------------
    public void activateAccelerometer() {
        try {
            final javax.microedition.sensor.SensorInfo[] si = javax.microedition.sensor.SensorManager.findSensors("acceleration", javax.microedition.sensor.SensorInfo.CONTEXT_TYPE_USER);
            final String url = si[0].getUrl();

            this.con = Connector.open(url);

            final javax.microedition.sensor.SensorConnection sensor = (javax.microedition.sensor.SensorConnection) this.con;

            sensor.setDataListener(new javax.microedition.sensor.DataListener() {

                public void dataReceived(final javax.microedition.sensor.SensorConnection sensor, final javax.microedition.sensor.Data[] data, final boolean isDataLost) {
                    try {
                        double x = 0;
                        double y = 0;
                        double z = 0;
                        switch (data[0].getChannelInfo().getDataType()) {
                            case javax.microedition.sensor.ChannelInfo.TYPE_INT:
                                x = (double) data[0].getIntValues()[0];
                                break;
                            case javax.microedition.sensor.ChannelInfo.TYPE_DOUBLE:
                                x = data[0].getDoubleValues()[0];
                                break;
                        }
                        switch (data[1].getChannelInfo().getDataType()) {
                            case javax.microedition.sensor.ChannelInfo.TYPE_INT:
                                y = (double) data[1].getIntValues()[0];
                                break;
                            case javax.microedition.sensor.ChannelInfo.TYPE_DOUBLE:
                                y = data[1].getDoubleValues()[0];
                                break;
                        }
                        switch (data[2].getChannelInfo().getDataType()) {
                            case javax.microedition.sensor.ChannelInfo.TYPE_INT:
                                z = (double) data[2].getIntValues()[0];
                                break;
                            case javax.microedition.sensor.ChannelInfo.TYPE_DOUBLE:
                                z = data[2].getDoubleValues()[0];
                                break;
                        }
                        // we automatically rotate the screen?
                        if (canvas.isAutoChangeOrientation()) {
                            final int oldTransform = canvas.transform;
                            if (x < -500) {
                                canvas.transform = Sprite.TRANS_ROT270;
                            } else if (x > 500) {
                                canvas.transform = Sprite.TRANS_ROT90;
                            } else if (y < -500) {
                                canvas.transform = Sprite.TRANS_ROT180;
                            } else if (y > 500) {
                                canvas.transform = Sprite.TRANS_NONE;
                            }
                            if (oldTransform != canvas.transform) {
                                canvas.onDeviceRotated();
                            }
                        }
                        // we use the accelerometer as input device?
                        if (canvas.isUseAccelerometer()) {
                            canvas.onAccelerometerChange(x, y, z);
                        }
                    } catch (Exception e) {
                    }
                }
            }, 1);
        } catch (Throwable t) {
            throw new RuntimeException(t.getMessage());
        }
    }

----------------------------------------
        try {
            final javax.microedition.sensor.SensorInfo[] si = javax.microedition.sensor.SensorManager.findSensors("acceleration", javax.microedition.sensor.SensorInfo.CONTEXT_TYPE_USER);
            final String url = si[0].getUrl();

            this.con = Connector.open(url);

            final javax.microedition.sensor.SensorConnection sensor = (javax.microedition.sensor.SensorConnection) this.con;

            sensor.setDataListener(new javax.microedition.sensor.DataListener() {

                public void dataReceived(final javax.microedition.sensor.SensorConnection sensor, final javax.microedition.sensor.Data[] data, final boolean isDataLost) {
                    try {
                        double x = 0;
                        double y = 0;
                        double z = 0;
                        switch (data[0].getChannelInfo().getDataType()) {
                            case javax.microedition.sensor.ChannelInfo.TYPE_INT:
                                x = (double) data[0].getIntValues()[0];
                                break;
                            case javax.microedition.sensor.ChannelInfo.TYPE_DOUBLE:
                                x = data[0].getDoubleValues()[0];
                                break;
                        }
                        switch (data[1].getChannelInfo().getDataType()) {
                            case javax.microedition.sensor.ChannelInfo.TYPE_INT:
                                y = (double) data[1].getIntValues()[0];
                                break;
                            case javax.microedition.sensor.ChannelInfo.TYPE_DOUBLE:
                                y = data[1].getDoubleValues()[0];
                                break;
                        }
                        switch (data[2].getChannelInfo().getDataType()) {
                            case javax.microedition.sensor.ChannelInfo.TYPE_INT:
                                z = (double) data[2].getIntValues()[0];
                                break;
                            case javax.microedition.sensor.ChannelInfo.TYPE_DOUBLE:
                                z = data[2].getDoubleValues()[0];
                                break;
                        }
                        // we automatically rotate the screen?
                        if (canvas.isAutoChangeOrientation()) {
                            final int oldTransform = canvas.transform;
                            if (x < -500) {
                                canvas.transform = Sprite.TRANS_ROT270;
                            } else if (x > 500) {
                                canvas.transform = Sprite.TRANS_ROT90;
                            } else if (y < -500) {
                                canvas.transform = Sprite.TRANS_ROT180;
                            } else if (y > 500) {
                                canvas.transform = Sprite.TRANS_NONE;
                            }
                            if (oldTransform != canvas.transform) {
                                canvas.onDeviceRotated();
                            }
                        }
                        // we use the accelerometer as input device?
                        if (canvas.isUseAccelerometer()) {
                            canvas.onAccelerometerChange(x, y, z);
                        }
                    } catch (Exception e) {
                    }
                }
            }, 1);
        } catch (Throwable t) {

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
28734536
src/de/joergjahnke/common/jme/OrientationSensitiveCanvasHelper.java 53 101
src/de/joergjahnke/common/bluetooth/BluetoothClient.java 126 133
----------------------------------------
                    try {
                        double x = 0;
                        double y = 0;
                        double z = 0;
                        switch (data[0].getChannelInfo().getDataType()) {
                            case javax.microedition.sensor.ChannelInfo.TYPE_INT:
                                x = (double) data[0].getIntValues()[0];
                                break;
                            case javax.microedition.sensor.ChannelInfo.TYPE_DOUBLE:
                                x = data[0].getDoubleValues()[0];
                                break;
                        }
                        switch (data[1].getChannelInfo().getDataType()) {
                            case javax.microedition.sensor.ChannelInfo.TYPE_INT:
                                y = (double) data[1].getIntValues()[0];
                                break;
                            case javax.microedition.sensor.ChannelInfo.TYPE_DOUBLE:
                                y = data[1].getDoubleValues()[0];
                                break;
                        }
                        switch (data[2].getChannelInfo().getDataType()) {
                            case javax.microedition.sensor.ChannelInfo.TYPE_INT:
                                z = (double) data[2].getIntValues()[0];
                                break;
                            case javax.microedition.sensor.ChannelInfo.TYPE_DOUBLE:
                                z = data[2].getDoubleValues()[0];
                                break;
                        }
                        // we automatically rotate the screen?
                        if (canvas.isAutoChangeOrientation()) {
                            final int oldTransform = canvas.transform;
                            if (x < -500) {
                                canvas.transform = Sprite.TRANS_ROT270;
                            } else if (x > 500) {
                                canvas.transform = Sprite.TRANS_ROT90;
                            } else if (y < -500) {
                                canvas.transform = Sprite.TRANS_ROT180;
                            } else if (y > 500) {
                                canvas.transform = Sprite.TRANS_NONE;
                            }
                            if (oldTransform != canvas.transform) {
                                canvas.onDeviceRotated();
                            }
                        }
                        // we use the accelerometer as input device?
                        if (canvas.isUseAccelerometer()) {
                            canvas.onAccelerometerChange(x, y, z);
                        }
                    } catch (Exception e) {

----------------------------------------
        for (int i = 0; i < this.devices.size(); ++i) {
            final RemoteDevice device = (RemoteDevice) this.devices.elementAt(i);
            final ServiceRecord service = searchServices(device, uuids);

            if (service != null) {
                result.put(device, service);
            }
        }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
28734537
src/de/joergjahnke/gameboy/android/GameboyView.java 204 241
src/de/joergjahnke/gameboy/core/VideoChip.java 1281 1318
----------------------------------------
    	if(this.buttons != null) {
    		// ensure that the screen leaves enough space
    		final int bw = this.buttons[0].getBitmap().getWidth();
    		final int bh = this.buttons[0].getBitmap().getHeight();
    		
    		if(w - this.screenRect.width() < bw && h - this.screenRect.height() < bh) {
    			// we have to adjust the screen size
    			if(w - this.screenRect.width() > h - this.screenRect.height()) {
    				this.screenRect = determineScreenRect(w - bw, h);
    			} else {
    				this.screenRect = determineScreenRect(w, h - bh);
    			}
    		}
    		
    		// reposition the screen if necessary
    		if(w - this.screenRect.right < bw && h - this.screenRect.bottom < bh) {
  				this.screenRect.offsetTo(0, 0);
    		}
    		
    		// determine the button positions
    		final int n = this.buttons.length;
    		
			if(w - this.screenRect.width() > h - this.screenRect.height()) {
				// place buttons at the size of the screen
				final int yinc = (h - n * bh) / (n - 1) + bh;
				
				for(int i = 0, x = w - bw, y = 0 ; i < n ; ++i, y += yinc) {
					this.buttons[i].setBounds(x, y, x + bw, y + bh);
				}
			} else {
				// place buttons at the bottom of the screen
				final int xinc = (w - n * bw) / (n - 1) + bw;
				
				for(int i = 0, x = 0, y = h - bh ; i < n ; ++i, x += xinc) {
					this.buttons[i].setBounds(x, y, x + bw, y + bh);
				}
			}
    	}

----------------------------------------
    private void drawSpriteLine() {
        if (areSpritesEnabled()) {
            // cache some variables for better performance
            final Sprite[] sprites_ = this.sprites;
            final int line_ = this.currentLine;
            // we copy modified sprite lines into a background buffer instead of invalidating them
            final boolean[] wasSpritePainted_ = USE_BACKGROUND_CACHE ? this.wasSpritePainted : this.wasLineModified;
            // all sprites have the same height, so we read this only once
            final int sh = getSpriteHeight();

            // check all sprites whether they are visibible, have the desired priority and are part of the current line
            for (int i = 0, left = this.gameboy.getCartridge().isGBC() ? MAX_SPRITES_VISIBLE : NUM_SPRITES; i < NUM_SPRITES && left > 0; ++i) {
                // check for each sprite whether it should be displayed on this line
                final Sprite sprite = sprites_[i];
                final int sy = sprite.getY();

                if (sprite.isDisplayable() && line_ >= sy && line_ < sy + sh) {
                    // if the sprite is also horizontally within the visible area then we paint it
                    if (sprite.isVisible()) {
                        if (!wasSpritePainted_[line_]) {
                            if (USE_BACKGROUND_CACHE) {
                                final int svy = (line_ * getScaling()) >> SCALING_MULTIPLIER_BITS;
                                final int svystop = ((line_ + 1) * getScaling()) >> VideoChip.SCALING_MULTIPLIER_BITS;
                                final int spos = svy * getScaledWidth();

                                System.arraycopy(this.pixels, spos, this.backgroundPixelsBuffer, spos, svystop * getScaledWidth() - spos);
                            }
                            wasSpritePainted_[line_] = true;
                        }
                        sprite.drawLine(line_ - sy);
                        this.areAllTilesInvalid = false;
                    }
                    // we can display only a maximum of 10 sprites per line, so we count down
                    --left;
                }
            }
        }
    }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
28734538
src/de/joergjahnke/common/extendeddevices/WavePlayer.java 47 78
src/de/joergjahnke/common/extendeddevices/WavePlayer.java 48 75
----------------------------------------
    public WavePlayer(final WaveDataProducer producer) {
        try {
            final AudioFormat audioFormat = new AudioFormat(producer.getSampleRate(), producer.getBitsPerSample(), producer.getChannels(), true, false);
            final DataLine.Info dataLineInfo = new DataLine.Info(SourceDataLine.class, audioFormat);

            this.dataLine = (SourceDataLine) AudioSystem.getLine(dataLineInfo);
            this.dataLine.open(dataLine.getFormat());
            this.dataLine.start();

            this.datalineWriterThread = new Thread() {

                @Override
                public void run() {
                    while (dataLine.isOpen()) {
                        final byte[] data = buffer.toByteArray();

                        dataLine.write(data, 0, data.length);
                        synchronized (buffer) {
                            buffer.reset();
                            try {
                                buffer.wait();
                            } catch (InterruptedException e) {
                            }
                        }
                    }
                }
            };
            this.datalineWriterThread.start();
        } catch (Exception e) {
            // we cannot not play audio, that's OK
        }
    }

----------------------------------------
        try {
            final AudioFormat audioFormat = new AudioFormat(producer.getSampleRate(), producer.getBitsPerSample(), producer.getChannels(), true, false);
            final DataLine.Info dataLineInfo = new DataLine.Info(SourceDataLine.class, audioFormat);

            this.dataLine = (SourceDataLine) AudioSystem.getLine(dataLineInfo);
            this.dataLine.open(dataLine.getFormat());
            this.dataLine.start();

            this.datalineWriterThread = new Thread() {

                @Override
                public void run() {
                    while (dataLine.isOpen()) {
                        final byte[] data = buffer.toByteArray();

                        dataLine.write(data, 0, data.length);
                        synchronized (buffer) {
                            buffer.reset();
                            try {
                                buffer.wait();
                            } catch (InterruptedException e) {
                            }
                        }
                    }
                }
            };
            this.datalineWriterThread.start();
        } catch (Exception e) {

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
28734539
src/de/joergjahnke/common/bluetooth/BluetoothOBEXClient.java 240 250
src/de/joergjahnke/common/extendeddevices/WavePlayer.java 59 72
----------------------------------------
    public void abortFileReception() {
        super.stop();

        try {
            this.local.setDiscoverable(DiscoveryAgent.NOT_DISCOVERABLE);
            this.notifier.close();
            this.notifier = null;
        } catch (Exception e) {
            // we could not completely shut down the service, what to do now?
        }
    }

----------------------------------------
                public void run() {
                    while (dataLine.isOpen()) {
                        final byte[] data = buffer.toByteArray();

                        dataLine.write(data, 0, data.length);
                        synchronized (buffer) {
                            buffer.reset();
                            try {
                                buffer.wait();
                            } catch (InterruptedException e) {
                            }
                        }
                    }
                }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
28734540
src/de/joergjahnke/common/extendeddevices/WavePlayer.java 59 72
src/de/joergjahnke/gameboy/jme/MEGameboyMIDlet.java 642 661
----------------------------------------
                public void run() {
                    while (dataLine.isOpen()) {
                        final byte[] data = buffer.toByteArray();

                        dataLine.write(data, 0, data.length);
                        synchronized (buffer) {
                            buffer.reset();
                            try {
                                buffer.wait();
                            } catch (InterruptedException e) {
                            }
                        }
                    }
                }

----------------------------------------
    private void suspend() {
        this.gameboy.pause();

        boolean reallyExit = true;

        try {
            saveState(getAppProperty("MIDlet-Name") + SUSPENDDATA_SUFFIX);
        } catch (Throwable t) {
            // show the cause of the error
            Display.getDisplay(this).setCurrent(new Alert(LocalizationSupport.getMessage("SuspendFailed"), LocalizationSupport.getMessage("FailedToStoreState"), null, AlertType.WARNING));
            t.printStackTrace();
            // we don't exit, the user might want to continue now that the suspend failed
            reallyExit = false;
            this.gameboy.resume();
        }

        if (reallyExit) {
            exit();
        }
    }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
28734542
src/de/joergjahnke/gameboy/android/AndroidGB.java 345 382
src/de/joergjahnke/gameboy/core/VideoChip.java 1244 1274
----------------------------------------
                case MENU_LOADCARTRIDGE: {
                    try {
                        // show success
                        showTimedAlert(getResources().getString(R.string.title_cartridgeLoaded), getResources().getString(R.string.msg_cartridgeLoaded).replaceFirst("\\#", data), "OK");

                        // save directory we selected from, so that this directory appears initially when attaching the next file
                        final Editor prefsEditor = this.prefs.edit();

                        this.currentlyAttachedFile = new File(data);
                        prefsEditor.putString(SETTING_FILESEARCH_STARTDIR, this.currentlyAttachedFile.getParent());
                        prefsEditor.commit();
                        
                        // check whether we have saved data from a previous game
                        InputStream saveStream = null;
                        final int index = data.lastIndexOf('.');
                        final String save = data.substring(0, index) + SAVED_GAME_FILE_EXTENSION;
                        
                        if(new File(save).exists()) {
                        	saveStream = new BufferedInputStream(new FileInputStream(save));
                        }

                        // load cartridge, start emulation
                        final InputStream romStream = new BufferedInputStream(new FileInputStream(data));

                        gameboy.load(romStream, saveStream);
                        romStream.close();
                        if(saveStream != null) saveStream.close();
                        
                        // start emulation and switch to Gameboy view
                        setSound( this.prefs.getBoolean( SETTING_SOUNDACTIVE, false ) );
    	                activateOrientationSensorNotifier( this.prefs.getBoolean( SETTING_ORIENTATIONSENSORACTIVE, false ) );
                        new Thread(gameboy).start();
                        setContentView(this.gameboyView);
                    } catch (Exception e) {
                        showAlert(getResources().getString(R.string.title_warning), 0, getResources().getString(R.string.msg_cartridgeNotLoaded).replaceFirst("\\#", data) + e, "OK", true);
                    }
                    break;
                }

----------------------------------------
    private void drawLine(final int line) {
        final int oldLine = this.currentLine;

        this.currentLine = line;

        // modifications to the background or window were made?
        if (this.wasLineModified[line]) {
            // paint the background for this line
            drawBackgroundLine();
            // paint the window for this line, if necessary
            drawWindowLine();
            // this line has been repainted
            this.wasLineModified[line] = false;
            this.wasSpritePainted[line] = false;
            this.areAllLinesModified = false;
            // sprites were painted over the background?
        } else if (this.wasSpritePainted[line]) {
            // then restore background from buffer
            final int svy = (line * getScaling()) >> SCALING_MULTIPLIER_BITS;
            final int svystop = ((line + 1) * getScaling()) >> VideoChip.SCALING_MULTIPLIER_BITS;
            final int spos = svy * getScaledWidth();

            System.arraycopy(this.backgroundPixelsBuffer, spos, this.pixels, spos, svystop * getScaledWidth() - spos);
            this.wasSpritePainted[line] = false;
        }

        // paint sprites for this line
        drawSpriteLine();

        this.currentLine = oldLine;
    }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
28734543
src/de/joergjahnke/gameboy/android/AndroidGB.java 474 490
src/de/joergjahnke/gameboy/jme/MEGameboyMIDlet.java 1339 1367
----------------------------------------
    protected void setSound(final boolean active) {
        if (active) {
            if (this.gameboy.getSoundChip().countObservers() == 0) {
                try {
                    this.gameboy.getSoundChip().addObserver(new WavePlayer(this.gameboy.getSoundChip()));
                } catch (Throwable t) {
                    // we could not add a player, that's OK
                    this.gameboy.getLogger().warning("Could not create sound player! Sound output remains deactivated.");
                    t.printStackTrace();
                }
            }
        } else {
            if (this.gameboy.getSoundChip().countObservers() > 0) {
                this.gameboy.getSoundChip().deleteObservers();
            }
        }
    }

----------------------------------------
    protected void setSound(final boolean active) {
        if (active) {
            if (this.gameboy.getSoundChip().countObservers() == 0) {
                // first try to initialize the PCMtoMIDIPlayer
                try {
                    this.gameboy.getSoundChip().addObserver(new PCMtoMIDIPlayer(this.gameboy.getSoundChip()));
                } catch (Throwable t) {
                    // if that does not work we try the WavePlayer
                    try {
                        this.gameboy.getSoundChip().addObserver(new WavePlayer(this.gameboy.getSoundChip()));
                    } catch (Throwable t2) {
                        // we could not add a player, that's OK
                        this.gameboy.getLogger().warning(LocalizationSupport.getMessage("CouldNotCreateSoundPlayer"));
                        t2.printStackTrace();
                    }
                }
            }
        } else {
            if (this.gameboy.getSoundChip().countObservers() > 0) {
                notifySoundPlayer(PCMtoMIDIPlayer.SIGNAL_STOP);
                this.gameboy.getSoundChip().deleteObservers();
            }
        }
        try {
            this.settings.setBoolean(SETTING_SOUNDACTIVE, active);
        } catch (Exception e) {
            // we couldn't store the setting, that's OK
        }
    }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
28734545
src/de/joergjahnke/gameboy/android/AndroidGB.java 508 513
src/de/joergjahnke/gameboy/core/TileData.java 101 109
----------------------------------------
		} else {
			if(this.orientationSensorNotifier != null) {
				this.orientationSensorNotifier.stop();
				this.orientationSensorNotifier = null;
			}
		}

----------------------------------------
    protected final byte[][] getColorIndexes() {
        // we can use the current pixels and don't have to recalculate?
        if (this.colorsIdxs == null) {
            // no, we have to reclaculate anew
            this.colorsIdxs = createColorIndexes();
        }

        return this.colorsIdxs;
    }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
28734547
src/de/joergjahnke/gameboy/core/VideoChip.java 1107 1115
src/de/joergjahnke/gameboy/jme/BtMEGameboyMIDlet.java 130 165
----------------------------------------
        if (this.currentLine < SCREEN_HEIGHT) {
            // trigger OAM IRQ if necessary
            if (isLCDEnabled()) {
                checkOAMIRQ();
            }

            lcdCycles = OAM_PERIOD;
            this.mode = MODE_OAM;
        } else {

----------------------------------------
                        if (c == okCommand) {
                            // retrieve name of the selected program or snapshot
                            String name = fileList.getString(fileList.getSelectedIndex());

                            // gather data to send
                            byte[] data = null;

                            if (name.endsWith(SAVE_EXTENSION)) {
                                data = getSettings().getString(name, null).getBytes();
                            } else {
                                RecordStore rs = null;

                                try {
                                    // open the suspend "file"
                                    rs = RecordStore.openRecordStore(name, false);

                                    name += SNAPSHOT_EXTENSION;
                                    data = rs.getRecord(1);
                                } catch (Throwable t) {
                                    // will be handled below since data is still null
                                } finally {
                                    try {
                                        rs.closeRecordStore();
                                    } catch (Exception e) {
                                        // we could not close the record store, that hopefully does not hinder other actions on it and it was closed anyway...
                                    }
                                }
                            }

                            // send data
                            if (null != data) {
                                showSelectDeviceForm(name, data);
                            } else {
                                display.setCurrent(new Alert(LocalizationSupport.getMessage("FileTransferFailed"), LocalizationSupport.getMessage("NoDataToSend"), null, AlertType.WARNING), previous);
                            }
                        }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
28734546
src/de/joergjahnke/gameboy/jme/BtMEGameboyMIDlet.java 130 165
src/de/joergjahnke/gameboy/jme/MEGameboyMIDlet.java 535 541
----------------------------------------
                        if (c == okCommand) {
                            // retrieve name of the selected program or snapshot
                            String name = fileList.getString(fileList.getSelectedIndex());

                            // gather data to send
                            byte[] data = null;

                            if (name.endsWith(SAVE_EXTENSION)) {
                                data = getSettings().getString(name, null).getBytes();
                            } else {
                                RecordStore rs = null;

                                try {
                                    // open the suspend "file"
                                    rs = RecordStore.openRecordStore(name, false);

                                    name += SNAPSHOT_EXTENSION;
                                    data = rs.getRecord(1);
                                } catch (Throwable t) {
                                    // will be handled below since data is still null
                                } finally {
                                    try {
                                        rs.closeRecordStore();
                                    } catch (Exception e) {
                                        // we could not close the record store, that hopefully does not hinder other actions on it and it was closed anyway...
                                    }
                                }
                            }

                            // send data
                            if (null != data) {
                                showSelectDeviceForm(name, data);
                            } else {
                                display.setCurrent(new Alert(LocalizationSupport.getMessage("FileTransferFailed"), LocalizationSupport.getMessage("NoDataToSend"), null, AlertType.WARNING), previous);
                            }
                        }

----------------------------------------
        for (int i = 0, to = snapshotList == null ? 0 : snapshotList.size(); i < to; ++i) {
            final String name = snapshotList.elementAt(i).toString();

            if (name.startsWith(search)) {
                result.addElement(name);
            }
        }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
28734548
src/de/joergjahnke/gameboy/jme/BtMEGameboyMIDlet.java 130 165
src/de/joergjahnke/gameboy/jme/MEGameboyMIDlet.java 715 722
----------------------------------------
                        if (c == okCommand) {
                            // retrieve name of the selected program or snapshot
                            String name = fileList.getString(fileList.getSelectedIndex());

                            // gather data to send
                            byte[] data = null;

                            if (name.endsWith(SAVE_EXTENSION)) {
                                data = getSettings().getString(name, null).getBytes();
                            } else {
                                RecordStore rs = null;

                                try {
                                    // open the suspend "file"
                                    rs = RecordStore.openRecordStore(name, false);

                                    name += SNAPSHOT_EXTENSION;
                                    data = rs.getRecord(1);
                                } catch (Throwable t) {
                                    // will be handled below since data is still null
                                } finally {
                                    try {
                                        rs.closeRecordStore();
                                    } catch (Exception e) {
                                        // we could not close the record store, that hopefully does not hinder other actions on it and it was closed anyway...
                                    }
                                }
                            }

                            // send data
                            if (null != data) {
                                showSelectDeviceForm(name, data);
                            } else {
                                display.setCurrent(new Alert(LocalizationSupport.getMessage("FileTransferFailed"), LocalizationSupport.getMessage("NoDataToSend"), null, AlertType.WARNING), previous);
                            }
                        }

----------------------------------------
        } catch (Throwable t) {
            if (hasSuspendData) {
                status = STATUS_LOAD_FAILED;
                t.printStackTrace();
            } else {
                status = STATUS_NOTHING_LOADED;
            }
        } finally {

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
28734594
src/de/joergjahnke/common/jme/WavePlayer.java 128 151
src/de/joergjahnke/gameboy/jme/MEGameboyMIDlet.java 715 722
----------------------------------------
                try {
                    final Player player = Manager.createPlayer(new ByteArrayInputStream(cb), "audio/x-wav");

                    try {
                        player.realize();
                    } catch (Exception e) {
                        // we could not realize the player, this will be done later
                    }
                    try {
                        player.prefetch();
                    } catch (Exception e) {
                        // we could not prefetch player data, this will be done later
                    }
                    player.addPlayerListener(this);
                    // we currently don't play a sound?
                    if (null == this.currentPlayer) {
                        // then start this player
                        this.currentPlayer = player;
                        this.currentPlayer.start();
                    } else {
                        // otherwise add it to the queue
                        this.players.addElement(player);
                    }
                } catch (Exception e) {

----------------------------------------
        } catch (Throwable t) {
            if (hasSuspendData) {
                status = STATUS_LOAD_FAILED;
                t.printStackTrace();
            } else {
                status = STATUS_NOTHING_LOADED;
            }
        } finally {

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
28734549
src/de/joergjahnke/gameboy/jme/BtMEGameboyMIDlet.java 130 165
src/de/joergjahnke/gameboy/jme/BtMEGameboyMIDlet.java 442 452
----------------------------------------
                        if (c == okCommand) {
                            // retrieve name of the selected program or snapshot
                            String name = fileList.getString(fileList.getSelectedIndex());

                            // gather data to send
                            byte[] data = null;

                            if (name.endsWith(SAVE_EXTENSION)) {
                                data = getSettings().getString(name, null).getBytes();
                            } else {
                                RecordStore rs = null;

                                try {
                                    // open the suspend "file"
                                    rs = RecordStore.openRecordStore(name, false);

                                    name += SNAPSHOT_EXTENSION;
                                    data = rs.getRecord(1);
                                } catch (Throwable t) {
                                    // will be handled below since data is still null
                                } finally {
                                    try {
                                        rs.closeRecordStore();
                                    } catch (Exception e) {
                                        // we could not close the record store, that hopefully does not hinder other actions on it and it was closed anyway...
                                    }
                                }
                            }

                            // send data
                            if (null != data) {
                                showSelectDeviceForm(name, data);
                            } else {
                                display.setCurrent(new Alert(LocalizationSupport.getMessage("FileTransferFailed"), LocalizationSupport.getMessage("NoDataToSend"), null, AlertType.WARNING), previous);
                            }
                        }

----------------------------------------
    public void menuAction(final String item) {
        if (item.equals(this.btMenuText)) {
            this.btMenu.show(Display.getDisplay(this));
        } else if (item.equals(this.sendFileMenuText)) {
            showSendFileForm();
        } else if (item.equals(this.receiveFileMenuText)) {
            showReceiveFileForm();
        } else {
            super.menuAction(item);
        }
    }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
28734552
src/de/joergjahnke/gameboy/jme/MEGameboyMIDlet.java 1444 1469
src/de/joergjahnke/gameboy/jme/BtMEGameboyMIDlet.java 442 452
----------------------------------------
    public void menuAction(final String item) {
        if (item.equals(this.playMenuText)) {
            showSelectGameForm();
            // we want to show the about dialog?
        } else if (item.equals(this.aboutMenuText)) {
            showAboutForm();
            // we want to display the program help?
        } else if (item.equals(this.helpMenuText)) {
            showHelpForm();
            // we want to display the log?
        } else if (item.equals(this.showLogCommand.getLabel())) {
            showLogForm();
            // we want to edit the emulator settings?
        } else if (item.equals(this.editSettingsMenuText)) {
            showSettingsForm();
            // we want to search the local file system for Gameboy images?
        } else if (item.equals(this.searchProgramsMenuText)) {
            CollectionUtils.removeAll(this.programs, this.fsHandler.getCachedProgramList());
            showSelectDirectoryForm();
            // we want to exit the emulator?
        } else if (item.equals(this.exitMenuText)) {
            exit();
        } else if (item.equals(this.assignKeysMenuText)) {
            showAssignButtonsCanvas();
        }
    }

----------------------------------------
    public void menuAction(final String item) {
        if (item.equals(this.btMenuText)) {
            this.btMenu.show(Display.getDisplay(this));
        } else if (item.equals(this.sendFileMenuText)) {
            showSendFileForm();
        } else if (item.equals(this.receiveFileMenuText)) {
            showReceiveFileForm();
        } else {
            super.menuAction(item);
        }
    }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
28734550
src/de/joergjahnke/gameboy/jme/BtMEGameboyMIDlet.java 130 165
src/de/joergjahnke/common/jme/WavePlayer.java 126 161
----------------------------------------
                        if (c == okCommand) {
                            // retrieve name of the selected program or snapshot
                            String name = fileList.getString(fileList.getSelectedIndex());

                            // gather data to send
                            byte[] data = null;

                            if (name.endsWith(SAVE_EXTENSION)) {
                                data = getSettings().getString(name, null).getBytes();
                            } else {
                                RecordStore rs = null;

                                try {
                                    // open the suspend "file"
                                    rs = RecordStore.openRecordStore(name, false);

                                    name += SNAPSHOT_EXTENSION;
                                    data = rs.getRecord(1);
                                } catch (Throwable t) {
                                    // will be handled below since data is still null
                                } finally {
                                    try {
                                        rs.closeRecordStore();
                                    } catch (Exception e) {
                                        // we could not close the record store, that hopefully does not hinder other actions on it and it was closed anyway...
                                    }
                                }
                            }

                            // send data
                            if (null != data) {
                                showSelectDeviceForm(name, data);
                            } else {
                                display.setCurrent(new Alert(LocalizationSupport.getMessage("FileTransferFailed"), LocalizationSupport.getMessage("NoDataToSend"), null, AlertType.WARNING), previous);
                            }
                        }

----------------------------------------
            if (this.currentBufferPos >= cb.length) {
                // then initialize a new player
                try {
                    final Player player = Manager.createPlayer(new ByteArrayInputStream(cb), "audio/x-wav");

                    try {
                        player.realize();
                    } catch (Exception e) {
                        // we could not realize the player, this will be done later
                    }
                    try {
                        player.prefetch();
                    } catch (Exception e) {
                        // we could not prefetch player data, this will be done later
                    }
                    player.addPlayerListener(this);
                    // we currently don't play a sound?
                    if (null == this.currentPlayer) {
                        // then start this player
                        this.currentPlayer = player;
                        this.currentPlayer.start();
                    } else {
                        // otherwise add it to the queue
                        this.players.addElement(player);
                    }
                } catch (Exception e) {
                    // we could not create a player, switch off the sound
                    e.printStackTrace();
                    producer.deleteObservers();
                }

                // switch to the next buffer
                ++this.currentBuffer;
                this.currentBuffer %= this.buffers.length;
                this.currentBufferPos = WAV_HEADER.length;
            }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
28734551
src/de/joergjahnke/gameboy/jme/BtMEGameboyMIDlet.java 186 232
src/de/joergjahnke/gameboy/jme/BtMEGameboyMIDlet.java 187 229
----------------------------------------
            public void run() {
                try {
                    // create a sender that sends the file via Bluetooth
                    final de.joergjahnke.common.bluetooth.BluetoothOBEXClient sender = new de.joergjahnke.common.bluetooth.BluetoothOBEXClient();
                    // search OBEX devices
                    final Hashtable devicesServiceMap = sender.searchOBEXDevices();
                    final Vector devices = new Vector();

                    CollectionUtils.addAll(devices, devicesServiceMap.keys());
                    CollectionUtils.sort(devices);

                    // we have found at least one receiver?
                    if (!devices.isEmpty()) {
                        // show receiver selection
                        final List devicesList = new List(LocalizationSupport.getMessage("SelectDevice"), List.IMPLICIT);

                        for (final Enumeration en = devices.elements(); en.hasMoreElements();) {
                            final javax.bluetooth.RemoteDevice device = (javax.bluetooth.RemoteDevice) en.nextElement();

                            devicesList.append(de.joergjahnke.common.bluetooth.BluetoothDevice.getRemoteDeviceName(device), null);
                        }

                        devicesList.addCommand(backCommand);
                        devicesList.addCommand(okCommand);
                        devicesList.setSelectCommand(okCommand);
                        devicesList.setCommandListener(new CommandListener() {

                            public void commandAction(final Command c, final Displayable d) {
                                if (c == okCommand) {
                                    // send file to the selected server
                                    final javax.bluetooth.RemoteDevice device = (javax.bluetooth.RemoteDevice) devices.elementAt(devicesList.getSelectedIndex());

                                    sendFile(sender, device, (javax.bluetooth.ServiceRecord) devicesServiceMap.get(device), name, data);
                                } else {
                                    display.setCurrent(previous);
                                }
                            }
                        });

                        display.setCurrent(devicesList);
                    } else {
                        display.setCurrent(new Alert(LocalizationSupport.getMessage("NoBluetoothDevice"), LocalizationSupport.getMessage("NoBluetoothDeviceMsg"), null, AlertType.INFO), previous);
                    }
                } catch (IOException e) {
                    display.setCurrent(new Alert(LocalizationSupport.getMessage("FileTransferFailed"), LocalizationSupport.getMessage("TransferringFileFailed") + e, null, AlertType.WARNING), previous);
                }
            }

----------------------------------------
                try {
                    // create a sender that sends the file via Bluetooth
                    final de.joergjahnke.common.bluetooth.BluetoothOBEXClient sender = new de.joergjahnke.common.bluetooth.BluetoothOBEXClient();
                    // search OBEX devices
                    final Hashtable devicesServiceMap = sender.searchOBEXDevices();
                    final Vector devices = new Vector();

                    CollectionUtils.addAll(devices, devicesServiceMap.keys());
                    CollectionUtils.sort(devices);

                    // we have found at least one receiver?
                    if (!devices.isEmpty()) {
                        // show receiver selection
                        final List devicesList = new List(LocalizationSupport.getMessage("SelectDevice"), List.IMPLICIT);

                        for (final Enumeration en = devices.elements(); en.hasMoreElements();) {
                            final javax.bluetooth.RemoteDevice device = (javax.bluetooth.RemoteDevice) en.nextElement();

                            devicesList.append(de.joergjahnke.common.bluetooth.BluetoothDevice.getRemoteDeviceName(device), null);
                        }

                        devicesList.addCommand(backCommand);
                        devicesList.addCommand(okCommand);
                        devicesList.setSelectCommand(okCommand);
                        devicesList.setCommandListener(new CommandListener() {

                            public void commandAction(final Command c, final Displayable d) {
                                if (c == okCommand) {
                                    // send file to the selected server
                                    final javax.bluetooth.RemoteDevice device = (javax.bluetooth.RemoteDevice) devices.elementAt(devicesList.getSelectedIndex());

                                    sendFile(sender, device, (javax.bluetooth.ServiceRecord) devicesServiceMap.get(device), name, data);
                                } else {
                                    display.setCurrent(previous);
                                }
                            }
                        });

                        display.setCurrent(devicesList);
                    } else {
                        display.setCurrent(new Alert(LocalizationSupport.getMessage("NoBluetoothDevice"), LocalizationSupport.getMessage("NoBluetoothDeviceMsg"), null, AlertType.INFO), previous);
                    }
                } catch (IOException e) {

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
28734553
src/de/joergjahnke/gameboy/swing/GameboyFrame.java 350 383
src/de/joergjahnke/common/android/OrientationSensorNotifier.java 103 128
----------------------------------------
    private int loadState(final String filename) {
        this.gameboy.pause();
        this.gameboy.stop();

        boolean hasSuspendData = false;
        int status = STATUS_NOTHING_LOADED;
        final File suspend = new File(filename);
        DataInputStream in = null;

        try {
            in = new DataInputStream(new BufferedInputStream(new FileInputStream(suspend)));

            hasSuspendData = true;

            // reload the old ROM file
            loadROM(in.readUTF());
            // load the emulator state
            this.gameboy.deserialize(in);

            status = STATUS_LOAD_OK;
        } catch (Throwable t) {
            if (hasSuspendData) {
                status = STATUS_LOAD_FAILED;
                t.printStackTrace();
            }
        } finally {
            try {
                in.close();
            } catch (Exception e) {
            }
        }

        return status;
    }

----------------------------------------
	public void start() {
		if(!this.isRunning) {
			this.isRunning = true;
			this.thread = new Thread() { 
				@Override
				public void run() {
					while(isRunning) {
						// wait for some time until the next sensor read
						try { sleep(delay); } catch(InterruptedException e) {}
						
						// read sensor values
						final int num = Sensors.getNumSensorValues(Sensors.SENSOR_ORIENTATION);
						final float[] sensorValues = new float[num];
						
						Sensors.readSensor(Sensors.SENSOR_ORIENTATION, sensorValues);
						
						// pass these values on to all listeners
						for(int i = 0, to = listeners.size() ; i < to ; ++i) {
							listeners.get(i).onOrientationChange(sensorValues);
						}
					}
				}
			};
			this.thread.start();
		}
	}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
28734554
src/de/joergjahnke/gameboy/jme/MEGameboyMIDlet.java 407 413
src/de/joergjahnke/common/android/OrientationSensorNotifier.java 108 124
----------------------------------------
        if (null == cartridgeImage) {
            try {
                cartridgeImage = Image.createImage("/res/drawable/cartridge.png");
            } catch (Exception e) {
                // we can work without the image
            }
        }

----------------------------------------
				public void run() {
					while(isRunning) {
						// wait for some time until the next sensor read
						try { sleep(delay); } catch(InterruptedException e) {}
						
						// read sensor values
						final int num = Sensors.getNumSensorValues(Sensors.SENSOR_ORIENTATION);
						final float[] sensorValues = new float[num];
						
						Sensors.readSensor(Sensors.SENSOR_ORIENTATION, sensorValues);
						
						// pass these values on to all listeners
						for(int i = 0, to = listeners.size() ; i < to ; ++i) {
							listeners.get(i).onOrientationChange(sensorValues);
						}
					}
				}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
28734582
src/de/joergjahnke/gameboy/core/WhiteNoiseChannel.java 137 142
src/de/joergjahnke/gameboy/core/VideoChip.java 1138 1143
----------------------------------------
    public void serialize(final DataOutputStream out) throws IOException {
        out.writeInt(this.envelopeSweeps);
        out.writeInt(this.envelopeSweepsLeft);
        out.writeInt(this.envelopeDirection);
        out.writeBoolean(this.isSmallStepWidth);
    }

----------------------------------------
        if (isLCDEnabled()) {
            cpu.requestIRQ(CPU.IRQ_VBLANK);
            if (isVBlankIRQEnabled()) {
                cpu.requestIRQ(CPU.IRQ_LCDSTAT);
            }
        }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
28734583
src/de/joergjahnke/gameboy/core/SquareWaveChannel.java 116 122
src/de/joergjahnke/gameboy/core/VideoChip.java 1553 1591
----------------------------------------
        if (this.sweepTime > 0) {
            --this.sweepTimeLeft;
            if (this.sweepTimeLeft <= 0) {
                setFrequency((this.frequencyGB + this.sweepDirection * (this.frequencyGB >> this.sweepShift)) & 0x7ff);
                this.sweepTimeLeft = this.sweepTime;
            }
        }

----------------------------------------
    public void deserialize(final DataInputStream in) throws IOException {
        this.nextUpdate = in.readLong();
        this.mode = in.readInt();
        this.currentLine = in.readInt();
        this.isLCDEnabled = in.readBoolean();
        this.isWindowEnabled = in.readBoolean();
        this.tileDataArea = in.readInt();
        this.spriteHeight = in.readInt();
        this.areSpritesEnabled = in.readBoolean();
        this.isBGBlank = in.readBoolean();
        this.haveSpritesPriority = in.readBoolean();
        this.scrollX = in.readInt();
        this.scrollY = in.readInt();
        this.windowX = in.readInt();
        this.windowY = in.readInt();
        this.nextWindowY = in.readInt();
        this.windowLine = in.readInt();
        this.isHBlankIRQEnabled = in.readBoolean();
        this.isVBlankIRQEnabled = in.readBoolean();
        this.isOAMIRQEnabled = in.readBoolean();
        this.isCoincidenceIRQEnabled = in.readBoolean();
        setGBCVRAMBank(in.readInt());
        SerializationUtils.deserialize(in, this.vRAM);
        /*this.scalingMult =*/ in.readInt();
        //setScaling(this.scalingMult);
        this.isPaintFrame = in.readBoolean();
        this.bgTileMapAdr = in.readInt();
        this.windowTileMapAdr = in.readInt();
        this.cpuSpeedMult = in.readInt();
        SerializationUtils.deserialize(in, this.colorBytes);
        SerializationUtils.deserialize(in, this.palettes);
        SerializationUtils.deserialize(in, this.tiles);
        SerializationUtils.deserialize(in, this.sprites);
        SerializationUtils.deserialize(in, this.backgroundPriorities);
        // have all tiles and lines be repainted
        this.areAllTilesInvalid = false;
        invalidateTiles();
        invalidateLines();
    }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
28734587
src/de/joergjahnke/gameboy/core/WhiteNoiseChannel.java 86 97
src/de/joergjahnke/gameboy/core/SquareWaveChannel.java 112 132
----------------------------------------
    public void update() {
        --this.length;

        // modify amplitude if envelope sweep time has passed
        if (this.envelopeSweeps > 0) {
            --this.envelopeSweepsLeft;
            if (this.envelopeSweepsLeft <= 0) {
                this.volume = Math.min(MAX_VOLUME, Math.max(0, this.volume + this.envelopeDirection));
                this.envelopeSweepsLeft = this.envelopeSweeps;
            }
        }
    }

----------------------------------------
    public void update() {
        --this.length;

        // modify frequency if sweep time has passed
        if (this.sweepTime > 0) {
            --this.sweepTimeLeft;
            if (this.sweepTimeLeft <= 0) {
                setFrequency((this.frequencyGB + this.sweepDirection * (this.frequencyGB >> this.sweepShift)) & 0x7ff);
                this.sweepTimeLeft = this.sweepTime;
            }
        }

        // modify amplitude if envelope sweep time has passed
        if (this.envelopeSweeps > 0) {
            --this.envelopeSweepsLeft;
            if (this.envelopeSweepsLeft <= 0) {
                this.volume = Math.min(MAX_VOLUME, Math.max(0, this.volume + this.envelopeDirection));
                this.envelopeSweepsLeft = this.envelopeSweeps;
            }
        }
    }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
28734592
src/de/joergjahnke/common/bluetooth/BluetoothOBEXClient.java 171 220
src/de/joergjahnke/common/bluetooth/BluetoothOBEXClient.java 172 213
----------------------------------------
            public int onPut(final Operation op) {
                try {
                    // retrieve file name
                    final HeaderSet hs = op.getReceivedHeaders();

                    if (hs != null) {
                        final String name = hs.getHeader(HeaderSet.NAME).toString();
                        long len = -1;

                        try {
                            len = ((Long) hs.getHeader(HeaderSet.LENGTH)).longValue();
                        } catch (Exception e) {
                            // the header field might not exist, that's no problem
                        }

                        notifyTransferStarted(name, len);

                        // read data from stream
                        final InputStream is = op.openInputStream();
                        final ByteArrayOutputStream os = new ByteArrayOutputStream();
                        final byte[] buf = new byte[TRANSFER_CHUNK_SIZE];

                        for (int n = 0, read; (read = is.read(buf)) > 0;) {
                            os.write(buf, 0, read);
                            n += read;
                            notifyTransferProgressed(n);
                        }

                        // convert into a byte array and put into the results map
                        final byte[] result = os.toByteArray();

                        notifyFileReceived(name, result);

                        // free resources
                        os.close();
                        is.close();
                        op.close();

                        return ResponseCodes.OBEX_HTTP_OK;
                    } else {
                        return ResponseCodes.OBEX_HTTP_BAD_REQUEST;
                    }
                } catch (Exception e) {
                    notifyErrorOccurred(e);

                    return ResponseCodes.OBEX_HTTP_INTERNAL_ERROR;
                } finally {
                    abortFileReception();
                }
            }

----------------------------------------
                try {
                    // retrieve file name
                    final HeaderSet hs = op.getReceivedHeaders();

                    if (hs != null) {
                        final String name = hs.getHeader(HeaderSet.NAME).toString();
                        long len = -1;

                        try {
                            len = ((Long) hs.getHeader(HeaderSet.LENGTH)).longValue();
                        } catch (Exception e) {
                            // the header field might not exist, that's no problem
                        }

                        notifyTransferStarted(name, len);

                        // read data from stream
                        final InputStream is = op.openInputStream();
                        final ByteArrayOutputStream os = new ByteArrayOutputStream();
                        final byte[] buf = new byte[TRANSFER_CHUNK_SIZE];

                        for (int n = 0, read; (read = is.read(buf)) > 0;) {
                            os.write(buf, 0, read);
                            n += read;
                            notifyTransferProgressed(n);
                        }

                        // convert into a byte array and put into the results map
                        final byte[] result = os.toByteArray();

                        notifyFileReceived(name, result);

                        // free resources
                        os.close();
                        is.close();
                        op.close();

                        return ResponseCodes.OBEX_HTTP_OK;
                    } else {
                        return ResponseCodes.OBEX_HTTP_BAD_REQUEST;
                    }
                } catch (Exception e) {

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
28734597
src/de/joergjahnke/gameboy/jme/MEGameboyMIDlet.java 715 722
src/de/joergjahnke/gameboy/swing/GameboyFrame.java 370 375
----------------------------------------
        } catch (Throwable t) {
            if (hasSuspendData) {
                status = STATUS_LOAD_FAILED;
                t.printStackTrace();
            } else {
                status = STATUS_NOTHING_LOADED;
            }
        } finally {

----------------------------------------
        } catch (Throwable t) {
            if (hasSuspendData) {
                status = STATUS_LOAD_FAILED;
                t.printStackTrace();
            }
        } finally {

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
28734593
src/de/joergjahnke/common/jme/WavePlayer.java 128 151
src/de/joergjahnke/gameboy/swing/GameboyFrame.java 370 375
----------------------------------------
                try {
                    final Player player = Manager.createPlayer(new ByteArrayInputStream(cb), "audio/x-wav");

                    try {
                        player.realize();
                    } catch (Exception e) {
                        // we could not realize the player, this will be done later
                    }
                    try {
                        player.prefetch();
                    } catch (Exception e) {
                        // we could not prefetch player data, this will be done later
                    }
                    player.addPlayerListener(this);
                    // we currently don't play a sound?
                    if (null == this.currentPlayer) {
                        // then start this player
                        this.currentPlayer = player;
                        this.currentPlayer.start();
                    } else {
                        // otherwise add it to the queue
                        this.players.addElement(player);
                    }
                } catch (Exception e) {

----------------------------------------
        } catch (Throwable t) {
            if (hasSuspendData) {
                status = STATUS_LOAD_FAILED;
                t.printStackTrace();
            }
        } finally {

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
28734595
src/de/joergjahnke/common/jme/WavePlayer.java 128 151
src/de/joergjahnke/gameboy/core/CPU.java 329 362
----------------------------------------
                try {
                    final Player player = Manager.createPlayer(new ByteArrayInputStream(cb), "audio/x-wav");

                    try {
                        player.realize();
                    } catch (Exception e) {
                        // we could not realize the player, this will be done later
                    }
                    try {
                        player.prefetch();
                    } catch (Exception e) {
                        // we could not prefetch player data, this will be done later
                    }
                    player.addPlayerListener(this);
                    // we currently don't play a sound?
                    if (null == this.currentPlayer) {
                        // then start this player
                        this.currentPlayer = player;
                        this.currentPlayer.start();
                    } else {
                        // otherwise add it to the queue
                        this.players.addElement(player);
                    }
                } catch (Exception e) {

----------------------------------------
    private void checkEvents() {
        final long cycles_ = this.cycles;
        final VideoChip video_ = this.video;

        // a timer request?
        if (cycles_ >= this.timer.getNextIRQRequest()) {
            // then trigger IRQ and restart timer
            requestIRQ(IRQ_TIMER);
            this.timer.restart();
        }

        // the video chip needs to be updated?
        if (cycles_ >= video_.getNextUpdate()) {
            // then update the video chip
            video_.update(cycles_);
            // continue HDMA if necessary
            if (isHDMARunning() && video_.getLCDLine() < VideoChip.SCREEN_HEIGHT && video_.getVideoMode() == VideoChip.MODE_HBLANK) {
                performHDMA(1);
            }
        }

        this.nextEvent = Math.min(this.timer.getNextIRQRequest(), video_.getNextUpdate());

        // sound is also active?
        if (this.isSoundOn && this.hasSoundListener) {
            // another sound sample series needs to be created?
            if (cycles_ >= this.sound.getNextUpdate()) {
                this.sound.update(cycles_);
            }

            // the next event might also be triggered by the sound chip
            this.nextEvent = Math.min(this.nextEvent, this.sound.getNextUpdate());
        }
    }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
28734599
src/de/joergjahnke/gameboy/jme/MEGameboyMIDlet.java 1028 1040
src/de/joergjahnke/gameboy/jme/MEGameboyMIDlet.java 1027 1044
----------------------------------------
                                try {
                                    // remove the snapshot from the device...
                                    RecordStore.deleteRecordStore(name);

                                    // ...and also from the list of snapshots
                                    final Vector snapshots = getSnapshots();

                                    snapshots.removeElement(name);
                                    setSnapshots(snapshots);

                                    // inform the user about the successful removal
                                    display.setCurrent(new Alert(LocalizationSupport.getMessage("RemovedSnapshotData"), LocalizationSupport.getMessage("RemovedSnapshotDataFor") + " " + name, null, AlertType.INFO), previous);
                                } catch (Exception e) {

----------------------------------------
                            } else {
                                try {
                                    // remove the snapshot from the device...
                                    RecordStore.deleteRecordStore(name);

                                    // ...and also from the list of snapshots
                                    final Vector snapshots = getSnapshots();

                                    snapshots.removeElement(name);
                                    setSnapshots(snapshots);

                                    // inform the user about the successful removal
                                    display.setCurrent(new Alert(LocalizationSupport.getMessage("RemovedSnapshotData"), LocalizationSupport.getMessage("RemovedSnapshotDataFor") + " " + name, null, AlertType.INFO), previous);
                                } catch (Exception e) {
                                    display.setCurrent(new Alert(LocalizationSupport.getMessage("CouldNotRemoveSnapshotData"), LocalizationSupport.getMessage("FailedToRemoveSnapshotDataFor") + " " + name, null, AlertType.WARNING), previous);
                                    e.printStackTrace();
                                }
                            }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
28734600
src/de/joergjahnke/gameboy/jme/MEGameboyMIDlet.java 1318 1326
src/de/joergjahnke/common/jme/Menu.java 276 285
----------------------------------------
                        if (isRestartRequired) {
                            display.callSerially(
                                    new Runnable() {

                                        public void run() {
                                            display.setCurrent(new Alert(LocalizationSupport.getMessage("RestartRequired"), LocalizationSupport.getMessage("SomeSettingsRequireRestart"), null, AlertType.INFO));
                                        }
                                    });
                        }

----------------------------------------
            } else if (this.listener != null) {
                // otherwise close the menu and execute the menu action
                this.currentDisplay.setCurrent(getPreviousRoot());
                this.currentDisplay.callSerially(new Runnable() {

                    public void run() {
                        listener.menuAction(item.toString());
                    }
                });
            }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
28734601
src/de/joergjahnke/gameboy/jme/MEGameboyMIDlet.java 1318 1326
src/de/joergjahnke/gameboy/swing/GameboyFrame.java 1043 1059
----------------------------------------
                        if (isRestartRequired) {
                            display.callSerially(
                                    new Runnable() {

                                        public void run() {
                                            display.setCurrent(new Alert(LocalizationSupport.getMessage("RestartRequired"), LocalizationSupport.getMessage("SomeSettingsRequireRestart"), null, AlertType.INFO));
                                        }
                                    });
                        }

----------------------------------------
            if (!(message.startsWith("Emulator working at ") && message.indexOf("performance") > 0)) {
                // otherwise we have a normal message and display this for a short time
                this.jLabelMessages.setText(message);
                // clear the message after 5 seconds
                if (null != this.statusMessageTimer) {
                    this.statusMessageTimer.cancel();
                }
                this.statusMessageTimer = new Timer();
                this.statusMessageTimer.schedule(
                        new TimerTask() {

                            public void run() {
                                jLabelMessages.setText("");
                                statusMessageTimer = null;
                            }
                        }, 5000);
            }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
28734602
src/de/joergjahnke/common/emulation/PerformanceMeter.java 105 123
src/de/joergjahnke/gameboy/core/Cartridge.java 800 820
----------------------------------------
            if (isDoThrottling()) {
                // calculate time and CPU cycles difference from last measurement
                final long timeDiff = System.currentTimeMillis() - this.lastCorrectionTime;
                final long cyclesDiff = cycles - this.lastCorrectionCycles;
                // this is what we would have expected for out target CPU speed
                final long expectedCycles = timeDiff * getTargetSpeed() / 1000 * SPEED_TARGET_PERCENTAGE / 100;

                // we have more cycles processed?
                if (cyclesDiff > expectedCycles) {
                    // then calculate how long we should wait
                    final long waitTime = 1000 * (cyclesDiff - expectedCycles) / getTargetSpeed();

                    // this is at least the minimum wait time?
                    if (waitTime >= MINIMUM_WAIT_TIME) {
                        // then wait for the calculated time
                        this.cpu.throttle(waitTime);
                    }
                }
            }

----------------------------------------
        private void updateClock() {
            if (isClockActive()) {
                if (SYNCHRONIZE_RTC_WITH_CPU) {
                    // we calculate the emulator time that has passed...
                    final CPU cpu = gameboy.getCPU();
                    final long passedMillis = (cpu.getCycles() - this.lastRTCUpdate) * 1000 / this.cpuSpeed;

                    // ...and add this time to the clock
                    this.clock.setTime(this.clock.getTime() + passedMillis);
                    this.lastRTCUpdate = cpu.getCycles();
                } else {
                    // we determine the time that has passed...
                    final long now = new Date().getTime();
                    final long passedMillis = now - this.lastRTCUpdate;

                    // ...and add this time to the clock
                    this.clock.setTime(this.clock.getTime() + passedMillis);
                    this.lastRTCUpdate = now;
                }
            }
        }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
28734603
src/de/joergjahnke/common/jme/FileBrowser.java 130 160
src/de/joergjahnke/common/jme/FileBrowser.java 132 156
----------------------------------------
            public void run() {
                // retrieve contents of the new directory and add all directories to the choice list
                try {
                    currentFiles.removeAllElements();

                    if (null == selected || "".equals(selected)) {
                        for (final Enumeration en = javax.microedition.io.file.FileSystemRegistry.listRoots(); en.hasMoreElements();) {
                            currentFiles.addElement(en.nextElement());
                        }
                    } else {
                        final String url = "file:///" + selected;
                        final javax.microedition.io.file.FileConnection dirConn = (javax.microedition.io.file.FileConnection) Connector.open(url, Connector.READ);

                        for (final Enumeration en = dirConn.list(); en.hasMoreElements();) {
                            final String file = en.nextElement().toString();

                            for (int i = 0; i < filters.size(); ++i) {
                                if (file.endsWith(filters.elementAt(i).toString())) {
                                    currentFiles.addElement(file);
                                    break;
                                }
                            }
                        }
                    }

                    showFiles();
                } catch (Exception e) {
                    e.printStackTrace();
                    onError(e);
                }
            }

----------------------------------------
                try {
                    currentFiles.removeAllElements();

                    if (null == selected || "".equals(selected)) {
                        for (final Enumeration en = javax.microedition.io.file.FileSystemRegistry.listRoots(); en.hasMoreElements();) {
                            currentFiles.addElement(en.nextElement());
                        }
                    } else {
                        final String url = "file:///" + selected;
                        final javax.microedition.io.file.FileConnection dirConn = (javax.microedition.io.file.FileConnection) Connector.open(url, Connector.READ);

                        for (final Enumeration en = dirConn.list(); en.hasMoreElements();) {
                            final String file = en.nextElement().toString();

                            for (int i = 0; i < filters.size(); ++i) {
                                if (file.endsWith(filters.elementAt(i).toString())) {
                                    currentFiles.addElement(file);
                                    break;
                                }
                            }
                        }
                    }

                    showFiles();
                } catch (Exception e) {

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
28734604
src/de/joergjahnke/gameboy/core/Tile.java 379 444
src/de/joergjahnke/gameboy/core/Tile.java 380 440
----------------------------------------
                        case VideoChip.SCALING_PLUS50PERCENT: {
                            if (x % 3 == 1 || y % 3 == 1) {
                                if (x % 3 == 1 && y % 3 == 1) {
                                    final int x1 = (sX1024 >> VideoChip.SCALING_MULTIPLIER_BITS);
                                    final int x2 = Math.min(maxSX, sX1024Next >> VideoChip.SCALING_MULTIPLIER_BITS);
                                    final int y2 = Math.min(maxSY, sY1024Next >> VideoChip.SCALING_MULTIPLIER_BITS);
                                    final int offsetY1 = (sY1024 >> VideoChip.SCALING_MULTIPLIER_BITS) * w;
                                    final int offsetY2 = y2 * w;
                                    int col11 = source[offsetY1 + x1];
                                    int col12 = source[offsetY1 + x2];
                                    int col21 = source[offsetY2 + x1];
                                    int col22 = source[offsetY2 + x2];

                                    // we need a special handling for transparent (sprite) pixels
                                    if (col11 == TRANSPARENT) {
                                        col11 = col12;
                                    } else if (col12 == TRANSPARENT) {
                                        col12 = col11;
                                    }
                                    if (col21 == TRANSPARENT) {
                                        col21 = col22;
                                    } else if (col22 == TRANSPARENT) {
                                        col22 = col21;
                                    }
                                    if (col11 == TRANSPARENT) {
                                        col11 = col21;
                                    } else if (col21 == TRANSPARENT) {
                                        col21 = col11;
                                    }

                                    scaled[yidx + x] = Color.mix(col11, col12, col21, col22);
                                } else if (x % 3 == 1) {
                                    final int x1 = (sX1024 >> VideoChip.SCALING_MULTIPLIER_BITS);
                                    final int x2 = Math.min(maxSX, sX1024Next >> VideoChip.SCALING_MULTIPLIER_BITS);
                                    final int offsetY1 = (sY1024 >> VideoChip.SCALING_MULTIPLIER_BITS) * w;
                                    final int col11 = source[offsetY1 + x1];
                                    final int col12 = source[offsetY1 + x2];

                                    if (col11 == TRANSPARENT) {
                                        scaled[yidx + x] = col12;
                                    } else if (col12 == TRANSPARENT) {
                                        scaled[yidx + x] = col11;
                                    } else {
                                        scaled[yidx + x] = Color.mix(col11, col12);
                                    }
                                } else {
                                    final int x1 = (sX1024 >> VideoChip.SCALING_MULTIPLIER_BITS);
                                    final int y2 = Math.min(maxSY, sY1024Next >> VideoChip.SCALING_MULTIPLIER_BITS);
                                    final int offsetY1 = (sY1024 >> VideoChip.SCALING_MULTIPLIER_BITS) * w;
                                    final int offsetY2 = y2 * w;
                                    final int col11 = source[offsetY1 + x1];
                                    final int col21 = source[offsetY2 + x1];

                                    if (col11 == TRANSPARENT) {
                                        scaled[yidx + x] = col21;
                                    } else if (col21 == TRANSPARENT) {
                                        scaled[yidx + x] = col11;
                                    } else {
                                        scaled[yidx + x] = Color.mix(col11, col21);
                                    }
                                }
                            } else {
                                scaled[yidx + x] = source[(sY1024 >> VideoChip.SCALING_MULTIPLIER_BITS) * w + (sX1024 >> VideoChip.SCALING_MULTIPLIER_BITS)];
                            }
                            break;
                        }

----------------------------------------
                            if (x % 3 == 1 || y % 3 == 1) {
                                if (x % 3 == 1 && y % 3 == 1) {
                                    final int x1 = (sX1024 >> VideoChip.SCALING_MULTIPLIER_BITS);
                                    final int x2 = Math.min(maxSX, sX1024Next >> VideoChip.SCALING_MULTIPLIER_BITS);
                                    final int y2 = Math.min(maxSY, sY1024Next >> VideoChip.SCALING_MULTIPLIER_BITS);
                                    final int offsetY1 = (sY1024 >> VideoChip.SCALING_MULTIPLIER_BITS) * w;
                                    final int offsetY2 = y2 * w;
                                    int col11 = source[offsetY1 + x1];
                                    int col12 = source[offsetY1 + x2];
                                    int col21 = source[offsetY2 + x1];
                                    int col22 = source[offsetY2 + x2];

                                    // we need a special handling for transparent (sprite) pixels
                                    if (col11 == TRANSPARENT) {
                                        col11 = col12;
                                    } else if (col12 == TRANSPARENT) {
                                        col12 = col11;
                                    }
                                    if (col21 == TRANSPARENT) {
                                        col21 = col22;
                                    } else if (col22 == TRANSPARENT) {
                                        col22 = col21;
                                    }
                                    if (col11 == TRANSPARENT) {
                                        col11 = col21;
                                    } else if (col21 == TRANSPARENT) {
                                        col21 = col11;
                                    }

                                    scaled[yidx + x] = Color.mix(col11, col12, col21, col22);
                                } else if (x % 3 == 1) {
                                    final int x1 = (sX1024 >> VideoChip.SCALING_MULTIPLIER_BITS);
                                    final int x2 = Math.min(maxSX, sX1024Next >> VideoChip.SCALING_MULTIPLIER_BITS);
                                    final int offsetY1 = (sY1024 >> VideoChip.SCALING_MULTIPLIER_BITS) * w;
                                    final int col11 = source[offsetY1 + x1];
                                    final int col12 = source[offsetY1 + x2];

                                    if (col11 == TRANSPARENT) {
                                        scaled[yidx + x] = col12;
                                    } else if (col12 == TRANSPARENT) {
                                        scaled[yidx + x] = col11;
                                    } else {
                                        scaled[yidx + x] = Color.mix(col11, col12);
                                    }
                                } else {
                                    final int x1 = (sX1024 >> VideoChip.SCALING_MULTIPLIER_BITS);
                                    final int y2 = Math.min(maxSY, sY1024Next >> VideoChip.SCALING_MULTIPLIER_BITS);
                                    final int offsetY1 = (sY1024 >> VideoChip.SCALING_MULTIPLIER_BITS) * w;
                                    final int offsetY2 = y2 * w;
                                    final int col11 = source[offsetY1 + x1];
                                    final int col21 = source[offsetY2 + x1];

                                    if (col11 == TRANSPARENT) {
                                        scaled[yidx + x] = col21;
                                    } else if (col21 == TRANSPARENT) {
                                        scaled[yidx + x] = col11;
                                    } else {
                                        scaled[yidx + x] = Color.mix(col11, col21);
                                    }
                                }
                            } else {

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
28734605
src/de/joergjahnke/gameboy/swing/GameboyFrame.java 288 296
src/de/joergjahnke/gameboy/core/Tile.java 510 516
----------------------------------------
        } catch (Throwable t) {
            // show the cause of the error
            t.printStackTrace();
            // delete the suspend file
            suspend.delete();
            // we don't exit, the user might want to continue now that the suspend failed
            wasSuccessful = false;
            this.gameboy.resume();
        } finally {

----------------------------------------
    public void deserialize(final DataInputStream in) throws IOException {
        /*this.scaledWidth =*/ in.readInt();
        /*this.scaledHeight =*/ in.readInt();
        // have tile data recalculated
        this.areAllVariantsInvalid = false;
        invalidate();
    }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
28734606
src/de/joergjahnke/gameboy/core/CPU.java 3104 3110
src/de/joergjahnke/common/util/LRUCache.java 76 89
----------------------------------------
    public final void throttle(final long ms) {
        this.throttledMillis += ms;
        try {
            Thread.sleep(ms);
        } catch (InterruptedException ex) {
        }
    }

----------------------------------------
    public Enumeration elements() {
        return new Enumeration() {

            private Enumeration en = objectMap.elements();

            public boolean hasMoreElements() {
                return this.en.hasMoreElements();
            }

            public Object nextElement() {
                return ((LRUNode) this.en.nextElement()).data;
            }
        };
    }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
28734607
src/de/joergjahnke/common/util/LRUCache.java 91 115
src/de/joergjahnke/common/util/LRUCache.java 160 178
----------------------------------------
    public Object get(final Object key) {
        // retrieve the cached object
        final LRUNode node = (LRUNode) this.objectMap.get(key);

        if (node == null) {
            return null;
        } else {
            // put the list at the end of the list of cached objects, so that it gets removed last
            if (this.last != node) {
                this.last.next = node;
                if (this.first == node) {
                    this.first = node.next;
                    this.first.previous = null;
                } else {
                    node.previous.next = node.next;
                    node.next.previous = node.previous;
                }
                node.previous = this.last;
                node.next = null;
                this.last = node;
            }

            return node.data;
        }
    }

----------------------------------------
    public void remove(final Object key) {
        // remove the element from the cache
        final LRUNode node = (LRUNode) this.objectMap.get(key);

        this.objectMap.remove(key);
        // fix the list of cached objects
        if (node.previous != null) {
            node.previous.next = node.next;
        } else {
            this.first = node.next;
            this.first.previous = null;
        }
        if (node.next != null) {
            node.next.previous = node.previous;
        } else {
            this.last = node.previous;
            this.last.next = null;
        }
    }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
28734609
src/de/joergjahnke/gameboy/swing/GameboyFrame.java 524 537
src/de/joergjahnke/gameboy/swing/GameboyFrame.java 526 533
----------------------------------------
        if (null != this.gameboy.getCartridge() && this.gameboy.getCartridge().hasBatterySupport()) {
            // save the game
            try {
                // save cartridge data to file
                final String filename = this.lastFile.getAbsolutePath().substring(0, this.lastFile.getAbsolutePath().lastIndexOf('.')) + SAVE_EXTENSION;
                final FileOutputStream fout = new FileOutputStream(filename);

                this.gameboy.getCartridge().saveData(fout);
                fout.close();
            } catch (Exception e) {
                // we could not save the file
                JOptionPane.showMessageDialog(this, this.gbResources.getString("FailedToSaveGameDataFor") + this.lastFile, this.gbResources.getString("FailedToSaveGame"), JOptionPane.ERROR_MESSAGE);
            }
        }

----------------------------------------
            try {
                // save cartridge data to file
                final String filename = this.lastFile.getAbsolutePath().substring(0, this.lastFile.getAbsolutePath().lastIndexOf('.')) + SAVE_EXTENSION;
                final FileOutputStream fout = new FileOutputStream(filename);

                this.gameboy.getCartridge().saveData(fout);
                fout.close();
            } catch (Exception e) {

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
28734610
src/de/joergjahnke/gameboy/core/CPU.java 535 541
src/de/joergjahnke/gameboy/core/CPU.java 575 581
----------------------------------------
    private void operationADD(final int data) {
        final int a_ = this.a;
        final int value = (a_ + data) & 0xff;

        this.f = ((value == 0 ? ZERO : 0) + ((a_ & 0x0f) + (data & 0x0f) >= 0x10 ? HALFCARRY : 0) + (value < a_ ? CARRY : 0));
        this.a = value;
    }

----------------------------------------
    private void operationSUB(final int data) {
        final int a_ = this.a;
        final int value = (a_ - data) & 0xff;

        this.f = ((value == 0 ? ZERO : 0) + NEGATIVE + ((a_ & 0x0f) < (data & 0x0f) ? HALFCARRY : 0) + (value > a_ ? CARRY : 0));
        this.a = value;
    }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
28734611
src/de/joergjahnke/gameboy/core/CPU.java 836 871
src/de/joergjahnke/gameboy/core/CPU.java 837 864
----------------------------------------
    private String getAssembly(final int opcode) {
        if (opcode != 0xcb) {
            final String assembly = ASSEMBLY[opcode];
            int index = -1;

            if ((index = assembly.indexOf("a8")) > 0) {
                final int a8 = this.memory[this.pc] & 0xff;

                return assembly.substring(0, index) + "$" + Integer.toHexString(a8) + assembly.substring(index + 2);
            } else if ((index = assembly.indexOf("a16")) > 0) {
                final int a16 = (this.memory[this.pc] & 0xff) + (this.memory[this.pc + 1] & 0xff) * 256;

                return assembly.substring(0, index) + "$" + Integer.toHexString(a16) + assembly.substring(index + 2);
            } else if ((index = assembly.indexOf("r8")) > 0) {
                final int r8 = this.memory[this.pc] & 0xff;

                return assembly.substring(0, index) + "$" + Integer.toHexString(r8) + assembly.substring(index + 2);
            } else if ((index = assembly.indexOf("d8")) > 0) {
                final int d8 = this.memory[this.pc] & 0xff;

                return assembly.substring(0, index) + "$" + Integer.toHexString(d8) + assembly.substring(index + 2);
            } else if ((index = assembly.indexOf("d16")) > 0) {
                final int d16 = (this.memory[this.pc] & 0xff) + (this.memory[this.pc + 1] & 0xff) * 256;

                return assembly.substring(0, index) + "$" + Integer.toHexString(d16) + assembly.substring(index + 2);
            } else {
                return assembly;
            }
        } else {
            final int cbOpcode = this.memory[this.pc] & 0xff;
            final String cbAssembly = ASSEMBLY_CB[cbOpcode >> 3];
            final String cbRegister = REGISTERS[cbOpcode & 0x07];

            return ASSEMBLY[opcode] + ' ' + cbAssembly + cbRegister;
        }
    }

----------------------------------------
        if (opcode != 0xcb) {
            final String assembly = ASSEMBLY[opcode];
            int index = -1;

            if ((index = assembly.indexOf("a8")) > 0) {
                final int a8 = this.memory[this.pc] & 0xff;

                return assembly.substring(0, index) + "$" + Integer.toHexString(a8) + assembly.substring(index + 2);
            } else if ((index = assembly.indexOf("a16")) > 0) {
                final int a16 = (this.memory[this.pc] & 0xff) + (this.memory[this.pc + 1] & 0xff) * 256;

                return assembly.substring(0, index) + "$" + Integer.toHexString(a16) + assembly.substring(index + 2);
            } else if ((index = assembly.indexOf("r8")) > 0) {
                final int r8 = this.memory[this.pc] & 0xff;

                return assembly.substring(0, index) + "$" + Integer.toHexString(r8) + assembly.substring(index + 2);
            } else if ((index = assembly.indexOf("d8")) > 0) {
                final int d8 = this.memory[this.pc] & 0xff;

                return assembly.substring(0, index) + "$" + Integer.toHexString(d8) + assembly.substring(index + 2);
            } else if ((index = assembly.indexOf("d16")) > 0) {
                final int d16 = (this.memory[this.pc] & 0xff) + (this.memory[this.pc + 1] & 0xff) * 256;

                return assembly.substring(0, index) + "$" + Integer.toHexString(d16) + assembly.substring(index + 2);
            } else {
                return assembly;
            }
        } else {

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
28734612
src/de/joergjahnke/common/jme/CollectionUtils.java 64 80
src/de/joergjahnke/common/jme/CollectionUtils.java 67 79
----------------------------------------
    public static void sort(final Vector v) {
        boolean isSorted = false;

        while (!isSorted) {
            isSorted = true;
            for (int i = 0, to = v.size() - 1; i < to; ++i) {
                final Object o1 = v.elementAt(i);
                final Object o2 = v.elementAt(i + 1);

                if (o1.toString().compareTo(o2.toString()) > 0) {
                    v.setElementAt(o2, i);
                    v.setElementAt(o1, i + 1);
                    isSorted = false;
                }
            }
        }
    }

----------------------------------------
        while (!isSorted) {
            isSorted = true;
            for (int i = 0, to = v.size() - 1; i < to; ++i) {
                final Object o1 = v.elementAt(i);
                final Object o2 = v.elementAt(i + 1);

                if (o1.toString().compareTo(o2.toString()) > 0) {
                    v.setElementAt(o2, i);
                    v.setElementAt(o1, i + 1);
                    isSorted = false;
                }
            }
        }

----------------------------------------
