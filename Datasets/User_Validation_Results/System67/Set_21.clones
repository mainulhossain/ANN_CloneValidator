$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
17995880
src/de/joergjahnke/gameboy/jme/GameboyCanvas.java 550 555
src/de/joergjahnke/gameboy/jme/GameboyCanvas.java 584 589
----------------------------------------
            for (int i = 0; !wasEventProcessed && i < this.buttons.length; ++i) {
                if (this.buttons[i].collidesWith(this.onePixel, x, y, true)) {
                    this.gameboy.getJoypad().setButtons(this.gameboy.getJoypad().getButtons() | BUTTON_JOYPAD_MAPPING[i]);
                    wasEventProcessed = true;
                }
            }

----------------------------------------
            for (int i = 0; !wasEventProcessed && i < this.buttons.length; ++i) {
                if (this.buttons[i].collidesWith(this.onePixel, x, y, true)) {
                    this.gameboy.getJoypad().setButtons(this.gameboy.getJoypad().getButtons() & (0x0f - BUTTON_JOYPAD_MAPPING[i]));
                    wasEventProcessed = true;
                }
            }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
17995879
src/de/joergjahnke/gameboy/jme/GameboyCanvas.java 558 563
src/de/joergjahnke/gameboy/jme/GameboyCanvas.java 584 589
----------------------------------------
            for (int i = 0; !wasEventProcessed && i < this.directions.length; ++i) {
                if (this.directions[i].collidesWith(this.onePixel, x, y, true)) {
                    this.gameboy.getJoypad().setDirections(this.gameboy.getJoypad().getDirections() | DIRECTION_JOYPAD_MAPPING[i]);
                    wasEventProcessed = true;
                }
            }

----------------------------------------
            for (int i = 0; !wasEventProcessed && i < this.buttons.length; ++i) {
                if (this.buttons[i].collidesWith(this.onePixel, x, y, true)) {
                    this.gameboy.getJoypad().setButtons(this.gameboy.getJoypad().getButtons() & (0x0f - BUTTON_JOYPAD_MAPPING[i]));
                    wasEventProcessed = true;
                }
            }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
17995883
src/de/joergjahnke/gameboy/jme/GameboyCanvas.java 583 590
src/de/joergjahnke/gameboy/jme/GameboyCanvas.java 591 598
----------------------------------------
        if (isShowButtons()) {
            for (int i = 0; !wasEventProcessed && i < this.buttons.length; ++i) {
                if (this.buttons[i].collidesWith(this.onePixel, x, y, true)) {
                    this.gameboy.getJoypad().setButtons(this.gameboy.getJoypad().getButtons() & (0x0f - BUTTON_JOYPAD_MAPPING[i]));
                    wasEventProcessed = true;
                }
            }
        }

----------------------------------------
        if (isShowDirectionButtons()) {
            for (int i = 0; !wasEventProcessed && i < this.directions.length; ++i) {
                if (this.directions[i].collidesWith(this.onePixel, x, y, true)) {
                    this.gameboy.getJoypad().setDirections(this.gameboy.getJoypad().getDirections() & (0x0f - DIRECTION_JOYPAD_MAPPING[i]));
                    wasEventProcessed = true;
                }
            }
        }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
17995881
src/de/joergjahnke/gameboy/jme/GameboyCanvas.java 557 564
src/de/joergjahnke/gameboy/jme/GameboyCanvas.java 591 598
----------------------------------------
        if (isShowDirectionButtons()) {
            for (int i = 0; !wasEventProcessed && i < this.directions.length; ++i) {
                if (this.directions[i].collidesWith(this.onePixel, x, y, true)) {
                    this.gameboy.getJoypad().setDirections(this.gameboy.getJoypad().getDirections() | DIRECTION_JOYPAD_MAPPING[i]);
                    wasEventProcessed = true;
                }
            }
        }

----------------------------------------
        if (isShowDirectionButtons()) {
            for (int i = 0; !wasEventProcessed && i < this.directions.length; ++i) {
                if (this.directions[i].collidesWith(this.onePixel, x, y, true)) {
                    this.gameboy.getJoypad().setDirections(this.gameboy.getJoypad().getDirections() & (0x0f - DIRECTION_JOYPAD_MAPPING[i]));
                    wasEventProcessed = true;
                }
            }
        }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
17995882
src/de/joergjahnke/gameboy/jme/GameboyCanvas.java 549 556
src/de/joergjahnke/gameboy/jme/GameboyCanvas.java 591 598
----------------------------------------
        if (isShowButtons()) {
            for (int i = 0; !wasEventProcessed && i < this.buttons.length; ++i) {
                if (this.buttons[i].collidesWith(this.onePixel, x, y, true)) {
                    this.gameboy.getJoypad().setButtons(this.gameboy.getJoypad().getButtons() | BUTTON_JOYPAD_MAPPING[i]);
                    wasEventProcessed = true;
                }
            }
        }

----------------------------------------
        if (isShowDirectionButtons()) {
            for (int i = 0; !wasEventProcessed && i < this.directions.length; ++i) {
                if (this.directions[i].collidesWith(this.onePixel, x, y, true)) {
                    this.gameboy.getJoypad().setDirections(this.gameboy.getJoypad().getDirections() & (0x0f - DIRECTION_JOYPAD_MAPPING[i]));
                    wasEventProcessed = true;
                }
            }
        }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
17995886
src/de/joergjahnke/gameboy/jme/GameboyCanvas.java 550 555
src/de/joergjahnke/gameboy/jme/GameboyCanvas.java 592 597
----------------------------------------
            for (int i = 0; !wasEventProcessed && i < this.buttons.length; ++i) {
                if (this.buttons[i].collidesWith(this.onePixel, x, y, true)) {
                    this.gameboy.getJoypad().setButtons(this.gameboy.getJoypad().getButtons() | BUTTON_JOYPAD_MAPPING[i]);
                    wasEventProcessed = true;
                }
            }

----------------------------------------
            for (int i = 0; !wasEventProcessed && i < this.directions.length; ++i) {
                if (this.directions[i].collidesWith(this.onePixel, x, y, true)) {
                    this.gameboy.getJoypad().setDirections(this.gameboy.getJoypad().getDirections() & (0x0f - DIRECTION_JOYPAD_MAPPING[i]));
                    wasEventProcessed = true;
                }
            }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
17995884
src/de/joergjahnke/gameboy/jme/GameboyCanvas.java 584 589
src/de/joergjahnke/gameboy/jme/GameboyCanvas.java 592 597
----------------------------------------
            for (int i = 0; !wasEventProcessed && i < this.buttons.length; ++i) {
                if (this.buttons[i].collidesWith(this.onePixel, x, y, true)) {
                    this.gameboy.getJoypad().setButtons(this.gameboy.getJoypad().getButtons() & (0x0f - BUTTON_JOYPAD_MAPPING[i]));
                    wasEventProcessed = true;
                }
            }

----------------------------------------
            for (int i = 0; !wasEventProcessed && i < this.directions.length; ++i) {
                if (this.directions[i].collidesWith(this.onePixel, x, y, true)) {
                    this.gameboy.getJoypad().setDirections(this.gameboy.getJoypad().getDirections() & (0x0f - DIRECTION_JOYPAD_MAPPING[i]));
                    wasEventProcessed = true;
                }
            }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
17995885
src/de/joergjahnke/gameboy/jme/GameboyCanvas.java 558 563
src/de/joergjahnke/gameboy/jme/GameboyCanvas.java 592 597
----------------------------------------
            for (int i = 0; !wasEventProcessed && i < this.directions.length; ++i) {
                if (this.directions[i].collidesWith(this.onePixel, x, y, true)) {
                    this.gameboy.getJoypad().setDirections(this.gameboy.getJoypad().getDirections() | DIRECTION_JOYPAD_MAPPING[i]);
                    wasEventProcessed = true;
                }
            }

----------------------------------------
            for (int i = 0; !wasEventProcessed && i < this.directions.length; ++i) {
                if (this.directions[i].collidesWith(this.onePixel, x, y, true)) {
                    this.gameboy.getJoypad().setDirections(this.gameboy.getJoypad().getDirections() & (0x0f - DIRECTION_JOYPAD_MAPPING[i]));
                    wasEventProcessed = true;
                }
            }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
17995907
src/de/joergjahnke/gameboy/core/VideoChip.java 779 785
src/de/joergjahnke/common/jme/ImageButton.java 65 72
----------------------------------------
        if (windowX != this.windowX) {
            if (DEBUG) {
                System.out.println("Set window x-position to " + windowX + " at line " + this.currentLine + " of frame " + this.frames);
            }
            this.windowX = windowX;
            invalidateWindowLines();
        }

----------------------------------------
    private void setPressed(final boolean isPressed) {
        if (this.isPressed != isPressed) {
            this.isPressed = isPressed;
            if (isPressed) {
                onButtonPressed();
            }
        }
    }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
17995902
src/de/joergjahnke/gameboy/core/VideoChip.java 778 786
src/de/joergjahnke/common/jme/ImageButton.java 65 72
----------------------------------------
    public final void setWindowX(final int windowX) {
        if (windowX != this.windowX) {
            if (DEBUG) {
                System.out.println("Set window x-position to " + windowX + " at line " + this.currentLine + " of frame " + this.frames);
            }
            this.windowX = windowX;
            invalidateWindowLines();
        }
    }

----------------------------------------
    private void setPressed(final boolean isPressed) {
        if (this.isPressed != isPressed) {
            this.isPressed = isPressed;
            if (isPressed) {
                onButtonPressed();
            }
        }
    }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
17995887
src/de/joergjahnke/gameboy/core/VideoChip.java 754 760
src/de/joergjahnke/common/jme/ImageButton.java 65 72
----------------------------------------
        if (scrollY != this.scrollY) {
            if (DEBUG) {
                System.out.println("Set y-scroll to " + scrollY + " at line " + this.currentLine + " of frame " + this.frames);
            }
            this.scrollY = scrollY;
            invalidateLines();
        }

----------------------------------------
    private void setPressed(final boolean isPressed) {
        if (this.isPressed != isPressed) {
            this.isPressed = isPressed;
            if (isPressed) {
                onButtonPressed();
            }
        }
    }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
17995888
src/de/joergjahnke/gameboy/core/VideoChip.java 646 652
src/de/joergjahnke/common/jme/ImageButton.java 65 72
----------------------------------------
        if (isBGBlank != this.isBGBlank) {
            if (DEBUG) {
                System.out.println("Set background enable to " + !isBGBlank + " at line " + this.currentLine + " of frame " + this.frames);
            }
            this.isBGBlank = isBGBlank;
            invalidateLines();
        }

----------------------------------------
    private void setPressed(final boolean isPressed) {
        if (this.isPressed != isPressed) {
            this.isPressed = isPressed;
            if (isPressed) {
                onButtonPressed();
            }
        }
    }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
17995906
src/de/joergjahnke/gameboy/core/VideoChip.java 803 810
src/de/joergjahnke/common/jme/ImageButton.java 65 72
----------------------------------------
    public final void setWindowY(final int windowY) {
        if (windowY != this.windowY) {
            if (DEBUG) {
                System.out.println("Set window y-position to " + windowY + " at line " + this.currentLine + " of frame " + this.frames);
            }
            this.nextWindowY = windowY;
        }
    }

----------------------------------------
    private void setPressed(final boolean isPressed) {
        if (this.isPressed != isPressed) {
            this.isPressed = isPressed;
            if (isPressed) {
                onButtonPressed();
            }
        }
    }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
17995901
src/de/joergjahnke/gameboy/core/VideoChip.java 621 629
src/de/joergjahnke/common/jme/ImageButton.java 65 72
----------------------------------------
    public final void setSpritesEnabled(final boolean areSpritesEnabled) {
        if (areSpritesEnabled != this.areSpritesEnabled) {
            if (DEBUG) {
                System.out.println("Set sprite enable to " + areSpritesEnabled + " at line " + this.currentLine + " of frame " + this.frames);
            }
            invalidateLines();
        }
        this.areSpritesEnabled = areSpritesEnabled;
    }

----------------------------------------
    private void setPressed(final boolean isPressed) {
        if (this.isPressed != isPressed) {
            this.isPressed = isPressed;
            if (isPressed) {
                onButtonPressed();
            }
        }
    }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
17995904
src/de/joergjahnke/gameboy/core/VideoChip.java 645 653
src/de/joergjahnke/common/jme/ImageButton.java 65 72
----------------------------------------
    public final void setBackgroundBlank(final boolean isBGBlank) {
        if (isBGBlank != this.isBGBlank) {
            if (DEBUG) {
                System.out.println("Set background enable to " + !isBGBlank + " at line " + this.currentLine + " of frame " + this.frames);
            }
            this.isBGBlank = isBGBlank;
            invalidateLines();
        }
    }

----------------------------------------
    private void setPressed(final boolean isPressed) {
        if (this.isPressed != isPressed) {
            this.isPressed = isPressed;
            if (isPressed) {
                onButtonPressed();
            }
        }
    }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
17995903
src/de/joergjahnke/gameboy/core/VideoChip.java 753 761
src/de/joergjahnke/common/jme/ImageButton.java 65 72
----------------------------------------
    public final void setScrollY(final int scrollY) {
        if (scrollY != this.scrollY) {
            if (DEBUG) {
                System.out.println("Set y-scroll to " + scrollY + " at line " + this.currentLine + " of frame " + this.frames);
            }
            this.scrollY = scrollY;
            invalidateLines();
        }
    }

----------------------------------------
    private void setPressed(final boolean isPressed) {
        if (this.isPressed != isPressed) {
            this.isPressed = isPressed;
            if (isPressed) {
                onButtonPressed();
            }
        }
    }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
17995890
src/de/joergjahnke/gameboy/core/VideoChip.java 480 489
src/de/joergjahnke/common/jme/ImageButton.java 65 72
----------------------------------------
        if (isWindowEnabled != this.isWindowEnabled) {
            if (DEBUG) {
                System.out.println("Set window enable to " + isWindowEnabled + " at line " + this.currentLine + " of frame " + this.frames);
            }
            this.isWindowEnabled = isWindowEnabled;
            if (isWindowEnabled && this.windowLine == 0 && this.currentLine > getWindowY()) {
                this.windowLine = SCREEN_HEIGHT;
            }
            invalidateLines();
        }

----------------------------------------
    private void setPressed(final boolean isPressed) {
        if (this.isPressed != isPressed) {
            this.isPressed = isPressed;
            if (isPressed) {
                onButtonPressed();
            }
        }
    }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
17995905
src/de/joergjahnke/gameboy/core/VideoChip.java 730 736
src/de/joergjahnke/common/jme/ImageButton.java 65 72
----------------------------------------
        if (scrollX != this.scrollX) {
            if (DEBUG) {
                System.out.println("Set x-scroll to " + scrollX + " at line " + this.currentLine + " of frame " + this.frames);
            }
            this.scrollX = scrollX;
            invalidateLines();
        }

----------------------------------------
    private void setPressed(final boolean isPressed) {
        if (this.isPressed != isPressed) {
            this.isPressed = isPressed;
            if (isPressed) {
                onButtonPressed();
            }
        }
    }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
17995889
src/de/joergjahnke/gameboy/core/VideoChip.java 729 737
src/de/joergjahnke/common/jme/ImageButton.java 65 72
----------------------------------------
    public final void setScrollX(final int scrollX) {
        if (scrollX != this.scrollX) {
            if (DEBUG) {
                System.out.println("Set x-scroll to " + scrollX + " at line " + this.currentLine + " of frame " + this.frames);
            }
            this.scrollX = scrollX;
            invalidateLines();
        }
    }

----------------------------------------
    private void setPressed(final boolean isPressed) {
        if (this.isPressed != isPressed) {
            this.isPressed = isPressed;
            if (isPressed) {
                onButtonPressed();
            }
        }
    }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
17995909
src/de/joergjahnke/gameboy/core/VideoChip.java 1107 1115
src/de/joergjahnke/common/jme/ImageButton.java 66 71
----------------------------------------
        if (this.currentLine < SCREEN_HEIGHT) {
            // trigger OAM IRQ if necessary
            if (isLCDEnabled()) {
                checkOAMIRQ();
            }

            lcdCycles = OAM_PERIOD;
            this.mode = MODE_OAM;
        } else {

----------------------------------------
        if (this.isPressed != isPressed) {
            this.isPressed = isPressed;
            if (isPressed) {
                onButtonPressed();
            }
        }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
17995967
src/de/joergjahnke/gameboy/core/VideoChip.java 804 809
src/de/joergjahnke/common/jme/ImageButton.java 66 71
----------------------------------------
        if (windowY != this.windowY) {
            if (DEBUG) {
                System.out.println("Set window y-position to " + windowY + " at line " + this.currentLine + " of frame " + this.frames);
            }
            this.nextWindowY = windowY;
        }

----------------------------------------
        if (this.isPressed != isPressed) {
            this.isPressed = isPressed;
            if (isPressed) {
                onButtonPressed();
            }
        }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
17995972
src/de/joergjahnke/gameboy/core/VideoChip.java 779 785
src/de/joergjahnke/common/jme/ImageButton.java 66 71
----------------------------------------
        if (windowX != this.windowX) {
            if (DEBUG) {
                System.out.println("Set window x-position to " + windowX + " at line " + this.currentLine + " of frame " + this.frames);
            }
            this.windowX = windowX;
            invalidateWindowLines();
        }

----------------------------------------
        if (this.isPressed != isPressed) {
            this.isPressed = isPressed;
            if (isPressed) {
                onButtonPressed();
            }
        }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
17995969
src/de/joergjahnke/gameboy/core/VideoChip.java 622 627
src/de/joergjahnke/common/jme/ImageButton.java 66 71
----------------------------------------
        if (areSpritesEnabled != this.areSpritesEnabled) {
            if (DEBUG) {
                System.out.println("Set sprite enable to " + areSpritesEnabled + " at line " + this.currentLine + " of frame " + this.frames);
            }
            invalidateLines();
        }

----------------------------------------
        if (this.isPressed != isPressed) {
            this.isPressed = isPressed;
            if (isPressed) {
                onButtonPressed();
            }
        }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
17995908
src/de/joergjahnke/common/jme/Menu.java 203 209
src/de/joergjahnke/common/jme/ImageButton.java 66 71
----------------------------------------
    public void setBackCommandText(final String text) {
        this.backCommandText = text;
        if (this.backCommand != null) {
            removeCommand(this.backCommand);
            setBackCommand();
        }
    }

----------------------------------------
        if (this.isPressed != isPressed) {
            this.isPressed = isPressed;
            if (isPressed) {
                onButtonPressed();
            }
        }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
17995910
src/de/joergjahnke/gameboy/core/VideoChip.java 754 760
src/de/joergjahnke/common/jme/ImageButton.java 66 71
----------------------------------------
        if (scrollY != this.scrollY) {
            if (DEBUG) {
                System.out.println("Set y-scroll to " + scrollY + " at line " + this.currentLine + " of frame " + this.frames);
            }
            this.scrollY = scrollY;
            invalidateLines();
        }

----------------------------------------
        if (this.isPressed != isPressed) {
            this.isPressed = isPressed;
            if (isPressed) {
                onButtonPressed();
            }
        }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
17995973
src/de/joergjahnke/common/jme/Menu.java 181 187
src/de/joergjahnke/common/jme/ImageButton.java 66 71
----------------------------------------
    public void setSelectCommandText(final String text) {
        this.selectCommandText = text;
        if (this.selectCommand != null) {
            removeCommand(this.selectCommand);
            setSelectCommand();
        }
    }

----------------------------------------
        if (this.isPressed != isPressed) {
            this.isPressed = isPressed;
            if (isPressed) {
                onButtonPressed();
            }
        }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
17995968
src/de/joergjahnke/gameboy/core/VideoChip.java 562 568
src/de/joergjahnke/common/jme/ImageButton.java 66 71
----------------------------------------
        if (vRAMBank != this.currentVRAMBank) {
            if (DEBUG) {
                System.out.println("Set VRAM bank to " + vRAMBank + " at line " + this.currentLine + " of frame " + this.frames);
            }
            this.currentVRAMBank = vRAMBank;
            this.currentVRAMOffset = vRAMBank * GBCVRAM_BANK_SIZE;
        }

----------------------------------------
        if (this.isPressed != isPressed) {
            this.isPressed = isPressed;
            if (isPressed) {
                onButtonPressed();
            }
        }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
17995965
src/de/joergjahnke/gameboy/core/VideoChip.java 522 528
src/de/joergjahnke/common/jme/ImageButton.java 66 71
----------------------------------------
        if (this.windowTileMapAdr != (windowTileMapAdr & 0x1fff)) {
            if (DEBUG) {
                System.out.println("Set window tile area to " + Integer.toHexString(windowTileMapAdr) + " at line " + this.currentLine + " of frame " + this.frames);
            }
            this.windowTileMapAdr = windowTileMapAdr & 0x1fff;
            invalidateLines();
        }

----------------------------------------
        if (this.isPressed != isPressed) {
            this.isPressed = isPressed;
            if (isPressed) {
                onButtonPressed();
            }
        }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
17995970
src/de/joergjahnke/gameboy/core/VideoChip.java 730 736
src/de/joergjahnke/common/jme/ImageButton.java 66 71
----------------------------------------
        if (scrollX != this.scrollX) {
            if (DEBUG) {
                System.out.println("Set x-scroll to " + scrollX + " at line " + this.currentLine + " of frame " + this.frames);
            }
            this.scrollX = scrollX;
            invalidateLines();
        }

----------------------------------------
        if (this.isPressed != isPressed) {
            this.isPressed = isPressed;
            if (isPressed) {
                onButtonPressed();
            }
        }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
17995971
src/de/joergjahnke/gameboy/core/VideoChip.java 507 513
src/de/joergjahnke/common/jme/ImageButton.java 66 71
----------------------------------------
        if (this.bgTileMapAdr != (bgTileMapAdr & 0x1fff)) {
            if (DEBUG) {
                System.out.println("Set background tile area to " + Integer.toHexString(bgTileMapAdr) + " at line " + this.currentLine + " of frame " + this.frames);
            }
            this.bgTileMapAdr = bgTileMapAdr & 0x1fff;
            invalidateLines();
        }

----------------------------------------
        if (this.isPressed != isPressed) {
            this.isPressed = isPressed;
            if (isPressed) {
                onButtonPressed();
            }
        }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
17995966
src/de/joergjahnke/gameboy/core/VideoChip.java 646 652
src/de/joergjahnke/common/jme/ImageButton.java 66 71
----------------------------------------
        if (isBGBlank != this.isBGBlank) {
            if (DEBUG) {
                System.out.println("Set background enable to " + !isBGBlank + " at line " + this.currentLine + " of frame " + this.frames);
            }
            this.isBGBlank = isBGBlank;
            invalidateLines();
        }

----------------------------------------
        if (this.isPressed != isPressed) {
            this.isPressed = isPressed;
            if (isPressed) {
                onButtonPressed();
            }
        }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
17995913
src/de/joergjahnke/gameboy/android/GameboyView.java 100 105
src/de/joergjahnke/gameboy/jme/GameboyCanvas.java 406 411
----------------------------------------
        if(config.touchscreen != Resources.Configuration.TOUCHSCREEN_NOTOUCH) {
        	this.buttons = new BitmapDrawable[BUTTON_RESOURCE_IDS.length];
        	for(int i = 0 ; i < this.buttons.length ; ++i) {
        		this.buttons[i] = new BitmapDrawable(BitmapFactory.decodeResource(getResources(), BUTTON_RESOURCE_IDS[i]));
        	}
        } else {

----------------------------------------
            if (isShowDirectionButtons()) {
                // these are always in the bottom right corner
                for (int i = 0; i < this.directions.length; ++i) {
                    this.directions[i].setPosition(w - dw, h - dh);
                }
            }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
17995995
src/de/joergjahnke/gameboy/core/Cartridge.java 427 432
src/de/joergjahnke/gameboy/jme/GameboyCanvas.java 406 411
----------------------------------------
    public void deserialize(final DataInputStream in) throws IOException {
        this.cartridgeImpl.deserialize(in);
        for (int i = 0; i < this.ramBanks.length; ++i) {
            SerializationUtils.deserialize(in, this.ramBanks[i]);
        }
    }

----------------------------------------
            if (isShowDirectionButtons()) {
                // these are always in the bottom right corner
                for (int i = 0; i < this.directions.length; ++i) {
                    this.directions[i].setPosition(w - dw, h - dh);
                }
            }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
17995992
src/de/joergjahnke/gameboy/jme/GameboyCanvas.java 304 309
src/de/joergjahnke/gameboy/jme/GameboyCanvas.java 406 411
----------------------------------------
        if (isShowButtons()) {
            for (int i = 0; i < this.buttons.length; ++i) {
                this.buttons[i].setTransform(this.transform);
                this.buttons[i].paint(this.graphics);
            }
        }

----------------------------------------
            if (isShowDirectionButtons()) {
                // these are always in the bottom right corner
                for (int i = 0; i < this.directions.length; ++i) {
                    this.directions[i].setPosition(w - dw, h - dh);
                }
            }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
17995994
src/de/joergjahnke/gameboy/core/ColorPalette.java 57 63
src/de/joergjahnke/gameboy/jme/GameboyCanvas.java 406 411
----------------------------------------
    public ColorPalette(final VideoChip video, final int color) {
        this.video = video;
        // initialize all colors with the given color
        for (int i = 0; i < this.colors.length; ++i) {
            this.colors[i] = color;
        }
    }

----------------------------------------
            if (isShowDirectionButtons()) {
                // these are always in the bottom right corner
                for (int i = 0; i < this.directions.length; ++i) {
                    this.directions[i].setPosition(w - dw, h - dh);
                }
            }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
17995991
src/de/joergjahnke/gameboy/jme/GameboyCanvas.java 310 315
src/de/joergjahnke/gameboy/jme/GameboyCanvas.java 406 411
----------------------------------------
        if (isShowDirectionButtons()) {
            for (int i = 0; i < this.directions.length; ++i) {
                this.directions[i].setTransform(this.transform);
                this.directions[i].paint(this.graphics);
            }
        }

----------------------------------------
            if (isShowDirectionButtons()) {
                // these are always in the bottom right corner
                for (int i = 0; i < this.directions.length; ++i) {
                    this.directions[i].setPosition(w - dw, h - dh);
                }
            }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
17995993
src/de/joergjahnke/gameboy/core/Cartridge.java 420 425
src/de/joergjahnke/gameboy/jme/GameboyCanvas.java 406 411
----------------------------------------
    public void serialize(final DataOutputStream out) throws IOException {
        this.cartridgeImpl.serialize(out);
        for (int i = 0; i < this.ramBanks.length; ++i) {
            SerializationUtils.serialize(out, this.ramBanks[i]);
        }
    }

----------------------------------------
            if (isShowDirectionButtons()) {
                // these are always in the bottom right corner
                for (int i = 0; i < this.directions.length; ++i) {
                    this.directions[i].setPosition(w - dw, h - dh);
                }
            }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
17995914
src/de/joergjahnke/gameboy/android/GameboyView.java 267 307
src/de/joergjahnke/gameboy/android/GameboyView.java 313 353
----------------------------------------
	public boolean onKeyDown( final int keyCode, final KeyEvent event ) {
        switch(keyCode) {
	        case KeyEvent.KEYCODE_DPAD_LEFT:
	            this.gameboy.getJoypad().setDirections(this.gameboy.getJoypad().getDirections() | Joypad.LEFT);
	            break;
	        case KeyEvent.KEYCODE_DPAD_RIGHT:
	            this.gameboy.getJoypad().setDirections(this.gameboy.getJoypad().getDirections() | Joypad.RIGHT);
	            break;
	        case KeyEvent.KEYCODE_DPAD_UP:
	            this.gameboy.getJoypad().setDirections(this.gameboy.getJoypad().getDirections() | Joypad.UP);
	            break;
	        case KeyEvent.KEYCODE_DPAD_DOWN:
	            this.gameboy.getJoypad().setDirections(this.gameboy.getJoypad().getDirections() | Joypad.DOWN);
	            break;
	        case KeyEvent.KEYCODE_DPAD_CENTER:
	        case KeyEvent.KEYCODE_A:
	        case KeyEvent.KEYCODE_1:
	            this.gameboy.getJoypad().setButtons(this.gameboy.getJoypad().getButtons() | Joypad.A);
	            if(this.buttons != null ) this.buttons[0].setAlpha(0x80);
	            break;
	        case KeyEvent.KEYCODE_B:
	        case KeyEvent.KEYCODE_3:
	            this.gameboy.getJoypad().setButtons(this.gameboy.getJoypad().getButtons() | Joypad.B);
	            if(this.buttons != null ) this.buttons[1].setAlpha(0x80);
	            break;
	        case KeyEvent.KEYCODE_NEWLINE:
	        case KeyEvent.KEYCODE_7:
	            this.gameboy.getJoypad().setButtons(this.gameboy.getJoypad().getButtons() | Joypad.SELECT);
	            if(this.buttons != null ) this.buttons[2].setAlpha(0x80);
	            break;
	        case KeyEvent.KEYCODE_SPACE:
	        case KeyEvent.KEYCODE_9:
	            this.gameboy.getJoypad().setButtons(this.gameboy.getJoypad().getButtons() | Joypad.START);
	            if(this.buttons != null ) this.buttons[3].setAlpha(0x80);
	            break;
	        default:
	            ;
	    }
        
        return super.onKeyDown( keyCode, event );
    }

----------------------------------------
	public boolean onKeyUp( final int keyCode, final KeyEvent event ) {
        switch(keyCode) {
	        case KeyEvent.KEYCODE_DPAD_LEFT:
	            this.gameboy.getJoypad().setDirections(this.gameboy.getJoypad().getDirections() & (0x0f - Joypad.LEFT));
	            break;
	        case KeyEvent.KEYCODE_DPAD_RIGHT:
	            this.gameboy.getJoypad().setDirections(this.gameboy.getJoypad().getDirections() & (0x0f - Joypad.RIGHT));
	            break;
	        case KeyEvent.KEYCODE_DPAD_UP:
	            this.gameboy.getJoypad().setDirections(this.gameboy.getJoypad().getDirections() & (0x0f - Joypad.UP));
	            break;
	        case KeyEvent.KEYCODE_DPAD_DOWN:
	            this.gameboy.getJoypad().setDirections(this.gameboy.getJoypad().getDirections() & (0x0f - Joypad.DOWN));
	            break;
	        case KeyEvent.KEYCODE_DPAD_CENTER:
	        case KeyEvent.KEYCODE_A:
	        case KeyEvent.KEYCODE_1:
	            this.gameboy.getJoypad().setButtons(this.gameboy.getJoypad().getButtons() & (0x0f - Joypad.A));
	            if(this.buttons != null ) this.buttons[0].setAlpha(0xff);
	            break;
	        case KeyEvent.KEYCODE_B:
	        case KeyEvent.KEYCODE_3:
	            this.gameboy.getJoypad().setButtons(this.gameboy.getJoypad().getButtons() & (0x0f - Joypad.B));
	            if(this.buttons != null ) this.buttons[1].setAlpha(0xff);
	            break;
	        case KeyEvent.KEYCODE_NEWLINE:
	        case KeyEvent.KEYCODE_7:
	            this.gameboy.getJoypad().setButtons(this.gameboy.getJoypad().getButtons() & (0x0f - Joypad.SELECT));
	            if(this.buttons != null ) this.buttons[2].setAlpha(0xff);
	            break;
	        case KeyEvent.KEYCODE_SPACE:
	        case KeyEvent.KEYCODE_9:
	            this.gameboy.getJoypad().setButtons(this.gameboy.getJoypad().getButtons() & (0x0f - Joypad.START));
	            if(this.buttons != null ) this.buttons[3].setAlpha(0xff);
	            break;
	        default:
	            ;
	    }
        
        return super.onKeyUp( keyCode, event );
    }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
17995931
src/de/joergjahnke/gameboy/swing/GameboyFrame.java 902 910
src/de/joergjahnke/gameboy/jme/MEGameboyMIDlet.java 1014 1022
----------------------------------------
        if (null != filename) {
            if (filename.endsWith(SNAPSHOT_EXTENSION)) {
                runSnapshot(filename);
            } else {
                loadROM(filename);
                // start the emulation
                new Thread(this.gameboy).start();
            }
        }

----------------------------------------
                        if (c == okCommand) {
                            // load game or snapshot and start the emulation
                            if (programs.containsKey(name) && !name.endsWith(SNAPSHOT_EXTENSION)) {
                                runGame(name);
                            } else {
                                runSnapshot(name);
                            }
                            // the entry was selected for removal?
                        } else if (c == removeCommand) {

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
17995932
src/de/joergjahnke/gameboy/jme/MEGameboyMIDlet.java 604 613
src/de/joergjahnke/gameboy/jme/MEGameboyMIDlet.java 1028 1040
----------------------------------------
        try {
            // save the current state under that name
            saveState(name);

            // add the name to the list of snapshots and save this in the settings
            final Vector snapshots = getSnapshots();

            snapshots.addElement(name);
            setSnapshots(snapshots);
        } catch (Throwable t) {

----------------------------------------
                                try {
                                    // remove the snapshot from the device...
                                    RecordStore.deleteRecordStore(name);

                                    // ...and also from the list of snapshots
                                    final Vector snapshots = getSnapshots();

                                    snapshots.removeElement(name);
                                    setSnapshots(snapshots);

                                    // inform the user about the successful removal
                                    display.setCurrent(new Alert(LocalizationSupport.getMessage("RemovedSnapshotData"), LocalizationSupport.getMessage("RemovedSnapshotDataFor") + " " + name, null, AlertType.INFO), previous);
                                } catch (Exception e) {

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
17995933
src/de/joergjahnke/gameboy/core/VoluntaryWaveChannel.java 95 117
src/de/joergjahnke/gameboy/core/SquareWaveChannel.java 134 156
----------------------------------------
    public void mix(final byte[] buffer) {
        final int sampleRate = this.sound.getSampleRate();
        final boolean isLeftActive = isTerminalActive(LEFT);
        final boolean isRightActive = isTerminalActive(RIGHT);

        for (int i = 0, to = buffer.length; i < to; i += 2) {
            // determine sample
            final int idx = (this.audioIndex % sampleRate) * BUFFER_SIZE / sampleRate;
            final int sample = this.active ? (this.wavePatterns[idx] * this.volumePercent / 100) << 1 : 0;

            // apply sample to relevant output terminals
            if (isLeftActive) {
                buffer[i + LEFT] += sample;
            }
            if (isRightActive) {
                buffer[i + RIGHT] += sample;
            }

            // proceed to next sample
            this.audioIndex += this.frequency;
            this.audioIndex %= sampleRate;
        }
    }

----------------------------------------
    public void mix(final byte[] buffer) {
        final int sampleRate = this.sound.getSampleRate();
        final boolean isLeftActive = isTerminalActive(LEFT);
        final boolean isRightActive = isTerminalActive(RIGHT);
        final int target = this.dutyPercent * sampleRate / 100;

        for (int i = 0, to = buffer.length; i < to; i += 2) {
            // determine sample
            final byte sample = (byte) (this.audioIndex >= target ? this.volume << 1 : -this.volume << 1);

            // apply sample to relevant output terminals
            if (isLeftActive) {
                buffer[i + LEFT] += sample;
            }
            if (isRightActive) {
                buffer[i + RIGHT] += sample;
            }

            // proceed to next sample
            this.audioIndex += this.frequency;
            this.audioIndex %= sampleRate;
        }
    }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
17995934
src/de/joergjahnke/gameboy/core/WhiteNoiseChannel.java 99 121
src/de/joergjahnke/gameboy/core/SquareWaveChannel.java 134 156
----------------------------------------
    public void mix(final byte[] buffer) {
        final int sampleRate = this.sound.getSampleRate();
        final boolean isLeftActive = isTerminalActive(LEFT);
        final boolean isRightActive = isTerminalActive(RIGHT);
        final int mod = sampleRate * (this.isSmallStepWidth ? 1 << 7 : 1 << 15);

        for (int i = 0,  to = buffer.length; i < to; i += 2) {
            final int index = this.audioIndex / sampleRate;
            final int sample = randoms[index] ? this.volume << 1 : -this.volume << 1;

            // apply sample to relevant output terminals
            if (isLeftActive) {
                buffer[i + LEFT] += sample;
            }
            if (isRightActive) {
                buffer[i + RIGHT] += sample;
            }

            // proceed to next sample
            this.audioIndex += this.frequency;
            this.audioIndex %= mod;
        }
    }

----------------------------------------
    public void mix(final byte[] buffer) {
        final int sampleRate = this.sound.getSampleRate();
        final boolean isLeftActive = isTerminalActive(LEFT);
        final boolean isRightActive = isTerminalActive(RIGHT);
        final int target = this.dutyPercent * sampleRate / 100;

        for (int i = 0, to = buffer.length; i < to; i += 2) {
            // determine sample
            final byte sample = (byte) (this.audioIndex >= target ? this.volume << 1 : -this.volume << 1);

            // apply sample to relevant output terminals
            if (isLeftActive) {
                buffer[i + LEFT] += sample;
            }
            if (isRightActive) {
                buffer[i + RIGHT] += sample;
            }

            // proceed to next sample
            this.audioIndex += this.frequency;
            this.audioIndex %= sampleRate;
        }
    }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
17995936
src/de/joergjahnke/gameboy/core/WhiteNoiseChannel.java 105 120
src/de/joergjahnke/gameboy/core/SquareWaveChannel.java 140 155
----------------------------------------
        for (int i = 0,  to = buffer.length; i < to; i += 2) {
            final int index = this.audioIndex / sampleRate;
            final int sample = randoms[index] ? this.volume << 1 : -this.volume << 1;

            // apply sample to relevant output terminals
            if (isLeftActive) {
                buffer[i + LEFT] += sample;
            }
            if (isRightActive) {
                buffer[i + RIGHT] += sample;
            }

            // proceed to next sample
            this.audioIndex += this.frequency;
            this.audioIndex %= mod;
        }

----------------------------------------
        for (int i = 0, to = buffer.length; i < to; i += 2) {
            // determine sample
            final byte sample = (byte) (this.audioIndex >= target ? this.volume << 1 : -this.volume << 1);

            // apply sample to relevant output terminals
            if (isLeftActive) {
                buffer[i + LEFT] += sample;
            }
            if (isRightActive) {
                buffer[i + RIGHT] += sample;
            }

            // proceed to next sample
            this.audioIndex += this.frequency;
            this.audioIndex %= sampleRate;
        }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
17995935
src/de/joergjahnke/gameboy/core/VoluntaryWaveChannel.java 100 116
src/de/joergjahnke/gameboy/core/SquareWaveChannel.java 140 155
----------------------------------------
        for (int i = 0, to = buffer.length; i < to; i += 2) {
            // determine sample
            final int idx = (this.audioIndex % sampleRate) * BUFFER_SIZE / sampleRate;
            final int sample = this.active ? (this.wavePatterns[idx] * this.volumePercent / 100) << 1 : 0;

            // apply sample to relevant output terminals
            if (isLeftActive) {
                buffer[i + LEFT] += sample;
            }
            if (isRightActive) {
                buffer[i + RIGHT] += sample;
            }

            // proceed to next sample
            this.audioIndex += this.frequency;
            this.audioIndex %= sampleRate;
        }

----------------------------------------
        for (int i = 0, to = buffer.length; i < to; i += 2) {
            // determine sample
            final byte sample = (byte) (this.audioIndex >= target ? this.volume << 1 : -this.volume << 1);

            // apply sample to relevant output terminals
            if (isLeftActive) {
                buffer[i + LEFT] += sample;
            }
            if (isRightActive) {
                buffer[i + RIGHT] += sample;
            }

            // proceed to next sample
            this.audioIndex += this.frequency;
            this.audioIndex %= sampleRate;
        }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
17995944
src/de/joergjahnke/gameboy/core/VideoChip.java 754 760
src/de/joergjahnke/gameboy/core/Sprite.java 87 94
----------------------------------------
        if (scrollY != this.scrollY) {
            if (DEBUG) {
                System.out.println("Set y-scroll to " + scrollY + " at line " + this.currentLine + " of frame " + this.frames);
            }
            this.scrollY = scrollY;
            invalidateLines();
        }

----------------------------------------
    public final void setAttributes(final int attributes) {
        if (attributes != this.attributes) {
            this.attributes = attributes;
            this.hasPriority = (this.attributes & 0x80) == 0;
            // the tile might have changed due to a different tile memory area being used
            updateTile();
        }
    }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
17995939
src/de/joergjahnke/gameboy/core/Cartridge.java 488 493
src/de/joergjahnke/gameboy/core/Sprite.java 87 94
----------------------------------------
        protected final void setRAMBank(final int ramBank) {
            if (ramBank != this.currentRAMBank) {
                this.currentRAMBank = ramBank;
                System.arraycopy(getRAMBanks()[this.currentRAMBank], 0, gameboy.getCPU().memory, RAM_BANK_AREA, RAM_BANK_SIZE);
            }
        }

----------------------------------------
    public final void setAttributes(final int attributes) {
        if (attributes != this.attributes) {
            this.attributes = attributes;
            this.hasPriority = (this.attributes & 0x80) == 0;
            // the tile might have changed due to a different tile memory area being used
            updateTile();
        }
    }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
17995948
src/de/joergjahnke/gameboy/core/VideoChip.java 779 785
src/de/joergjahnke/gameboy/core/Sprite.java 87 94
----------------------------------------
        if (windowX != this.windowX) {
            if (DEBUG) {
                System.out.println("Set window x-position to " + windowX + " at line " + this.currentLine + " of frame " + this.frames);
            }
            this.windowX = windowX;
            invalidateWindowLines();
        }

----------------------------------------
    public final void setAttributes(final int attributes) {
        if (attributes != this.attributes) {
            this.attributes = attributes;
            this.hasPriority = (this.attributes & 0x80) == 0;
            // the tile might have changed due to a different tile memory area being used
            updateTile();
        }
    }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
17995949
src/de/joergjahnke/common/jme/Menu.java 181 187
src/de/joergjahnke/gameboy/core/Sprite.java 87 94
----------------------------------------
    public void setSelectCommandText(final String text) {
        this.selectCommandText = text;
        if (this.selectCommand != null) {
            removeCommand(this.selectCommand);
            setSelectCommand();
        }
    }

----------------------------------------
    public final void setAttributes(final int attributes) {
        if (attributes != this.attributes) {
            this.attributes = attributes;
            this.hasPriority = (this.attributes & 0x80) == 0;
            // the tile might have changed due to a different tile memory area being used
            updateTile();
        }
    }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
17995943
src/de/joergjahnke/gameboy/core/VideoChip.java 1107 1115
src/de/joergjahnke/gameboy/core/Sprite.java 87 94
----------------------------------------
        if (this.currentLine < SCREEN_HEIGHT) {
            // trigger OAM IRQ if necessary
            if (isLCDEnabled()) {
                checkOAMIRQ();
            }

            lcdCycles = OAM_PERIOD;
            this.mode = MODE_OAM;
        } else {

----------------------------------------
    public final void setAttributes(final int attributes) {
        if (attributes != this.attributes) {
            this.attributes = attributes;
            this.hasPriority = (this.attributes & 0x80) == 0;
            // the tile might have changed due to a different tile memory area being used
            updateTile();
        }
    }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
17995940
src/de/joergjahnke/common/jme/Menu.java 203 209
src/de/joergjahnke/gameboy/core/Sprite.java 87 94
----------------------------------------
    public void setBackCommandText(final String text) {
        this.backCommandText = text;
        if (this.backCommand != null) {
            removeCommand(this.backCommand);
            setBackCommand();
        }
    }

----------------------------------------
    public final void setAttributes(final int attributes) {
        if (attributes != this.attributes) {
            this.attributes = attributes;
            this.hasPriority = (this.attributes & 0x80) == 0;
            // the tile might have changed due to a different tile memory area being used
            updateTile();
        }
    }

----------------------------------------
