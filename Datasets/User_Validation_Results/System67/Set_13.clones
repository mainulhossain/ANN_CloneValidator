$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
17996008
src/de/joergjahnke/gameboy/core/CPU.java 2166 2171
src/de/joergjahnke/gameboy/jme/MEGameboyMIDlet.java 407 413
----------------------------------------
            if (this.isPaused) {
                try {
                    Thread.sleep(100);
                } catch (InterruptedException ex) {
                }
            }

----------------------------------------
        if (null == cartridgeImage) {
            try {
                cartridgeImage = Image.createImage("/res/drawable/cartridge.png");
            } catch (Exception e) {
                // we can work without the image
            }
        }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
17996021
src/de/joergjahnke/gameboy/swing/GameboyFrame.java 984 991
src/de/joergjahnke/gameboy/jme/MEGameboyMIDlet.java 407 413
----------------------------------------
                if (evt.getEventType() == HyperlinkEvent.EventType.ACTIVATED) {
                    try {
                        Desktop.getDesktop().browse(evt.getURL().toURI());
                    } catch (Throwable t) {
                        // could not display the web page, what to do now???
                        System.err.println("Could not browse to page " + evt.getURL());
                    }
                }

----------------------------------------
        if (null == cartridgeImage) {
            try {
                cartridgeImage = Image.createImage("/res/drawable/cartridge.png");
            } catch (Exception e) {
                // we can work without the image
            }
        }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
17996016
src/de/joergjahnke/gameboy/core/CPU.java 3104 3110
src/de/joergjahnke/gameboy/jme/MEGameboyMIDlet.java 407 413
----------------------------------------
    public final void throttle(final long ms) {
        this.throttledMillis += ms;
        try {
            Thread.sleep(ms);
        } catch (InterruptedException ex) {
        }
    }

----------------------------------------
        if (null == cartridgeImage) {
            try {
                cartridgeImage = Image.createImage("/res/drawable/cartridge.png");
            } catch (Exception e) {
                // we can work without the image
            }
        }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
17996011
src/de/joergjahnke/gameboy/swing/GameboyFrame.java 296 301
src/de/joergjahnke/gameboy/jme/MEGameboyMIDlet.java 407 413
----------------------------------------
        } finally {
            try {
                out.close();
            } catch (Exception e) {
            }
        }

----------------------------------------
        if (null == cartridgeImage) {
            try {
                cartridgeImage = Image.createImage("/res/drawable/cartridge.png");
            } catch (Exception e) {
                // we can work without the image
            }
        }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
17996006
src/de/joergjahnke/common/jme/Settings.java 121 127
src/de/joergjahnke/gameboy/jme/MEGameboyMIDlet.java 407 413
----------------------------------------
    public boolean getBoolean(final String key, final boolean defaultValue) {
        try {
            return getBoolean(key);
        } catch (Exception e) {
            return defaultValue;
        }
    }

----------------------------------------
        if (null == cartridgeImage) {
            try {
                cartridgeImage = Image.createImage("/res/drawable/cartridge.png");
            } catch (Exception e) {
                // we can work without the image
            }
        }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
17996009
src/de/joergjahnke/gameboy/swing/GameboyFrame.java 510 515
src/de/joergjahnke/gameboy/jme/MEGameboyMIDlet.java 407 413
----------------------------------------
        } finally {
            try {
                romStream.close();
            } catch (Exception e) {
            }
        }

----------------------------------------
        if (null == cartridgeImage) {
            try {
                cartridgeImage = Image.createImage("/res/drawable/cartridge.png");
            } catch (Exception e) {
                // we can work without the image
            }
        }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
17996014
src/de/joergjahnke/gameboy/swing/GameboyFrame.java 375 380
src/de/joergjahnke/gameboy/jme/MEGameboyMIDlet.java 407 413
----------------------------------------
        } finally {
            try {
                in.close();
            } catch (Exception e) {
            }
        }

----------------------------------------
        if (null == cartridgeImage) {
            try {
                cartridgeImage = Image.createImage("/res/drawable/cartridge.png");
            } catch (Exception e) {
                // we can work without the image
            }
        }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
17996019
src/de/joergjahnke/common/jme/Settings.java 161 167
src/de/joergjahnke/gameboy/jme/MEGameboyMIDlet.java 407 413
----------------------------------------
    public String getString(final String key, final String defaultValue) {
        try {
            return getString(key);
        } catch (Exception e) {
            return defaultValue;
        }
    }

----------------------------------------
        if (null == cartridgeImage) {
            try {
                cartridgeImage = Image.createImage("/res/drawable/cartridge.png");
            } catch (Exception e) {
                // we can work without the image
            }
        }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
17995518
src/de/joergjahnke/common/jme/Settings.java 84 90
src/de/joergjahnke/gameboy/jme/MEGameboyMIDlet.java 414 420
----------------------------------------
    public int getInteger(final String key, final int defaultValue) {
        try {
            return getInteger(key);
        } catch (Exception e) {
            return defaultValue;
        }
    }

----------------------------------------
        if (null == snapshotImage) {
            try {
                snapshotImage = Image.createImage("/res/drawable/snapshot.png");
            } catch (Exception e) {
                // we can work without the image
            }
        }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
17995509
src/de/joergjahnke/gameboy/swing/GameboyFrame.java 375 380
src/de/joergjahnke/gameboy/jme/MEGameboyMIDlet.java 414 420
----------------------------------------
        } finally {
            try {
                in.close();
            } catch (Exception e) {
            }
        }

----------------------------------------
        if (null == snapshotImage) {
            try {
                snapshotImage = Image.createImage("/res/drawable/snapshot.png");
            } catch (Exception e) {
                // we can work without the image
            }
        }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
17995514
src/de/joergjahnke/common/jme/Settings.java 161 167
src/de/joergjahnke/gameboy/jme/MEGameboyMIDlet.java 414 420
----------------------------------------
    public String getString(final String key, final String defaultValue) {
        try {
            return getString(key);
        } catch (Exception e) {
            return defaultValue;
        }
    }

----------------------------------------
        if (null == snapshotImage) {
            try {
                snapshotImage = Image.createImage("/res/drawable/snapshot.png");
            } catch (Exception e) {
                // we can work without the image
            }
        }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
17995519
src/de/joergjahnke/common/bluetooth/BluetoothClient.java 174 180
src/de/joergjahnke/gameboy/jme/MEGameboyMIDlet.java 414 420
----------------------------------------
    public void servicesDiscovered(final int transID, final ServiceRecord[] servRecord) {
        try {
            this.serviceRecord = servRecord[0];
        } catch (Exception e) {
            // it may happen that no service record can be retrieved, in this case serviceRecord remains null
        }
    }

----------------------------------------
        if (null == snapshotImage) {
            try {
                snapshotImage = Image.createImage("/res/drawable/snapshot.png");
            } catch (Exception e) {
                // we can work without the image
            }
        }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
17995517
src/de/joergjahnke/common/bluetooth/BluetoothClient.java 149 158
src/de/joergjahnke/gameboy/jme/MEGameboyMIDlet.java 414 420
----------------------------------------
        synchronized (this.agent) {
            this.agent.searchServices(null, uuids, btDevice, this);

            // wait until the discovery agents notifies us that he is finished or one minute has passed
            try {
                this.agent.wait(getTimeout(), 0);
            } catch (InterruptedException e) {
                // we got interrupted, no problem
            }
        }

----------------------------------------
        if (null == snapshotImage) {
            try {
                snapshotImage = Image.createImage("/res/drawable/snapshot.png");
            } catch (Exception e) {
                // we can work without the image
            }
        }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
17995512
src/de/joergjahnke/gameboy/swing/GameboyFrame.java 241 248
src/de/joergjahnke/gameboy/jme/MEGameboyMIDlet.java 414 420
----------------------------------------
                    public void windowClosing(final WindowEvent evt) {
                        try {
                            settings.storeToXML(new FileOutputStream(new File(PROPERTIES_NAME)), "Properties for JSwingBoy");
                            stopGame();
                        } catch (Exception e) {
                            // we can't save the settings, that's a pity, but we'll just use defaults on next startup
                        }
                    }

----------------------------------------
        if (null == snapshotImage) {
            try {
                snapshotImage = Image.createImage("/res/drawable/snapshot.png");
            } catch (Exception e) {
                // we can work without the image
            }
        }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
17995507
src/de/joergjahnke/common/bluetooth/BluetoothDevice.java 158 164
src/de/joergjahnke/gameboy/jme/MEGameboyMIDlet.java 414 420
----------------------------------------
    public static String getRemoteDeviceName(final RemoteDevice dev) {
        try {
            return dev.getFriendlyName(false) == null ? dev.getBluetoothAddress() : dev.getFriendlyName(false);
        } catch (IOException e) {
            return "unknown";
        }
    }

----------------------------------------
        if (null == snapshotImage) {
            try {
                snapshotImage = Image.createImage("/res/drawable/snapshot.png");
            } catch (Exception e) {
                // we can work without the image
            }
        }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
17995501
src/de/joergjahnke/common/jme/Settings.java 121 127
src/de/joergjahnke/gameboy/jme/MEGameboyMIDlet.java 414 420
----------------------------------------
    public boolean getBoolean(final String key, final boolean defaultValue) {
        try {
            return getBoolean(key);
        } catch (Exception e) {
            return defaultValue;
        }
    }

----------------------------------------
        if (null == snapshotImage) {
            try {
                snapshotImage = Image.createImage("/res/drawable/snapshot.png");
            } catch (Exception e) {
                // we can work without the image
            }
        }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
17995506
src/de/joergjahnke/gameboy/swing/GameboyFrame.java 296 301
src/de/joergjahnke/gameboy/jme/MEGameboyMIDlet.java 414 420
----------------------------------------
        } finally {
            try {
                out.close();
            } catch (Exception e) {
            }
        }

----------------------------------------
        if (null == snapshotImage) {
            try {
                snapshotImage = Image.createImage("/res/drawable/snapshot.png");
            } catch (Exception e) {
                // we can work without the image
            }
        }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
17995511
src/de/joergjahnke/gameboy/core/CPU.java 3104 3110
src/de/joergjahnke/gameboy/jme/MEGameboyMIDlet.java 414 420
----------------------------------------
    public final void throttle(final long ms) {
        this.throttledMillis += ms;
        try {
            Thread.sleep(ms);
        } catch (InterruptedException ex) {
        }
    }

----------------------------------------
        if (null == snapshotImage) {
            try {
                snapshotImage = Image.createImage("/res/drawable/snapshot.png");
            } catch (Exception e) {
                // we can work without the image
            }
        }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
17995516
src/de/joergjahnke/gameboy/swing/GameboyFrame.java 984 991
src/de/joergjahnke/gameboy/jme/MEGameboyMIDlet.java 414 420
----------------------------------------
                if (evt.getEventType() == HyperlinkEvent.EventType.ACTIVATED) {
                    try {
                        Desktop.getDesktop().browse(evt.getURL().toURI());
                    } catch (Throwable t) {
                        // could not display the web page, what to do now???
                        System.err.println("Could not browse to page " + evt.getURL());
                    }
                }

----------------------------------------
        if (null == snapshotImage) {
            try {
                snapshotImage = Image.createImage("/res/drawable/snapshot.png");
            } catch (Exception e) {
                // we can work without the image
            }
        }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
17995502
src/de/joergjahnke/common/jme/FormattedTextForm.java 159 165
src/de/joergjahnke/gameboy/jme/MEGameboyMIDlet.java 414 420
----------------------------------------
                public void commandAction(final Command c, final Item item) {
                    try {
                        midlet.platformRequest(((StringItem)item).getText());
                    } catch (Exception e) {
                        // we could not invoke the browser, that's a pity but we can live with it
                    }
                }

----------------------------------------
        if (null == snapshotImage) {
            try {
                snapshotImage = Image.createImage("/res/drawable/snapshot.png");
            } catch (Exception e) {
                // we can work without the image
            }
        }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
17995500
src/de/joergjahnke/gameboy/swing/GameboyFrame.java 489 494
src/de/joergjahnke/gameboy/jme/MEGameboyMIDlet.java 414 420
----------------------------------------
            } finally {
                try {
                    saveStream.close();
                } catch (Exception e) {
                }
            }

----------------------------------------
        if (null == snapshotImage) {
            try {
                snapshotImage = Image.createImage("/res/drawable/snapshot.png");
            } catch (Exception e) {
                // we can work without the image
            }
        }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
17995505
src/de/joergjahnke/gameboy/swing/GameboyFrame.java 260 266
src/de/joergjahnke/gameboy/jme/MEGameboyMIDlet.java 414 420
----------------------------------------
    private ImageIcon getMenuIcon(final String filename) {
        try {
            return new ImageIcon(new ImageIcon(getClass().getResource("/res/drawable/" + filename)).getImage().getScaledInstance(16, 16, Image.SCALE_SMOOTH));
        } catch (Exception e) {
            return null;
        }
    }

----------------------------------------
        if (null == snapshotImage) {
            try {
                snapshotImage = Image.createImage("/res/drawable/snapshot.png");
            } catch (Exception e) {
                // we can work without the image
            }
        }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
17995510
src/de/joergjahnke/common/jme/OrientationSensitiveCanvasHelper.java 113 119
src/de/joergjahnke/gameboy/jme/MEGameboyMIDlet.java 414 420
----------------------------------------
    public void deactivateAccelerometer() {
        try {
            ((javax.microedition.sensor.SensorConnection) this.con).removeDataListener();
            this.con.close();
        } catch (Throwable t) {
        }
    }

----------------------------------------
        if (null == snapshotImage) {
            try {
                snapshotImage = Image.createImage("/res/drawable/snapshot.png");
            } catch (Exception e) {
                // we can work without the image
            }
        }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
17995515
src/de/joergjahnke/gameboy/swing/GameboyFrame.java 998 1004
src/de/joergjahnke/gameboy/jme/MEGameboyMIDlet.java 414 420
----------------------------------------
    private void jMenuItemContentsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemContentsActionPerformed
        try {
            java.awt.Desktop.getDesktop().browse(new URI(URL_ONLINE_HELP));
        } catch (Throwable t) {
            JOptionPane.showMessageDialog(this, this.commonResources.getString("CouldNotDisplayOnlineHelp") + " '" + URL_ONLINE_HELP + "'", this.commonResources.getString("CouldNotStartBrowser"), JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jMenuItemContentsActionPerformed

----------------------------------------
        if (null == snapshotImage) {
            try {
                snapshotImage = Image.createImage("/res/drawable/snapshot.png");
            } catch (Exception e) {
                // we can work without the image
            }
        }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
17995503
src/de/joergjahnke/gameboy/core/CPU.java 2166 2171
src/de/joergjahnke/gameboy/jme/MEGameboyMIDlet.java 414 420
----------------------------------------
            if (this.isPaused) {
                try {
                    Thread.sleep(100);
                } catch (InterruptedException ex) {
                }
            }

----------------------------------------
        if (null == snapshotImage) {
            try {
                snapshotImage = Image.createImage("/res/drawable/snapshot.png");
            } catch (Exception e) {
                // we can work without the image
            }
        }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
17995508
src/de/joergjahnke/common/jme/FileSystemHandler.java 189 195
src/de/joergjahnke/gameboy/jme/MEGameboyMIDlet.java 414 420
----------------------------------------
                if (prgsString.length() > 0) {
                    try {
                        settings.setString(SETTING_PROGRAMS, prgsString.toString());
                    } catch (Exception e) {
                    // we could not save the list of programs on the phone, that's OK
                    }
                }

----------------------------------------
        if (null == snapshotImage) {
            try {
                snapshotImage = Image.createImage("/res/drawable/snapshot.png");
            } catch (Exception e) {
                // we can work without the image
            }
        }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
17995513
src/de/joergjahnke/common/extendeddevices/WavePlayer.java 64 70
src/de/joergjahnke/gameboy/jme/MEGameboyMIDlet.java 414 420
----------------------------------------
                        synchronized (buffer) {
                            buffer.reset();
                            try {
                                buffer.wait();
                            } catch (InterruptedException e) {
                            }
                        }

----------------------------------------
        if (null == snapshotImage) {
            try {
                snapshotImage = Image.createImage("/res/drawable/snapshot.png");
            } catch (Exception e) {
                // we can work without the image
            }
        }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
17995504
src/de/joergjahnke/gameboy/swing/GameboyFrame.java 510 515
src/de/joergjahnke/gameboy/jme/MEGameboyMIDlet.java 414 420
----------------------------------------
        } finally {
            try {
                romStream.close();
            } catch (Exception e) {
            }
        }

----------------------------------------
        if (null == snapshotImage) {
            try {
                snapshotImage = Image.createImage("/res/drawable/snapshot.png");
            } catch (Exception e) {
                // we can work without the image
            }
        }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
17995499
src/de/joergjahnke/gameboy/jme/MEGameboyMIDlet.java 407 413
src/de/joergjahnke/gameboy/jme/MEGameboyMIDlet.java 414 420
----------------------------------------
        if (null == cartridgeImage) {
            try {
                cartridgeImage = Image.createImage("/res/drawable/cartridge.png");
            } catch (Exception e) {
                // we can work without the image
            }
        }

----------------------------------------
        if (null == snapshotImage) {
            try {
                snapshotImage = Image.createImage("/res/drawable/snapshot.png");
            } catch (Exception e) {
                // we can work without the image
            }
        }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
17995532
src/de/joergjahnke/common/jme/Settings.java 161 167
src/de/joergjahnke/gameboy/jme/MEGameboyMIDlet.java 442 453
----------------------------------------
    public String getString(final String key, final String defaultValue) {
        try {
            return getString(key);
        } catch (Exception e) {
            return defaultValue;
        }
    }

----------------------------------------
    private String getLocale() {
        // initialize L10N support
        String locale = System.getProperty("microedition.locale");

        try {
            locale = this.settings.getString(SETTING_LANGUAGE, locale);
        } catch (Exception e) {
            // we could not determine the locale setting and will use the system default
        }

        return locale;
    }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
17995520
src/de/joergjahnke/common/jme/Settings.java 121 127
src/de/joergjahnke/gameboy/jme/MEGameboyMIDlet.java 442 453
----------------------------------------
    public boolean getBoolean(final String key, final boolean defaultValue) {
        try {
            return getBoolean(key);
        } catch (Exception e) {
            return defaultValue;
        }
    }

----------------------------------------
    private String getLocale() {
        // initialize L10N support
        String locale = System.getProperty("microedition.locale");

        try {
            locale = this.settings.getString(SETTING_LANGUAGE, locale);
        } catch (Exception e) {
            // we could not determine the locale setting and will use the system default
        }

        return locale;
    }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
17995531
src/de/joergjahnke/common/jme/Settings.java 84 90
src/de/joergjahnke/gameboy/jme/MEGameboyMIDlet.java 442 453
----------------------------------------
    public int getInteger(final String key, final int defaultValue) {
        try {
            return getInteger(key);
        } catch (Exception e) {
            return defaultValue;
        }
    }

----------------------------------------
    private String getLocale() {
        // initialize L10N support
        String locale = System.getProperty("microedition.locale");

        try {
            locale = this.settings.getString(SETTING_LANGUAGE, locale);
        } catch (Exception e) {
            // we could not determine the locale setting and will use the system default
        }

        return locale;
    }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
17995521
src/de/joergjahnke/gameboy/core/Tile.java 306 347
src/de/joergjahnke/gameboy/core/Tile.java 348 378
----------------------------------------
                        case VideoChip.SCALING_QUALITY: {
                            final int x1 = (sX1024 >> VideoChip.SCALING_MULTIPLIER_BITS);
                            final int x2 = Math.min(maxSX, sX1024Next >> VideoChip.SCALING_MULTIPLIER_BITS);
                            final int y2 = Math.min(maxSY, sY1024Next >> VideoChip.SCALING_MULTIPLIER_BITS);

                            // get four pixel colors from the source array to mix
                            final int offsetY1 = (sY1024 >> VideoChip.SCALING_MULTIPLIER_BITS) * w;
                            final int offsetY2 = y2 * w;
                            int col11 = source[offsetY1 + x1];
                            int col12 = source[offsetY1 + x2];
                            int col21 = source[offsetY2 + x1];
                            int col22 = source[offsetY2 + x2];

                            // we need a special handling for transparent (sprite) pixels
                            if (col11 == TRANSPARENT) {
                                col11 = col12;
                            } else if (col12 == TRANSPARENT) {
                                col12 = col11;
                            }
                            if (col21 == TRANSPARENT) {
                                col21 = col22;
                            } else if (col22 == TRANSPARENT) {
                                col22 = col21;
                            }
                            if (col11 == TRANSPARENT) {
                                col11 = col21;
                            } else if (col21 == TRANSPARENT) {
                                col21 = col11;
                            }

                            // determine fractions of these colors
                            final int fracX = (VideoChip.SCALING_MULTIPLIER - (sX1024 % VideoChip.SCALING_MULTIPLIER));
                            final int fracY = (VideoChip.SCALING_MULTIPLIER - (sY1024 % VideoChip.SCALING_MULTIPLIER));
                            final int fraction11 = (fracX * fracY) >> VideoChip.SCALING_MULTIPLIER_BITS;
                            final int fraction12 = ((VideoChip.SCALING_MULTIPLIER - fracX) * fracY) >> VideoChip.SCALING_MULTIPLIER_BITS;
                            final int fraction21 = (fracX * (VideoChip.SCALING_MULTIPLIER - fracY)) >> VideoChip.SCALING_MULTIPLIER_BITS;
                            final int fraction22 = ((VideoChip.SCALING_MULTIPLIER - fracX) * (VideoChip.SCALING_MULTIPLIER - fracY)) >> VideoChip.SCALING_MULTIPLIER_BITS;

                            // mix the colors and set the mixed color as new pixel
                            scaled[yidx + x] = Color.mix(col11, fraction11, col12, fraction12, col21, fraction21, col22, fraction22);
                            break;
                        }

----------------------------------------
                        case VideoChip.SCALING_AVERAGING: {
                            final int x1 = (sX1024 >> VideoChip.SCALING_MULTIPLIER_BITS);
                            final int x2 = Math.min(maxSX, sX1024Next >> VideoChip.SCALING_MULTIPLIER_BITS);
                            final int y2 = Math.min(maxSY, sY1024Next >> VideoChip.SCALING_MULTIPLIER_BITS);
                            final int offsetY1 = (sY1024 >> VideoChip.SCALING_MULTIPLIER_BITS) * w;
                            final int offsetY2 = y2 * w;
                            int col11 = source[offsetY1 + x1];
                            int col12 = source[offsetY1 + x2];
                            int col21 = source[offsetY2 + x1];
                            int col22 = source[offsetY2 + x2];

                            // we need a special handling for transparent (sprite) pixels
                            if (col11 == TRANSPARENT) {
                                col11 = col12;
                            } else if (col12 == TRANSPARENT) {
                                col12 = col11;
                            }
                            if (col21 == TRANSPARENT) {
                                col21 = col22;
                            } else if (col22 == TRANSPARENT) {
                                col22 = col21;
                            }
                            if (col11 == TRANSPARENT) {
                                col11 = col21;
                            } else if (col21 == TRANSPARENT) {
                                col21 = col11;
                            }

                            scaled[yidx + x] = Color.mix(col11, col12, col21, col22);
                            break;
                        }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
17995522
src/de/joergjahnke/gameboy/core/Tile.java 348 378
src/de/joergjahnke/gameboy/core/Tile.java 381 410
----------------------------------------
                        case VideoChip.SCALING_AVERAGING: {
                            final int x1 = (sX1024 >> VideoChip.SCALING_MULTIPLIER_BITS);
                            final int x2 = Math.min(maxSX, sX1024Next >> VideoChip.SCALING_MULTIPLIER_BITS);
                            final int y2 = Math.min(maxSY, sY1024Next >> VideoChip.SCALING_MULTIPLIER_BITS);
                            final int offsetY1 = (sY1024 >> VideoChip.SCALING_MULTIPLIER_BITS) * w;
                            final int offsetY2 = y2 * w;
                            int col11 = source[offsetY1 + x1];
                            int col12 = source[offsetY1 + x2];
                            int col21 = source[offsetY2 + x1];
                            int col22 = source[offsetY2 + x2];

                            // we need a special handling for transparent (sprite) pixels
                            if (col11 == TRANSPARENT) {
                                col11 = col12;
                            } else if (col12 == TRANSPARENT) {
                                col12 = col11;
                            }
                            if (col21 == TRANSPARENT) {
                                col21 = col22;
                            } else if (col22 == TRANSPARENT) {
                                col22 = col21;
                            }
                            if (col11 == TRANSPARENT) {
                                col11 = col21;
                            } else if (col21 == TRANSPARENT) {
                                col21 = col11;
                            }

                            scaled[yidx + x] = Color.mix(col11, col12, col21, col22);
                            break;
                        }

----------------------------------------
                                if (x % 3 == 1 && y % 3 == 1) {
                                    final int x1 = (sX1024 >> VideoChip.SCALING_MULTIPLIER_BITS);
                                    final int x2 = Math.min(maxSX, sX1024Next >> VideoChip.SCALING_MULTIPLIER_BITS);
                                    final int y2 = Math.min(maxSY, sY1024Next >> VideoChip.SCALING_MULTIPLIER_BITS);
                                    final int offsetY1 = (sY1024 >> VideoChip.SCALING_MULTIPLIER_BITS) * w;
                                    final int offsetY2 = y2 * w;
                                    int col11 = source[offsetY1 + x1];
                                    int col12 = source[offsetY1 + x2];
                                    int col21 = source[offsetY2 + x1];
                                    int col22 = source[offsetY2 + x2];

                                    // we need a special handling for transparent (sprite) pixels
                                    if (col11 == TRANSPARENT) {
                                        col11 = col12;
                                    } else if (col12 == TRANSPARENT) {
                                        col12 = col11;
                                    }
                                    if (col21 == TRANSPARENT) {
                                        col21 = col22;
                                    } else if (col22 == TRANSPARENT) {
                                        col22 = col21;
                                    }
                                    if (col11 == TRANSPARENT) {
                                        col11 = col21;
                                    } else if (col21 == TRANSPARENT) {
                                        col21 = col11;
                                    }

                                    scaled[yidx + x] = Color.mix(col11, col12, col21, col22);
                                } else if (x % 3 == 1) {

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
17995523
src/de/joergjahnke/gameboy/core/Tile.java 306 347
src/de/joergjahnke/gameboy/core/Tile.java 381 410
----------------------------------------
                        case VideoChip.SCALING_QUALITY: {
                            final int x1 = (sX1024 >> VideoChip.SCALING_MULTIPLIER_BITS);
                            final int x2 = Math.min(maxSX, sX1024Next >> VideoChip.SCALING_MULTIPLIER_BITS);
                            final int y2 = Math.min(maxSY, sY1024Next >> VideoChip.SCALING_MULTIPLIER_BITS);

                            // get four pixel colors from the source array to mix
                            final int offsetY1 = (sY1024 >> VideoChip.SCALING_MULTIPLIER_BITS) * w;
                            final int offsetY2 = y2 * w;
                            int col11 = source[offsetY1 + x1];
                            int col12 = source[offsetY1 + x2];
                            int col21 = source[offsetY2 + x1];
                            int col22 = source[offsetY2 + x2];

                            // we need a special handling for transparent (sprite) pixels
                            if (col11 == TRANSPARENT) {
                                col11 = col12;
                            } else if (col12 == TRANSPARENT) {
                                col12 = col11;
                            }
                            if (col21 == TRANSPARENT) {
                                col21 = col22;
                            } else if (col22 == TRANSPARENT) {
                                col22 = col21;
                            }
                            if (col11 == TRANSPARENT) {
                                col11 = col21;
                            } else if (col21 == TRANSPARENT) {
                                col21 = col11;
                            }

                            // determine fractions of these colors
                            final int fracX = (VideoChip.SCALING_MULTIPLIER - (sX1024 % VideoChip.SCALING_MULTIPLIER));
                            final int fracY = (VideoChip.SCALING_MULTIPLIER - (sY1024 % VideoChip.SCALING_MULTIPLIER));
                            final int fraction11 = (fracX * fracY) >> VideoChip.SCALING_MULTIPLIER_BITS;
                            final int fraction12 = ((VideoChip.SCALING_MULTIPLIER - fracX) * fracY) >> VideoChip.SCALING_MULTIPLIER_BITS;
                            final int fraction21 = (fracX * (VideoChip.SCALING_MULTIPLIER - fracY)) >> VideoChip.SCALING_MULTIPLIER_BITS;
                            final int fraction22 = ((VideoChip.SCALING_MULTIPLIER - fracX) * (VideoChip.SCALING_MULTIPLIER - fracY)) >> VideoChip.SCALING_MULTIPLIER_BITS;

                            // mix the colors and set the mixed color as new pixel
                            scaled[yidx + x] = Color.mix(col11, fraction11, col12, fraction12, col21, fraction21, col22, fraction22);
                            break;
                        }

----------------------------------------
                                if (x % 3 == 1 && y % 3 == 1) {
                                    final int x1 = (sX1024 >> VideoChip.SCALING_MULTIPLIER_BITS);
                                    final int x2 = Math.min(maxSX, sX1024Next >> VideoChip.SCALING_MULTIPLIER_BITS);
                                    final int y2 = Math.min(maxSY, sY1024Next >> VideoChip.SCALING_MULTIPLIER_BITS);
                                    final int offsetY1 = (sY1024 >> VideoChip.SCALING_MULTIPLIER_BITS) * w;
                                    final int offsetY2 = y2 * w;
                                    int col11 = source[offsetY1 + x1];
                                    int col12 = source[offsetY1 + x2];
                                    int col21 = source[offsetY2 + x1];
                                    int col22 = source[offsetY2 + x2];

                                    // we need a special handling for transparent (sprite) pixels
                                    if (col11 == TRANSPARENT) {
                                        col11 = col12;
                                    } else if (col12 == TRANSPARENT) {
                                        col12 = col11;
                                    }
                                    if (col21 == TRANSPARENT) {
                                        col21 = col22;
                                    } else if (col22 == TRANSPARENT) {
                                        col22 = col21;
                                    }
                                    if (col11 == TRANSPARENT) {
                                        col11 = col21;
                                    } else if (col21 == TRANSPARENT) {
                                        col21 = col11;
                                    }

                                    scaled[yidx + x] = Color.mix(col11, col12, col21, col22);
                                } else if (x % 3 == 1) {

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
17995529
src/de/joergjahnke/gameboy/swing/GameboyFrame.java 510 515
src/de/joergjahnke/gameboy/jme/MEGameboyMIDlet.java 613 622
----------------------------------------
        } finally {
            try {
                romStream.close();
            } catch (Exception e) {
            }
        }

----------------------------------------
        } catch (Throwable t) {
            try {
                RecordStore.deleteRecordStore(name);
            } catch (Throwable t2) {
                // the snapshot probably was not saved at all, so we ignore this
            }
            // show the cause of the error
            Display.getDisplay(this).setCurrent(new Alert(LocalizationSupport.getMessage("SavingSnapshotFailed"), LocalizationSupport.getMessage("FailedToStoreState"), null, AlertType.WARNING));
            t.printStackTrace();
        }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
17995557
src/de/joergjahnke/common/bluetooth/BluetoothOBEXClient.java 110 120
src/de/joergjahnke/gameboy/jme/MEGameboyMIDlet.java 613 622
----------------------------------------
    public void disconnect() {
        super.stop();

        try {
            this.clientSession.disconnect(null);
            this.clientSession.close();
        } catch (IOException e) {
            // we had a problem with closing the streams, what to do now?
        }
        this.clientSession = null;
    }

----------------------------------------
        } catch (Throwable t) {
            try {
                RecordStore.deleteRecordStore(name);
            } catch (Throwable t2) {
                // the snapshot probably was not saved at all, so we ignore this
            }
            // show the cause of the error
            Display.getDisplay(this).setCurrent(new Alert(LocalizationSupport.getMessage("SavingSnapshotFailed"), LocalizationSupport.getMessage("FailedToStoreState"), null, AlertType.WARNING));
            t.printStackTrace();
        }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
17995553
src/de/joergjahnke/common/jme/WavePlayer.java 178 188
src/de/joergjahnke/gameboy/jme/MEGameboyMIDlet.java 613 622
----------------------------------------
            if (!this.players.isEmpty()) {
                // then use the next player from the queue and play it
                this.currentPlayer = (Player) this.players.elementAt(0);
                this.players.removeElementAt(0);
                try {
                    this.currentPlayer.start();
                } catch (Exception e) {
                    // we couldn't start the player, we stop the sound as it does not seem to work
                    producer.deleteObservers();
                }
            } else {

----------------------------------------
        } catch (Throwable t) {
            try {
                RecordStore.deleteRecordStore(name);
            } catch (Throwable t2) {
                // the snapshot probably was not saved at all, so we ignore this
            }
            // show the cause of the error
            Display.getDisplay(this).setCurrent(new Alert(LocalizationSupport.getMessage("SavingSnapshotFailed"), LocalizationSupport.getMessage("FailedToStoreState"), null, AlertType.WARNING));
            t.printStackTrace();
        }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
17995526
src/de/joergjahnke/gameboy/core/Gameboy.java 207 216
src/de/joergjahnke/gameboy/jme/MEGameboyMIDlet.java 613 622
----------------------------------------
        if (!isRunning()) {
            this.logger.info("Gameboy starting");
            super.run();
            // we use this thread to run the CPU
            try {
                this.cpu.run();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }

----------------------------------------
        } catch (Throwable t) {
            try {
                RecordStore.deleteRecordStore(name);
            } catch (Throwable t2) {
                // the snapshot probably was not saved at all, so we ignore this
            }
            // show the cause of the error
            Display.getDisplay(this).setCurrent(new Alert(LocalizationSupport.getMessage("SavingSnapshotFailed"), LocalizationSupport.getMessage("FailedToStoreState"), null, AlertType.WARNING));
            t.printStackTrace();
        }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
17995556
src/de/joergjahnke/common/bluetooth/BluetoothOBEXClient.java 240 250
src/de/joergjahnke/gameboy/jme/MEGameboyMIDlet.java 613 622
----------------------------------------
    public void abortFileReception() {
        super.stop();

        try {
            this.local.setDiscoverable(DiscoveryAgent.NOT_DISCOVERABLE);
            this.notifier.close();
            this.notifier = null;
        } catch (Exception e) {
            // we could not completely shut down the service, what to do now?
        }
    }

----------------------------------------
        } catch (Throwable t) {
            try {
                RecordStore.deleteRecordStore(name);
            } catch (Throwable t2) {
                // the snapshot probably was not saved at all, so we ignore this
            }
            // show the cause of the error
            Display.getDisplay(this).setCurrent(new Alert(LocalizationSupport.getMessage("SavingSnapshotFailed"), LocalizationSupport.getMessage("FailedToStoreState"), null, AlertType.WARNING));
            t.printStackTrace();
        }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
17995551
src/de/joergjahnke/gameboy/android/AndroidGB.java 476 484
src/de/joergjahnke/gameboy/jme/MEGameboyMIDlet.java 613 622
----------------------------------------
            if (this.gameboy.getSoundChip().countObservers() == 0) {
                try {
                    this.gameboy.getSoundChip().addObserver(new WavePlayer(this.gameboy.getSoundChip()));
                } catch (Throwable t) {
                    // we could not add a player, that's OK
                    this.gameboy.getLogger().warning("Could not create sound player! Sound output remains deactivated.");
                    t.printStackTrace();
                }
            }

----------------------------------------
        } catch (Throwable t) {
            try {
                RecordStore.deleteRecordStore(name);
            } catch (Throwable t2) {
                // the snapshot probably was not saved at all, so we ignore this
            }
            // show the cause of the error
            Display.getDisplay(this).setCurrent(new Alert(LocalizationSupport.getMessage("SavingSnapshotFailed"), LocalizationSupport.getMessage("FailedToStoreState"), null, AlertType.WARNING));
            t.printStackTrace();
        }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
17995555
src/de/joergjahnke/common/extendeddevices/WavePlayer.java 64 70
src/de/joergjahnke/gameboy/jme/MEGameboyMIDlet.java 613 622
----------------------------------------
                        synchronized (buffer) {
                            buffer.reset();
                            try {
                                buffer.wait();
                            } catch (InterruptedException e) {
                            }
                        }

----------------------------------------
        } catch (Throwable t) {
            try {
                RecordStore.deleteRecordStore(name);
            } catch (Throwable t2) {
                // the snapshot probably was not saved at all, so we ignore this
            }
            // show the cause of the error
            Display.getDisplay(this).setCurrent(new Alert(LocalizationSupport.getMessage("SavingSnapshotFailed"), LocalizationSupport.getMessage("FailedToStoreState"), null, AlertType.WARNING));
            t.printStackTrace();
        }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
17995527
src/de/joergjahnke/common/android/FileDialog.java 40 49
src/de/joergjahnke/gameboy/jme/MEGameboyMIDlet.java 613 622
----------------------------------------
    public void onCreate(final Bundle icicle) {
        super.onCreate(icicle);

        // go to the root directory
        try {
            showDirectory(getIntent().getStringExtra("de.joergjahnke.c64.android.prgdir"));
        } catch (NullPointerException e) {
            showDirectory("/");
        }
    }

----------------------------------------
        } catch (Throwable t) {
            try {
                RecordStore.deleteRecordStore(name);
            } catch (Throwable t2) {
                // the snapshot probably was not saved at all, so we ignore this
            }
            // show the cause of the error
            Display.getDisplay(this).setCurrent(new Alert(LocalizationSupport.getMessage("SavingSnapshotFailed"), LocalizationSupport.getMessage("FailedToStoreState"), null, AlertType.WARNING));
            t.printStackTrace();
        }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
28734596
src/de/joergjahnke/gameboy/swing/GameboyFrame.java 241 248
src/de/joergjahnke/gameboy/jme/MEGameboyMIDlet.java 613 622
----------------------------------------
                    public void windowClosing(final WindowEvent evt) {
                        try {
                            settings.storeToXML(new FileOutputStream(new File(PROPERTIES_NAME)), "Properties for JSwingBoy");
                            stopGame();
                        } catch (Exception e) {
                            // we can't save the settings, that's a pity, but we'll just use defaults on next startup
                        }
                    }

----------------------------------------
        } catch (Throwable t) {
            try {
                RecordStore.deleteRecordStore(name);
            } catch (Throwable t2) {
                // the snapshot probably was not saved at all, so we ignore this
            }
            // show the cause of the error
            Display.getDisplay(this).setCurrent(new Alert(LocalizationSupport.getMessage("SavingSnapshotFailed"), LocalizationSupport.getMessage("FailedToStoreState"), null, AlertType.WARNING));
            t.printStackTrace();
        }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
17995554
src/de/joergjahnke/gameboy/core/CPU.java 3104 3110
src/de/joergjahnke/gameboy/jme/MEGameboyMIDlet.java 613 622
----------------------------------------
    public final void throttle(final long ms) {
        this.throttledMillis += ms;
        try {
            Thread.sleep(ms);
        } catch (InterruptedException ex) {
        }
    }

----------------------------------------
        } catch (Throwable t) {
            try {
                RecordStore.deleteRecordStore(name);
            } catch (Throwable t2) {
                // the snapshot probably was not saved at all, so we ignore this
            }
            // show the cause of the error
            Display.getDisplay(this).setCurrent(new Alert(LocalizationSupport.getMessage("SavingSnapshotFailed"), LocalizationSupport.getMessage("FailedToStoreState"), null, AlertType.WARNING));
            t.printStackTrace();
        }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
17995524
src/de/joergjahnke/gameboy/swing/GameboyFrame.java 489 494
src/de/joergjahnke/gameboy/jme/MEGameboyMIDlet.java 613 622
----------------------------------------
            } finally {
                try {
                    saveStream.close();
                } catch (Exception e) {
                }
            }

----------------------------------------
        } catch (Throwable t) {
            try {
                RecordStore.deleteRecordStore(name);
            } catch (Throwable t2) {
                // the snapshot probably was not saved at all, so we ignore this
            }
            // show the cause of the error
            Display.getDisplay(this).setCurrent(new Alert(LocalizationSupport.getMessage("SavingSnapshotFailed"), LocalizationSupport.getMessage("FailedToStoreState"), null, AlertType.WARNING));
            t.printStackTrace();
        }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
17995530
src/de/joergjahnke/gameboy/swing/GameboyFrame.java 296 301
src/de/joergjahnke/gameboy/jme/MEGameboyMIDlet.java 613 622
----------------------------------------
        } finally {
            try {
                out.close();
            } catch (Exception e) {
            }
        }

----------------------------------------
        } catch (Throwable t) {
            try {
                RecordStore.deleteRecordStore(name);
            } catch (Throwable t2) {
                // the snapshot probably was not saved at all, so we ignore this
            }
            // show the cause of the error
            Display.getDisplay(this).setCurrent(new Alert(LocalizationSupport.getMessage("SavingSnapshotFailed"), LocalizationSupport.getMessage("FailedToStoreState"), null, AlertType.WARNING));
            t.printStackTrace();
        }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
17995528
src/de/joergjahnke/common/bluetooth/BluetoothOBEXClient.java 226 233
src/de/joergjahnke/gameboy/jme/MEGameboyMIDlet.java 613 622
----------------------------------------
            public void run() {
                try {
                    notifier.acceptAndOpen(handler);
                } catch (IOException e) {
                    notifyErrorOccurred(e);
                    abortFileReception();
                }
            }

----------------------------------------
        } catch (Throwable t) {
            try {
                RecordStore.deleteRecordStore(name);
            } catch (Throwable t2) {
                // the snapshot probably was not saved at all, so we ignore this
            }
            // show the cause of the error
            Display.getDisplay(this).setCurrent(new Alert(LocalizationSupport.getMessage("SavingSnapshotFailed"), LocalizationSupport.getMessage("FailedToStoreState"), null, AlertType.WARNING));
            t.printStackTrace();
        }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
17995552
src/de/joergjahnke/gameboy/swing/GameboyFrame.java 375 380
src/de/joergjahnke/gameboy/jme/MEGameboyMIDlet.java 613 622
----------------------------------------
        } finally {
            try {
                in.close();
            } catch (Exception e) {
            }
        }

----------------------------------------
        } catch (Throwable t) {
            try {
                RecordStore.deleteRecordStore(name);
            } catch (Throwable t2) {
                // the snapshot probably was not saved at all, so we ignore this
            }
            // show the cause of the error
            Display.getDisplay(this).setCurrent(new Alert(LocalizationSupport.getMessage("SavingSnapshotFailed"), LocalizationSupport.getMessage("FailedToStoreState"), null, AlertType.WARNING));
            t.printStackTrace();
        }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
17995525
src/de/joergjahnke/gameboy/swing/GameboyFrame.java 393 400
src/de/joergjahnke/gameboy/jme/MEGameboyMIDlet.java 613 622
----------------------------------------
        if (status == STATUS_LOAD_OK || status == STATUS_LOAD_FAILED) {
            try {
                new File(SUSPENDFILE_NAME).delete();
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Could not remove the suspend file! Please remove the suspend file '" + SUSPENDFILE_NAME + "' manually.", this.commonResources.getString("CouldNotRemoveSuspendData"), JOptionPane.ERROR_MESSAGE);
                e.printStackTrace();
            }
        }

----------------------------------------
        } catch (Throwable t) {
            try {
                RecordStore.deleteRecordStore(name);
            } catch (Throwable t2) {
                // the snapshot probably was not saved at all, so we ignore this
            }
            // show the cause of the error
            Display.getDisplay(this).setCurrent(new Alert(LocalizationSupport.getMessage("SavingSnapshotFailed"), LocalizationSupport.getMessage("FailedToStoreState"), null, AlertType.WARNING));
            t.printStackTrace();
        }

----------------------------------------
