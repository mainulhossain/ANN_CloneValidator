$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
24219955
src/de/joergjahnke/gameboy/swing/GameboyFrame.java 768 773
src/de/joergjahnke/gameboy/swing/GameboyFrame.java 779 784
----------------------------------------
        jMenuItemSizeX2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_2, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.SHIFT_MASK));
        buttonGroupScreenSizes.add(jMenuItemSizeX2);
        jMenuItemSizeX2.setText("200%");
        jMenuItemSizeX2.setToolTipText(bundle.getString("Size200Tooltip")); // NOI18N
        jMenuItemSizeX2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {

----------------------------------------
        jMenuItemSizeX3.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_3, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.SHIFT_MASK));
        buttonGroupScreenSizes.add(jMenuItemSizeX3);
        jMenuItemSizeX3.setText("300%");
        jMenuItemSizeX3.setToolTipText(bundle.getString("Size300Tooltip")); // NOI18N
        jMenuItemSizeX3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
24219957
src/de/joergjahnke/gameboy/swing/GameboyFrame.java 779 784
src/de/joergjahnke/gameboy/swing/GameboyFrame.java 790 795
----------------------------------------
        jMenuItemSizeX3.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_3, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.SHIFT_MASK));
        buttonGroupScreenSizes.add(jMenuItemSizeX3);
        jMenuItemSizeX3.setText("300%");
        jMenuItemSizeX3.setToolTipText(bundle.getString("Size300Tooltip")); // NOI18N
        jMenuItemSizeX3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {

----------------------------------------
        jMenuItemSizeX4.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_4, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.SHIFT_MASK));
        buttonGroupScreenSizes.add(jMenuItemSizeX4);
        jMenuItemSizeX4.setText("400%");
        jMenuItemSizeX4.setToolTipText(bundle.getString("Size400Tooltip")); // NOI18N
        jMenuItemSizeX4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
24219956
src/de/joergjahnke/gameboy/swing/GameboyFrame.java 768 773
src/de/joergjahnke/gameboy/swing/GameboyFrame.java 790 795
----------------------------------------
        jMenuItemSizeX2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_2, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.SHIFT_MASK));
        buttonGroupScreenSizes.add(jMenuItemSizeX2);
        jMenuItemSizeX2.setText("200%");
        jMenuItemSizeX2.setToolTipText(bundle.getString("Size200Tooltip")); // NOI18N
        jMenuItemSizeX2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {

----------------------------------------
        jMenuItemSizeX4.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_4, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.SHIFT_MASK));
        buttonGroupScreenSizes.add(jMenuItemSizeX4);
        jMenuItemSizeX4.setText("400%");
        jMenuItemSizeX4.setToolTipText(bundle.getString("Size400Tooltip")); // NOI18N
        jMenuItemSizeX4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
24219954
src/de/joergjahnke/gameboy/swing/GameboyFrame.java 757 762
src/de/joergjahnke/gameboy/swing/GameboyFrame.java 790 795
----------------------------------------
        jMenuItemSizeX1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_1, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.SHIFT_MASK));
        buttonGroupScreenSizes.add(jMenuItemSizeX1);
        jMenuItemSizeX1.setText("100%");
        jMenuItemSizeX1.setToolTipText(bundle.getString("Size100Tooltip")); // NOI18N
        jMenuItemSizeX1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {

----------------------------------------
        jMenuItemSizeX4.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_4, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.SHIFT_MASK));
        buttonGroupScreenSizes.add(jMenuItemSizeX4);
        jMenuItemSizeX4.setText("400%");
        jMenuItemSizeX4.setToolTipText(bundle.getString("Size400Tooltip")); // NOI18N
        jMenuItemSizeX4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
24219958
src/de/joergjahnke/common/jme/FileBrowser.java 141 144
src/de/joergjahnke/common/jme/FileSystemHandler.java 138 143
----------------------------------------
                        final javax.microedition.io.file.FileConnection dirConn = (javax.microedition.io.file.FileConnection) Connector.open(url, Connector.READ);

                        for (final Enumeration en = dirConn.list(); en.hasMoreElements();) {
                            final String file = en.nextElement().toString();

----------------------------------------
                            final javax.microedition.io.file.FileConnection dirConn = (javax.microedition.io.file.FileConnection) Connector.open(directory, Connector.READ);

                            if (dirConn.exists()) {
                                // iterate over all files in the directory
                                for (final Enumeration en = dirConn.list(); en.hasMoreElements();) {
                                    final String url = dirConn.getURL() + en.nextElement();

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
24219959
src/de/joergjahnke/gameboy/jme/GameboyCanvas.java 545 568
src/de/joergjahnke/gameboy/jme/GameboyCanvas.java 579 603
----------------------------------------
    protected void pointerPressed(final int x, final int y) {
        boolean wasEventProcessed = false;

        // check whether an on-screen button was pressed, if these are active
        if (isShowButtons()) {
            for (int i = 0; !wasEventProcessed && i < this.buttons.length; ++i) {
                if (this.buttons[i].collidesWith(this.onePixel, x, y, true)) {
                    this.gameboy.getJoypad().setButtons(this.gameboy.getJoypad().getButtons() | BUTTON_JOYPAD_MAPPING[i]);
                    wasEventProcessed = true;
                }
            }
        }
        if (isShowDirectionButtons()) {
            for (int i = 0; !wasEventProcessed && i < this.directions.length; ++i) {
                if (this.directions[i].collidesWith(this.onePixel, x, y, true)) {
                    this.gameboy.getJoypad().setDirections(this.gameboy.getJoypad().getDirections() | DIRECTION_JOYPAD_MAPPING[i]);
                    wasEventProcessed = true;
                }
            }
        }

        // if it was not an on-screen button then we record the position as possible start of a pointer drag operation
        if (!wasEventProcessed && x >= this.x && x < this.x + this.paintWidth && y >= this.y && y < this.y + this.paintHeight) {
            this.pStartX = x;

----------------------------------------
    protected void pointerReleased(final int x, final int y) {
        boolean wasEventProcessed = false;

        // check for the on-screen buttons if they are active
        if (isShowButtons()) {
            for (int i = 0; !wasEventProcessed && i < this.buttons.length; ++i) {
                if (this.buttons[i].collidesWith(this.onePixel, x, y, true)) {
                    this.gameboy.getJoypad().setButtons(this.gameboy.getJoypad().getButtons() & (0x0f - BUTTON_JOYPAD_MAPPING[i]));
                    wasEventProcessed = true;
                }
            }
        }
        if (isShowDirectionButtons()) {
            for (int i = 0; !wasEventProcessed && i < this.directions.length; ++i) {
                if (this.directions[i].collidesWith(this.onePixel, x, y, true)) {
                    this.gameboy.getJoypad().setDirections(this.gameboy.getJoypad().getDirections() & (0x0f - DIRECTION_JOYPAD_MAPPING[i]));
                    wasEventProcessed = true;
                }
            }
        }

        // if it was not an on-screen button that was released then it might be the end of a drag operation
        if (!wasEventProcessed && x >= this.x && x < this.x + this.paintWidth && y >= this.y && y < this.y + this.paintHeight) {
            // in this case we cease all joypad movement
            this.gameboy.getJoypad().setDirections(0);

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
24219960
src/de/joergjahnke/gameboy/core/CPU.java 1945 1955
src/de/joergjahnke/gameboy/core/CPU.java 1956 1966
----------------------------------------
                        if ((this.f & ZERO) == 0) {
                            final int pc_ = this.pc;

                            this.pc = (memory_[pc_] & 0xff) + ((memory_[pc_ + 1] & 0xff) << 8);
                            this.cycles += 16;
                        } else {
                            this.pc += 2;
                            this.cycles += 12;
                        }
                        break;
                    case 0xca:

----------------------------------------
                        if ((this.f & ZERO) != 0) {
                            final int pc_ = this.pc;

                            this.pc = (memory_[pc_] & 0xff) + ((memory_[pc_ + 1] & 0xff) << 8);
                            this.cycles += 16;
                        } else {
                            this.pc += 2;
                            this.cycles += 12;
                        }
                        break;
                    case 0xd2:

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
24219963
src/de/joergjahnke/gameboy/core/CPU.java 1956 1966
src/de/joergjahnke/gameboy/core/CPU.java 1967 1977
----------------------------------------
                        if ((this.f & ZERO) != 0) {
                            final int pc_ = this.pc;

                            this.pc = (memory_[pc_] & 0xff) + ((memory_[pc_ + 1] & 0xff) << 8);
                            this.cycles += 16;
                        } else {
                            this.pc += 2;
                            this.cycles += 12;
                        }
                        break;
                    case 0xd2:

----------------------------------------
                        if ((this.f & CARRY) == 0) {
                            final int pc_ = this.pc;

                            this.pc = (memory_[pc_] & 0xff) + ((memory_[pc_ + 1] & 0xff) << 8);
                            this.cycles += 16;
                        } else {
                            this.pc += 2;
                            this.cycles += 12;
                        }
                        break;
                    case 0xda:

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
24219961
src/de/joergjahnke/gameboy/core/CPU.java 1945 1955
src/de/joergjahnke/gameboy/core/CPU.java 1967 1977
----------------------------------------
                        if ((this.f & ZERO) == 0) {
                            final int pc_ = this.pc;

                            this.pc = (memory_[pc_] & 0xff) + ((memory_[pc_ + 1] & 0xff) << 8);
                            this.cycles += 16;
                        } else {
                            this.pc += 2;
                            this.cycles += 12;
                        }
                        break;
                    case 0xca:

----------------------------------------
                        if ((this.f & CARRY) == 0) {
                            final int pc_ = this.pc;

                            this.pc = (memory_[pc_] & 0xff) + ((memory_[pc_ + 1] & 0xff) << 8);
                            this.cycles += 16;
                        } else {
                            this.pc += 2;
                            this.cycles += 12;
                        }
                        break;
                    case 0xda:

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
24219964
src/de/joergjahnke/gameboy/core/CPU.java 1956 1966
src/de/joergjahnke/gameboy/core/CPU.java 1978 1990
----------------------------------------
                        if ((this.f & ZERO) != 0) {
                            final int pc_ = this.pc;

                            this.pc = (memory_[pc_] & 0xff) + ((memory_[pc_ + 1] & 0xff) << 8);
                            this.cycles += 16;
                        } else {
                            this.pc += 2;
                            this.cycles += 12;
                        }
                        break;
                    case 0xd2:

----------------------------------------
                        if ((this.f & CARRY) != 0) {
                            final int pc_ = this.pc;

                            this.pc = (memory_[pc_] & 0xff) + ((memory_[pc_ + 1] & 0xff) << 8);
                            this.cycles += 16;
                        } else {
                            this.pc += 2;
                            this.cycles += 12;
                        }
                        break;

                    // relative conditional jumps
                    case 0x20:

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
24219962
src/de/joergjahnke/gameboy/core/CPU.java 1945 1955
src/de/joergjahnke/gameboy/core/CPU.java 1978 1990
----------------------------------------
                        if ((this.f & ZERO) == 0) {
                            final int pc_ = this.pc;

                            this.pc = (memory_[pc_] & 0xff) + ((memory_[pc_ + 1] & 0xff) << 8);
                            this.cycles += 16;
                        } else {
                            this.pc += 2;
                            this.cycles += 12;
                        }
                        break;
                    case 0xca:

----------------------------------------
                        if ((this.f & CARRY) != 0) {
                            final int pc_ = this.pc;

                            this.pc = (memory_[pc_] & 0xff) + ((memory_[pc_ + 1] & 0xff) << 8);
                            this.cycles += 16;
                        } else {
                            this.pc += 2;
                            this.cycles += 12;
                        }
                        break;

                    // relative conditional jumps
                    case 0x20:

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
24219965
src/de/joergjahnke/gameboy/core/CPU.java 1967 1977
src/de/joergjahnke/gameboy/core/CPU.java 1978 1990
----------------------------------------
                        if ((this.f & CARRY) == 0) {
                            final int pc_ = this.pc;

                            this.pc = (memory_[pc_] & 0xff) + ((memory_[pc_ + 1] & 0xff) << 8);
                            this.cycles += 16;
                        } else {
                            this.pc += 2;
                            this.cycles += 12;
                        }
                        break;
                    case 0xda:

----------------------------------------
                        if ((this.f & CARRY) != 0) {
                            final int pc_ = this.pc;

                            this.pc = (memory_[pc_] & 0xff) + ((memory_[pc_ + 1] & 0xff) << 8);
                            this.cycles += 16;
                        } else {
                            this.pc += 2;
                            this.cycles += 12;
                        }
                        break;

                    // relative conditional jumps
                    case 0x20:

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
24219966
src/de/joergjahnke/gameboy/core/CPU.java 842 845
src/de/joergjahnke/gameboy/core/CPU.java 850 853
----------------------------------------
                final int a8 = this.memory[this.pc] & 0xff;

                return assembly.substring(0, index) + "$" + Integer.toHexString(a8) + assembly.substring(index + 2);
            } else if ((index = assembly.indexOf("a16")) > 0) {

----------------------------------------
                final int r8 = this.memory[this.pc] & 0xff;

                return assembly.substring(0, index) + "$" + Integer.toHexString(r8) + assembly.substring(index + 2);
            } else if ((index = assembly.indexOf("d8")) > 0) {

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
24219967
src/de/joergjahnke/gameboy/core/CPU.java 842 848
src/de/joergjahnke/gameboy/core/CPU.java 854 860
----------------------------------------
                final int a8 = this.memory[this.pc] & 0xff;

                return assembly.substring(0, index) + "$" + Integer.toHexString(a8) + assembly.substring(index + 2);
            } else if ((index = assembly.indexOf("a16")) > 0) {
                final int a16 = (this.memory[this.pc] & 0xff) + (this.memory[this.pc + 1] & 0xff) * 256;

                return assembly.substring(0, index) + "$" + Integer.toHexString(a16) + assembly.substring(index + 2);

----------------------------------------
                final int d8 = this.memory[this.pc] & 0xff;

                return assembly.substring(0, index) + "$" + Integer.toHexString(d8) + assembly.substring(index + 2);
            } else if ((index = assembly.indexOf("d16")) > 0) {
                final int d16 = (this.memory[this.pc] & 0xff) + (this.memory[this.pc + 1] & 0xff) * 256;

                return assembly.substring(0, index) + "$" + Integer.toHexString(d16) + assembly.substring(index + 2);

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
24219968
src/de/joergjahnke/gameboy/core/CPU.java 1756 1771
src/de/joergjahnke/gameboy/core/CPU.java 1782 1797
----------------------------------------
                        final int value = ((this.b << 8) + this.c + 1) & 0xffff;

                        this.b = (value >> 8);
                        this.c = (value & 0xff);
                        this.cycles += 8;
                        break;
                    }
                    case 0x13: {
                        final int value = ((this.d << 8) + this.e + 1) & 0xffff;

                        this.d = (value >> 8);
                        this.e = (value & 0xff);
                        this.cycles += 8;
                        break;
                    }
                    case 0x23:

----------------------------------------
                        final int value = ((this.b << 8) + this.c - 1) & 0xffff;

                        this.b = (value >> 8);
                        this.c = (value & 0xff);
                        this.cycles += 8;
                        break;
                    }
                    case 0x1b: {
                        final int value = ((this.d << 8) + this.e - 1) & 0xffff;

                        this.d = (value >> 8);
                        this.e = (value & 0xff);
                        this.cycles += 8;
                        break;
                    }
                    case 0x2b:

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
24219969
src/de/joergjahnke/gameboy/core/CPU.java 2825 2837
src/de/joergjahnke/gameboy/core/CPU.java 2847 2859
----------------------------------------
                ((SquareWaveChannel) this.sound.getSoundChannels()[0]).setVolumeEnvelope((data & 0xf0) >> 4, (data & 0x08) != 0, data & 0x07);
                break;
            case 0xff13:
            case 0xff14: {
                this.memory[adr] = data;

                final int frequencyGB = (this.memory[0xff13] & 0xff) + ((this.memory[0xff14] & 0x07) << 8);

                ((SquareWaveChannel) this.sound.getSoundChannels()[0]).setFrequency(frequencyGB);
                if (adr == 0xff14) {
                    if ((data & 0x80) != 0) {
                        this.sound.getSoundChannels()[0].setRepeat((data & 0x40) == 0);
                        this.sound.getSoundChannels()[0].setLength(0x40 - (this.memory[0xff11] & 0x3f));

----------------------------------------
                ((SquareWaveChannel) this.sound.getSoundChannels()[1]).setVolumeEnvelope((data & 0xf0) >> 4, (data & 0x08) != 0, data & 0x07);
                break;
            case 0xff18:
            case 0xff19: {
                this.memory[adr] = data;

                final int frequencyGB = (this.memory[0xff18] & 0xff) + ((this.memory[0xff19] & 0x07) << 8);

                ((SquareWaveChannel) this.sound.getSoundChannels()[1]).setFrequency(frequencyGB);
                if (adr == 0xff19) {
                    if ((data & 0x80) != 0) {
                        this.sound.getSoundChannels()[1].setRepeat((data & 0x40) == 0);
                        this.sound.getSoundChannels()[1].setLength(0x40 - (this.memory[0xff16] & 0x3f));

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
24219970
src/de/joergjahnke/gameboy/swing/GameboyFrame.java 706 713
src/de/joergjahnke/gameboy/swing/GameboyFrame.java 729 736
----------------------------------------
        jMenuItemAttachImage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemAttachImageActionPerformed(evt);
            }
        });
        jMenuFile.add(jMenuItemAttachImage);

        jMenuItemSaveSnapshot.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.CTRL_MASK));

----------------------------------------
        jMenuItemExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemExitActionPerformed(evt);
            }
        });
        jMenuFile.add(jMenuItemExit);

        jMenuItemSuspend.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.ALT_MASK));

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
24219971
src/de/joergjahnke/gameboy/jme/GameboyCanvas.java 528 529
src/de/joergjahnke/gameboy/swing/GameboyCanvas.java 199 200
----------------------------------------
        this.gameboy.getJoypad().setDirections(this.gameboy.getJoypad().getDirections() & (0x0f - pressedDirections));
        this.gameboy.getJoypad().setButtons(this.gameboy.getJoypad().getButtons() & (0x0f - pressedButtons));

----------------------------------------
        this.gameboy.getJoypad().setDirections(this.gameboy.getJoypad().getDirections() & (0x0f - pressedDirection));
        this.gameboy.getJoypad().setButtons(this.gameboy.getJoypad().getButtons() & (0x0f - pressedButton));

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
24219972
src/de/joergjahnke/gameboy/jme/MEGameboyMIDlet.java 672 678
src/de/joergjahnke/gameboy/jme/MEGameboyMIDlet.java 852 856
----------------------------------------
        final Display display = Display.getDisplay(this);

        // create a screen that displays a progress bar
        final ProgressForm progressForm = new ProgressForm(LocalizationSupport.getMessage("Resuming"));

        this.gameboy.getCartridge().deleteObservers();
        this.gameboy.getCartridge().addObserver(progressForm);

----------------------------------------
        final Display display = Display.getDisplay(this);
        final ProgressForm progressForm = new ProgressForm(LocalizationSupport.getMessage("Loading"));

        this.gameboy.getCartridge().deleteObservers();
        this.gameboy.getCartridge().addObserver(progressForm);

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
27135957
src/de/joergjahnke/gameboy/core/Tile.java 410 424
src/de/joergjahnke/gameboy/core/Tile.java 424 439
----------------------------------------
                                } else if (x % 3 == 1) {
                                    final int x1 = (sX1024 >> VideoChip.SCALING_MULTIPLIER_BITS);
                                    final int x2 = Math.min(maxSX, sX1024Next >> VideoChip.SCALING_MULTIPLIER_BITS);
                                    final int offsetY1 = (sY1024 >> VideoChip.SCALING_MULTIPLIER_BITS) * w;
                                    final int col11 = source[offsetY1 + x1];
                                    final int col12 = source[offsetY1 + x2];

                                    if (col11 == TRANSPARENT) {
                                        scaled[yidx + x] = col12;
                                    } else if (col12 == TRANSPARENT) {
                                        scaled[yidx + x] = col11;
                                    } else {
                                        scaled[yidx + x] = Color.mix(col11, col12);
                                    }
                                } else {

----------------------------------------
                                } else {
                                    final int x1 = (sX1024 >> VideoChip.SCALING_MULTIPLIER_BITS);
                                    final int y2 = Math.min(maxSY, sY1024Next >> VideoChip.SCALING_MULTIPLIER_BITS);
                                    final int offsetY1 = (sY1024 >> VideoChip.SCALING_MULTIPLIER_BITS) * w;
                                    final int offsetY2 = y2 * w;
                                    final int col11 = source[offsetY1 + x1];
                                    final int col21 = source[offsetY2 + x1];

                                    if (col11 == TRANSPARENT) {
                                        scaled[yidx + x] = col21;
                                    } else if (col21 == TRANSPARENT) {
                                        scaled[yidx + x] = col11;
                                    } else {
                                        scaled[yidx + x] = Color.mix(col11, col21);
                                    }
                                }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
27135958
src/de/joergjahnke/gameboy/core/CPU.java 3023 3036
src/de/joergjahnke/gameboy/core/CPU.java 3036 3047
----------------------------------------
                if (!isHDMARunning()) {
                    // start HDMA transfer?
                    if ((data & 0x80) == 0 || IMMEDIATE_HDMA) {
                        // do General Purpose DMA, copying all blocks at once
                        final int len = ((data & 0x7f) + 1);

                        performHDMA(len);
                        this.isHDMARunning = false;
                    } else {
                        // do H-Blank DMA, copying 1 block per H-Blank
                        data &= 0x7f;
                        this.isHDMARunning = true;
                    }
                } else {

----------------------------------------
                } else {
                    // terminate the transfer?
                    if ((data & 0x80) == 0) {
                        // then set bit 7 to indicate completed transfer
                        data |= 0x80;
                        this.isHDMARunning = false;
                    } else {
                        // continue transfer
                        data &= 0x7f;
                        this.isHDMARunning = true;
                    }
                }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
27135959
src/de/joergjahnke/gameboy/jme/GameboyCanvas.java 383 392
src/de/joergjahnke/gameboy/jme/GameboyCanvas.java 392 402
----------------------------------------
                if (h - this.paintHeight >= bh) {
                    this.x = (w - this.paintWidth) >> 1;
                    this.y = (h - this.paintHeight - buttonsHeight) >> 1;

                    final int xinc = (w - n1 * bw - (isShowDirectionButtons() ? dw : 0)) / (n2 - 1) + bw;

                    for (int i = 0, xx = 0, yy = h - bh; i < n1; ++i, xx += xinc) {
                        this.buttons[i].setPosition(xx, yy);
                    }
                } else {

----------------------------------------
                } else {
                    // no, place them to the right
                    this.x = (w - this.paintWidth - buttonsWidth) >> 1;
                    this.y = (h - this.paintHeight) >> 1;

                    final int yinc = (h - n1 * bh - (isShowDirectionButtons() ? dh : 0)) / (n2 - 1) + bh;

                    for (int i = 0, xx = w - bw, yy = 0; i < n1; ++i, yy += yinc) {
                        this.buttons[i].setPosition(xx, yy);
                    }
                }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
27135960
src/de/joergjahnke/gameboy/android/GameboyView.java 379 386
src/de/joergjahnke/gameboy/android/GameboyView.java 386 392
----------------------------------------
			if(Math.abs(xmove) > Math.abs(ymove)) {
				if(xmove < 0) {
					onKeyDown(KeyEvent.KEYCODE_DPAD_LEFT, null);
				} else {
					onKeyDown(KeyEvent.KEYCODE_DPAD_RIGHT, null);
				}
			// no, vertical movement
			} else {

----------------------------------------
			} else {
				if(ymove < 0) {
					onKeyDown(KeyEvent.KEYCODE_DPAD_UP, null);
				} else {
					onKeyDown(KeyEvent.KEYCODE_DPAD_DOWN, null);
				}
			}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
27135961
src/de/joergjahnke/gameboy/android/GameboyView.java 226 233
src/de/joergjahnke/gameboy/android/GameboyView.java 233 240
----------------------------------------
			if(w - this.screenRect.width() > h - this.screenRect.height()) {
				// place buttons at the size of the screen
				final int yinc = (h - n * bh) / (n - 1) + bh;
				
				for(int i = 0, x = w - bw, y = 0 ; i < n ; ++i, y += yinc) {
					this.buttons[i].setBounds(x, y, x + bw, y + bh);
				}
			} else {

----------------------------------------
			} else {
				// place buttons at the bottom of the screen
				final int xinc = (w - n * bw) / (n - 1) + bw;
				
				for(int i = 0, x = 0, y = h - bh ; i < n ; ++i, x += xinc) {
					this.buttons[i].setBounds(x, y, x + bw, y + bh);
				}
			}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
27135969
src/de/joergjahnke/common/io/SerializationUtils.java 78 83
src/de/joergjahnke/common/jme/WavePlayer.java 93 97
----------------------------------------
    public static void serialize(final DataOutputStream out, final short[] data) throws IOException {
        out.writeInt(data.length);
        for (int i = 0; i < data.length; ++i) {
            out.writeShort(data[i]);
        }
    }

----------------------------------------
    private final void initBuffer(final byte[] buffer) {
        for (int i = 0; i < WAV_HEADER.length; ++i) {
            buffer[i] = (byte) (WAV_HEADER[i] & 0xff);
        }
    }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
27135968
src/de/joergjahnke/common/io/SerializationUtils.java 49 54
src/de/joergjahnke/common/jme/WavePlayer.java 93 97
----------------------------------------
    public static void serialize(final DataOutputStream out, final byte[] data) throws IOException {
        out.writeInt(data.length);
        for (int i = 0; i < data.length; ++i) {
            out.writeByte(data[i]);
        }
    }

----------------------------------------
    private final void initBuffer(final byte[] buffer) {
        for (int i = 0; i < WAV_HEADER.length; ++i) {
            buffer[i] = (byte) (WAV_HEADER[i] & 0xff);
        }
    }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
27135962
src/de/joergjahnke/gameboy/jme/GameboyCanvas.java 693 699
src/de/joergjahnke/common/jme/WavePlayer.java 93 97
----------------------------------------
            if (isShowDirectionButtons()) {
                final int selectedDirections = ((Joypad) observable).getDirections();

                for (int i = 0; i < DIRECTION_JOYPAD_MAPPING.length; ++i) {
                    this.directions[i].setImage(this.directionImages[(selectedDirections & DIRECTION_JOYPAD_MAPPING[i]) != 0 ? i + BUTTON_IMAGES.length : i], this.directions[i].getWidth(), this.directions[i].getHeight());
                }
            }

----------------------------------------
    private final void initBuffer(final byte[] buffer) {
        for (int i = 0; i < WAV_HEADER.length; ++i) {
            buffer[i] = (byte) (WAV_HEADER[i] & 0xff);
        }
    }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
27135974
src/de/joergjahnke/common/io/SerializationUtils.java 165 170
src/de/joergjahnke/common/jme/WavePlayer.java 93 97
----------------------------------------
    public static void serialize(final DataOutputStream out, final boolean[] data) throws IOException {
        out.writeInt(data.length);
        for (int i = 0; i < data.length; ++i) {
            out.writeBoolean(data[i]);
        }
    }

----------------------------------------
    private final void initBuffer(final byte[] buffer) {
        for (int i = 0; i < WAV_HEADER.length; ++i) {
            buffer[i] = (byte) (WAV_HEADER[i] & 0xff);
        }
    }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
27135973
src/de/joergjahnke/common/io/SerializationUtils.java 136 141
src/de/joergjahnke/common/jme/WavePlayer.java 93 97
----------------------------------------
    public static void serialize(final DataOutputStream out, final long[] data) throws IOException {
        out.writeInt(data.length);
        for (int i = 0; i < data.length; ++i) {
            out.writeLong(data[i]);
        }
    }

----------------------------------------
    private final void initBuffer(final byte[] buffer) {
        for (int i = 0; i < WAV_HEADER.length; ++i) {
            buffer[i] = (byte) (WAV_HEADER[i] & 0xff);
        }
    }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
27135966
src/de/joergjahnke/gameboy/core/WhiteNoiseChannel.java 25 31
src/de/joergjahnke/common/jme/WavePlayer.java 93 97
----------------------------------------
    static {
        final Random rand = new Random();
        
        for(int i = 0 ; i < randoms.length;++i) {
            randoms[i] = (rand.nextInt() & 1) == 1;
        }
    }

----------------------------------------
    private final void initBuffer(final byte[] buffer) {
        for (int i = 0; i < WAV_HEADER.length; ++i) {
            buffer[i] = (byte) (WAV_HEADER[i] & 0xff);
        }
    }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
27135971
src/de/joergjahnke/common/io/SerializationUtils.java 194 199
src/de/joergjahnke/common/jme/WavePlayer.java 93 97
----------------------------------------
    public static void serialize(final DataOutputStream out, final String[] data) throws IOException {
        out.writeInt(data.length);
        for (int i = 0; i < data.length; ++i) {
            out.writeUTF(data[i]);
        }
    }

----------------------------------------
    private final void initBuffer(final byte[] buffer) {
        for (int i = 0; i < WAV_HEADER.length; ++i) {
            buffer[i] = (byte) (WAV_HEADER[i] & 0xff);
        }
    }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
27135967
src/de/joergjahnke/common/io/SerializationUtils.java 223 228
src/de/joergjahnke/common/jme/WavePlayer.java 93 97
----------------------------------------
    public static void serialize(final DataOutputStream out, final Serializable[] data) throws IOException {
        out.writeInt(data.length);
        for (int i = 0; i < data.length; ++i) {
            data[i].serialize(out);
        }
    }

----------------------------------------
    private final void initBuffer(final byte[] buffer) {
        for (int i = 0; i < WAV_HEADER.length; ++i) {
            buffer[i] = (byte) (WAV_HEADER[i] & 0xff);
        }
    }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
27135972
src/de/joergjahnke/common/io/SerializationUtils.java 107 112
src/de/joergjahnke/common/jme/WavePlayer.java 93 97
----------------------------------------
    public static void serialize(final DataOutputStream out, final int[] data) throws IOException {
        out.writeInt(data.length);
        for (int i = 0; i < data.length; ++i) {
            out.writeInt(data[i]);
        }
    }

----------------------------------------
    private final void initBuffer(final byte[] buffer) {
        for (int i = 0; i < WAV_HEADER.length; ++i) {
            buffer[i] = (byte) (WAV_HEADER[i] & 0xff);
        }
    }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
27135963
src/de/joergjahnke/gameboy/jme/GameboyCanvas.java 685 691
src/de/joergjahnke/common/jme/WavePlayer.java 93 97
----------------------------------------
            if (isShowButtons()) {
                final int pressedButtons = ((Joypad) observable).getButtons();

                for (int i = 0; i < BUTTON_JOYPAD_MAPPING.length; ++i) {
                    this.buttons[i].setImage(this.buttonImages[(pressedButtons & BUTTON_JOYPAD_MAPPING[i]) != 0 ? i + BUTTON_IMAGES.length : i], this.buttons[i].getWidth(), this.buttons[i].getHeight());
                }
            }

----------------------------------------
    private final void initBuffer(final byte[] buffer) {
        for (int i = 0; i < WAV_HEADER.length; ++i) {
            buffer[i] = (byte) (WAV_HEADER[i] & 0xff);
        }
    }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
27135964
src/de/joergjahnke/gameboy/android/AndroidGB.java 249 255
src/de/joergjahnke/gameboy/android/AndroidGB.java 255 261
----------------------------------------
        if (this.gameboy.isRunning()) {
            this.mainmenu.findItem(MENU_QUITGAME).setShown(true);
            this.mainmenu.findItem(MENU_PAUSE).setShown(!this.gameboy.isPaused());
            this.mainmenu.findItem(MENU_RESUME).setShown(this.gameboy.isPaused());
            this.mainmenu.findItem(MENU_LOADCARTRIDGE).setShown(false);
            this.mainmenu.findItem(MENU_SETTINGS).setShown(false);
        } else {

----------------------------------------
        } else {
        	this.mainmenu.setItemShown(MENU_QUITGAME, false);
            this.mainmenu.findItem(MENU_PAUSE).setShown(false);
            this.mainmenu.findItem(MENU_RESUME).setShown(false);
            this.mainmenu.findItem(MENU_LOADCARTRIDGE).setShown(true);
            this.mainmenu.findItem(MENU_SETTINGS).setShown(true);
        }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
27135965
src/de/joergjahnke/common/jme/CollectionUtils.java 26 32
src/de/joergjahnke/common/jme/CollectionUtils.java 40 44
----------------------------------------
    public static void putAll(final Hashtable map, final Hashtable add) {
        for (final Enumeration en = add.keys(); en.hasMoreElements();) {
            final Object key = en.nextElement();

            map.put(key, add.get(key));
        }
    }

----------------------------------------
    public static void removeAll(final Hashtable map, final Hashtable remove) {
        for (final Enumeration en = remove.keys(); en.hasMoreElements();) {
            map.remove(en.nextElement());
        }
    }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
27135970
src/de/joergjahnke/common/bluetooth/BluetoothDevice.java 123 127
src/de/joergjahnke/common/util/DefaultObservable.java 60 65
----------------------------------------
    protected void notifyErrorOccurred(final Throwable t) {
        for (int i = 0, to = this.listeners.size(); i < to; ++i) {
            ((BluetoothEventListener) this.listeners.elementAt(i)).errorOccurred(t);
        }
    }

----------------------------------------
        if( hasChanged() ) {
            for( int i = 0, to = this.observers.size() ; i < to ; ++i ) {
                ( (Observer)this.observers.elementAt( i ) ).update( this.observed, arg );
            }
            setChanged( false );
        }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
27135975
src/de/joergjahnke/common/jme/CollectionUtils.java 40 44
src/de/joergjahnke/common/jme/FileBrowser.java 135 139
----------------------------------------
    public static void removeAll(final Hashtable map, final Hashtable remove) {
        for (final Enumeration en = remove.keys(); en.hasMoreElements();) {
            map.remove(en.nextElement());
        }
    }

----------------------------------------
                    if (null == selected || "".equals(selected)) {
                        for (final Enumeration en = javax.microedition.io.file.FileSystemRegistry.listRoots(); en.hasMoreElements();) {
                            currentFiles.addElement(en.nextElement());
                        }
                    } else {

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
27135976
src/de/joergjahnke/common/jme/FileBrowser.java 135 139
src/de/joergjahnke/common/jme/FileSystemHandler.java 126 131
----------------------------------------
                    if (null == selected || "".equals(selected)) {
                        for (final Enumeration en = javax.microedition.io.file.FileSystemRegistry.listRoots(); en.hasMoreElements();) {
                            currentFiles.addElement(en.nextElement());
                        }
                    } else {

----------------------------------------
                    } else {
                        // iterate over all root directories
                        for (final Enumeration en = javax.microedition.io.file.FileSystemRegistry.listRoots(); en.hasMoreElements();) {
                            directories.addElement("file:///" + en.nextElement());
                        }
                    }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
27334493
src/de/joergjahnke/gameboy/android/AndroidGB.java 466 479
src/de/joergjahnke/gameboy/jme/MEGameboyMIDlet.java 1331 1345
----------------------------------------
        });
    }

    /**
     * Switch the sound on/off
     *
     * @param   active  true to switch the sound on, false to switch it off
     */
    protected void setSound(final boolean active) {
        if (active) {
            if (this.gameboy.getSoundChip().countObservers() == 0) {
                try {
                    this.gameboy.getSoundChip().addObserver(new WavePlayer(this.gameboy.getSoundChip()));
                } catch (Throwable t) {

----------------------------------------
        display.setCurrent(settingsForm);
    }

    /**
     * Switch the sound on/off
     *
     * @param   active  true to switch the sound on, false to switch it off
     */
    protected void setSound(final boolean active) {
        if (active) {
            if (this.gameboy.getSoundChip().countObservers() == 0) {
                // first try to initialize the PCMtoMIDIPlayer
                try {
                    this.gameboy.getSoundChip().addObserver(new PCMtoMIDIPlayer(this.gameboy.getSoundChip()));
                } catch (Throwable t) {

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
27334494
src/de/joergjahnke/gameboy/jme/GameboyCanvas.java 528 530
src/de/joergjahnke/gameboy/swing/GameboyCanvas.java 199 201
----------------------------------------
        this.gameboy.getJoypad().setDirections(this.gameboy.getJoypad().getDirections() & (0x0f - pressedDirections));
        this.gameboy.getJoypad().setButtons(this.gameboy.getJoypad().getButtons() & (0x0f - pressedButtons));
    }

----------------------------------------
        this.gameboy.getJoypad().setDirections(this.gameboy.getJoypad().getDirections() & (0x0f - pressedDirection));
        this.gameboy.getJoypad().setButtons(this.gameboy.getJoypad().getButtons() & (0x0f - pressedButton));
    }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
27334495
src/de/joergjahnke/gameboy/jme/GameboyCanvas.java 511 517
src/de/joergjahnke/gameboy/swing/GameboyCanvas.java 157 162
----------------------------------------
            this.buttonReleaseTimers.put(key, buttonReleaseTimer);
        }

        // apply new directions and buttons
        this.gameboy.getJoypad().setDirections(this.gameboy.getJoypad().getDirections() | pressedDirections);
        this.gameboy.getJoypad().setButtons(this.gameboy.getJoypad().getButtons() | pressedButtons);
    }

----------------------------------------
                ;
        }

        this.gameboy.getJoypad().setDirections(this.gameboy.getJoypad().getDirections() | pressedDirection);
        this.gameboy.getJoypad().setButtons(this.gameboy.getJoypad().getButtons() | pressedButton);
    }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
27334496
src/de/joergjahnke/gameboy/core/SoundChip.java 155 165
src/de/joergjahnke/gameboy/core/VideoChip.java 1590 1600
----------------------------------------
        this.nextUpdate = in.readLong();
    }

    // implementation of the Observer interface
    public void update(final Object observed, final Object arg) {
        // we get informed about a new CPU speed?
        if (observed == this.gameboy.getCPU() && arg instanceof Long) {
            // then re-calculate the number of cycles that pass between updates of the sound chip
            final long newSpeed = ((Long) arg).longValue();

            this.updateCycles = newSpeed / UPDATES_PER_SECOND;

----------------------------------------
        invalidateLines();
    }

    // implementation of the Observer interface
    public void update(final Object observed, final Object arg) {
        // we get informed about a new CPU speed?
        if (observed == this.gameboy.getCPU() && arg instanceof Long) {
            // then calculate a new multiplier for calculations where CPU speed is relevant
            final long newSpeed = ((Long) arg).longValue();

            this.cpuSpeedMult = (int) (newSpeed * 1024 / Gameboy.ORIGINAL_SPEED_CLASSIC);

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
27334497
src/de/joergjahnke/gameboy/core/ColorPalette.java 105 120
src/de/joergjahnke/gameboy/core/TileData.java 156 171
----------------------------------------
            }

            this.colorsCode = hc;
        }

        return this.colorsCode;
    }

    /**
     * Check whether this ColorPalette equals another one
     *
     * @return  true if the given object is another ColorPalette object with the same hash code as this one
     */
    public boolean equals(final Object obj) {
        return obj != null && getClass() == obj.getClass() && hashCode() == ((ColorPalette) obj).hashCode();
    }

----------------------------------------
            }

            this.pixelsCode = hc;
        }

        return this.pixelsCode;
    }

    /**
     * Check whether this TileData equals another one
     * 
     * @return  true if the given object is another TileData object with the same hash code as this one
     */
    public boolean equals(final Object obj) {
        return obj != null && getClass() == obj.getClass() && hashCode() == ((TileData) obj).hashCode();
    }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
27334498
src/de/joergjahnke/gameboy/core/ColorPalette.java 7 21
src/de/joergjahnke/gameboy/core/Joypad.java 7 20
----------------------------------------
package de.joergjahnke.gameboy.core;

import de.joergjahnke.common.io.Serializable;
import de.joergjahnke.common.io.SerializationUtils;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;

/**
 * One of the Gameboy's color palette.
 * Each palette consists of four colors.
 * 
 * @author Joerg Jahnke (joergjahnke@users.sourceforge.net)
 */
public class ColorPalette implements Serializable {

----------------------------------------
package de.joergjahnke.gameboy.core;

import de.joergjahnke.common.io.Serializable;
import de.joergjahnke.common.util.DefaultObservable;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;

/**
 * Implements the Gameboy's joypad
 * 
 * @author Joerg Jahnke (joergjahnke@users.sourceforge.net)
 */
public class Joypad extends DefaultObservable implements Serializable {

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
27334499
src/de/joergjahnke/gameboy/core/SquareWaveChannel.java 142 160
src/de/joergjahnke/gameboy/core/WhiteNoiseChannel.java 107 125
----------------------------------------
            final byte sample = (byte) (this.audioIndex >= target ? this.volume << 1 : -this.volume << 1);

            // apply sample to relevant output terminals
            if (isLeftActive) {
                buffer[i + LEFT] += sample;
            }
            if (isRightActive) {
                buffer[i + RIGHT] += sample;
            }

            // proceed to next sample
            this.audioIndex += this.frequency;
            this.audioIndex %= sampleRate;
        }
    }

    // implementation of the FrequencyDataProducer interface
    public final int getFrequency() {
        return Math.min(12544, this.startFrequency);

----------------------------------------
            final int sample = randoms[index] ? this.volume << 1 : -this.volume << 1;

            // apply sample to relevant output terminals
            if (isLeftActive) {
                buffer[i + LEFT] += sample;
            }
            if (isRightActive) {
                buffer[i + RIGHT] += sample;
            }

            // proceed to next sample
            this.audioIndex += this.frequency;
            this.audioIndex %= mod;
        }
    }

    // implementation of the FrequencyDataProducer interface
    public final int getFrequency() {
        return this.startFrequency % 12000;

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
27334500
src/de/joergjahnke/gameboy/core/SquareWaveChannel.java 125 138
src/de/joergjahnke/gameboy/core/WhiteNoiseChannel.java 90 103
----------------------------------------
        if (this.envelopeSweeps > 0) {
            --this.envelopeSweepsLeft;
            if (this.envelopeSweepsLeft <= 0) {
                this.volume = Math.min(MAX_VOLUME, Math.max(0, this.volume + this.envelopeDirection));
                this.envelopeSweepsLeft = this.envelopeSweeps;
            }
        }
    }

    public void mix(final byte[] buffer) {
        final int sampleRate = this.sound.getSampleRate();
        final boolean isLeftActive = isTerminalActive(LEFT);
        final boolean isRightActive = isTerminalActive(RIGHT);
        final int target = this.dutyPercent * sampleRate / 100;

----------------------------------------
        if (this.envelopeSweeps > 0) {
            --this.envelopeSweepsLeft;
            if (this.envelopeSweepsLeft <= 0) {
                this.volume = Math.min(MAX_VOLUME, Math.max(0, this.volume + this.envelopeDirection));
                this.envelopeSweepsLeft = this.envelopeSweeps;
            }
        }
    }

    public void mix(final byte[] buffer) {
        final int sampleRate = this.sound.getSampleRate();
        final boolean isLeftActive = isTerminalActive(LEFT);
        final boolean isRightActive = isTerminalActive(RIGHT);
        final int mod = sampleRate * (this.isSmallStepWidth ? 1 << 7 : 1 << 15);

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
27334501
src/de/joergjahnke/gameboy/core/SquareWaveChannel.java 85 106
src/de/joergjahnke/gameboy/core/WhiteNoiseChannel.java 55 78
----------------------------------------
        this.dutyPercent = duty == 0 ? 13 : duty == 1 ? 25 : duty == 2 ? 50 : 75;
    }

    /**
     * Set envelope parameters
     * 
     * @param   initialVolume   initial sound volume (0-15)
     * @param   increase    true to increase the frequency on envelope sweeps, false to decrease
     * @param   envelopeSweeps  number of envelope sweeps in 1/64th seconds
     */
    public void setVolumeEnvelope(final int initialVolume, final boolean increase, final int envelopeSweeps) {
        this.volume = initialVolume;
        this.envelopeSweeps = this.envelopeSweepsLeft = (envelopeSweeps * SoundChip.UPDATES_PER_SECOND) >> 6;
        this.envelopeDirection = increase ? 1 : -1;
    }

    /**
     * Set the sound frequency
     * 
     * @param   frequencyGB frequency in Gameboy format (0-2047)
     */
    public void setFrequency(final int frequencyGB) {

----------------------------------------
        super(sound);
    }

    /**
     * Set envelope parameters
     * 
     * @param   initialVolume   initial sound volume (0-15)
     * @param   increase    true to increase the frequency on envelope sweeps, false to decrease
     * @param   envelopeSweeps  number of envelope sweeps
     */
    public void setVolumeEnvelope(final int initialVolume, final boolean increase, final int envelopeSweeps) {
        this.volume = initialVolume;
        this.envelopeSweeps = this.envelopeSweepsLeft = (envelopeSweeps * SoundChip.UPDATES_PER_SECOND) >> 6;
        this.envelopeDirection = increase ? 1 : -1;
    }

    /**
     * Set polynomial counter parameters
     * 
     * @param   shift   shift clock frequency
     * @param   isSmallStepWidth    use 7 bit counter steps instead of 15 bit?
     * @param   dividingRatio   dividing ratio of frequencies
     */
    public void setPolynomialCounter(final int shift, final boolean isSmallStepWidth, final int dividingRatio) {

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
27334502
src/de/joergjahnke/gameboy/core/Cartridge.java 7 15
src/de/joergjahnke/gameboy/core/VideoChip.java 7 15
----------------------------------------
package de.joergjahnke.gameboy.core;

import de.joergjahnke.common.io.Serializable;
import de.joergjahnke.common.io.SerializationUtils;
import de.joergjahnke.common.util.DefaultObservable;
import de.joergjahnke.common.util.Observer;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;

----------------------------------------
package de.joergjahnke.gameboy.core;

import de.joergjahnke.common.io.Serializable;
import de.joergjahnke.common.io.SerializationUtils;
import de.joergjahnke.common.util.DefaultObservable;
import de.joergjahnke.common.util.Observer;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
28734526
src/de/joergjahnke/common/jme/ButtonAssignmentCanvas.java 149 161
src/de/joergjahnke/common/jme/ButtonAssignmentCanvas.java 151 158
----------------------------------------
        if (!this.result.containsKey(new Integer(keyCode)) && !this.result.containsKey(new Integer(keyCode + MASK_REPEAT_KEY))) {
            // ignore the soft keys that trigger the command actions
            try {
                if (getKeyName(keyCode).indexOf("SOFT") < 0) {
                    // assign the key and proceed to the next
                    this.result.put(new Integer(keyCode), this.buttons.elementAt(this.currentButton));
                    this.errorMessage = null;
                    nextButton();
                }
            } catch (IllegalArgumentException e) {
                // an illegal keycode might be passed to getKeyName
            }
        } else {

----------------------------------------
            try {
                if (getKeyName(keyCode).indexOf("SOFT") < 0) {
                    // assign the key and proceed to the next
                    this.result.put(new Integer(keyCode), this.buttons.elementAt(this.currentButton));
                    this.errorMessage = null;
                    nextButton();
                }
            } catch (IllegalArgumentException e) {

----------------------------------------
